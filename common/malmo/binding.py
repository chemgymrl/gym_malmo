# malmo_bindings/binding.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:be3793369cb640bd3e7242b5e52e2070bf1e8472
# Generated 2018-11-07 11:45:35.059222 by PyXB version 1.2.6 using Python 3.6.6.final.0
# Namespace http://ProjectMalmo.microsoft.com

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:8bfd3a18-e2ac-11e8-a4bf-186590d8173d')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://ProjectMalmo.microsoft.com', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 49, 20)
    _Documentation = None
STD_ANON._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON, value=pyxb.binding.datatypes.int(1))
STD_ANON._InitializeFacetMap(STD_ANON._CF_minInclusive)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 212, 6)
    _Documentation = None
STD_ANON_._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_, value=pyxb.binding.datatypes.int(0))
STD_ANON_._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_, value=pyxb.binding.datatypes.int(23999))
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_minInclusive,
   STD_ANON_._CF_maxInclusive)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 234, 8)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.normal = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
STD_ANON_2.clear = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='clear', tag='clear')
STD_ANON_2.rain = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='rain', tag='rain')
STD_ANON_2.thunder = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='thunder', tag='thunder')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 246, 12)
    _Documentation = None
STD_ANON_3._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_3, value=pyxb.binding.datatypes.int(0))
STD_ANON_3._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_3, value=pyxb.binding.datatypes.int(39))
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_minInclusive,
   STD_ANON_3._CF_maxInclusive)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 257, 12)
    _Documentation = None
STD_ANON_4._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_4, value=pyxb.binding.datatypes.int(1))
STD_ANON_4._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_4, value=pyxb.binding.datatypes.int(64))
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_minInclusive,
   STD_ANON_4._CF_maxInclusive)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: {http://ProjectMalmo.microsoft.com}GameMode
class GameMode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
              In survival mode the player can be hurt and experience hunger and must collect blocks. In creative mode they can fly and have an infinite supply of blocks.
              In spectator mode the player cannot change anything and can fly through blocks.
            """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GameMode')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 300, 4)
    _Documentation = '\n              In survival mode the player can be hurt and experience hunger and must collect blocks. In creative mode they can fly and have an infinite supply of blocks.\n              In spectator mode the player cannot change anything and can fly through blocks.\n            '
GameMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=GameMode, enum_prefix=None)
GameMode.Survival = GameMode._CF_enumeration.addEnumeration(unicode_value='Survival', tag='Survival')
GameMode.Creative = GameMode._CF_enumeration.addEnumeration(unicode_value='Creative', tag='Creative')
GameMode.Adventure = GameMode._CF_enumeration.addEnumeration(unicode_value='Adventure', tag='Adventure')
GameMode.Spectator = GameMode._CF_enumeration.addEnumeration(unicode_value='Spectator', tag='Spectator')
GameMode._InitializeFacetMap(GameMode._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'GameMode', GameMode)
_module_typeBindings.GameMode = GameMode

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 39, 10)
    _Documentation = None
STD_ANON_5._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_5, value=pyxb.binding.datatypes.decimal('-360.0'))
STD_ANON_5._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_5, value=pyxb.binding.datatypes.decimal('360.0'))
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_minInclusive,
   STD_ANON_5._CF_maxInclusive)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 52, 10)
    _Documentation = None
STD_ANON_6._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_6, value=pyxb.binding.datatypes.decimal('-90.0'))
STD_ANON_6._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_6, value=pyxb.binding.datatypes.decimal('90.0'))
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_minInclusive,
   STD_ANON_6._CF_maxInclusive)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string):

    """
                Either an integer number, or the string "random".
              """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 285, 10)
    _Documentation = '\n                Either an integer number, or the string "random".\n              '
STD_ANON_7._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_7._CF_pattern.addPattern(pattern='random|[0-9]+')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_pattern)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string):

    """
                Either an integer number, or the string "turnbased".
              """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 302, 10)
    _Documentation = '\n                Either an integer number, or the string "turnbased".\n              '
STD_ANON_8._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_8._CF_pattern.addPattern(pattern='turnbased|[0-9]+')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_pattern)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string):

    """
                Either an integer number, or the string "random".
              """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 334, 10)
    _Documentation = '\n                Either an integer number, or the string "random".\n              '
STD_ANON_9._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_9._CF_pattern.addPattern(pattern='random|[0-9]+')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_pattern)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string):

    """
                Either an integer number, or the string "random".
              """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 351, 10)
    _Documentation = '\n                Either an integer number, or the string "random".\n              '
STD_ANON_10._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_10._CF_pattern.addPattern(pattern='random|[0-9]+')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_pattern)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string):

    """
                Either an integer number, or the string "random".
              """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 421, 10)
    _Documentation = '\n                Either an integer number, or the string "random".\n              '
STD_ANON_11._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_11._CF_pattern.addPattern(pattern='random|[0-9]+')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_pattern)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string):

    """
                Either an integer number, or the string "random".
              """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 438, 10)
    _Documentation = '\n                Either an integer number, or the string "random".\n              '
STD_ANON_12._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_12._CF_pattern.addPattern(pattern='random|[0-9]+')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_pattern)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: {http://ProjectMalmo.microsoft.com}PaletteEnum
class PaletteEnum (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PaletteEnum')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 765, 2)
    _Documentation = None
PaletteEnum._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PaletteEnum, enum_prefix=None)
PaletteEnum.default = PaletteEnum._CF_enumeration.addEnumeration(unicode_value='default', tag='default')
PaletteEnum.random = PaletteEnum._CF_enumeration.addEnumeration(unicode_value='random', tag='random')
PaletteEnum.dungeon = PaletteEnum._CF_enumeration.addEnumeration(unicode_value='dungeon', tag='dungeon')
PaletteEnum.pyramid = PaletteEnum._CF_enumeration.addEnumeration(unicode_value='pyramid', tag='pyramid')
PaletteEnum.igloo = PaletteEnum._CF_enumeration.addEnumeration(unicode_value='igloo', tag='igloo')
PaletteEnum._InitializeFacetMap(PaletteEnum._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PaletteEnum', PaletteEnum)
_module_typeBindings.PaletteEnum = PaletteEnum

# Atomic simple type: {http://ProjectMalmo.microsoft.com}BuildingSize
class BuildingSize (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildingSize')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 793, 2)
    _Documentation = None
BuildingSize._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=BuildingSize, value=pyxb.binding.datatypes.int(7))
BuildingSize._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=BuildingSize, value=pyxb.binding.datatypes.int(50))
BuildingSize._InitializeFacetMap(BuildingSize._CF_minInclusive,
   BuildingSize._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'BuildingSize', BuildingSize)
_module_typeBindings.BuildingSize = BuildingSize

# Atomic simple type: {http://ProjectMalmo.microsoft.com}ZeroToOne
class ZeroToOne (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ZeroToOne')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 800, 2)
    _Documentation = None
ZeroToOne._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=ZeroToOne, value=pyxb.binding.datatypes.double(0.0))
ZeroToOne._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=ZeroToOne, value=pyxb.binding.datatypes.double(1.0))
ZeroToOne._InitializeFacetMap(ZeroToOne._CF_minInclusive,
   ZeroToOne._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'ZeroToOne', ZeroToOne)
_module_typeBindings.ZeroToOne = ZeroToOne

# Atomic simple type: {http://ProjectMalmo.microsoft.com}NonNegative
class NonNegative (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NonNegative')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 807, 2)
    _Documentation = None
NonNegative._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=NonNegative, value=pyxb.binding.datatypes.int(0))
NonNegative._InitializeFacetMap(NonNegative._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'NonNegative', NonNegative)
_module_typeBindings.NonNegative = NonNegative

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string):

    """
                      Either an integer number, or the string "random".
                    """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 851, 16)
    _Documentation = '\n                      Either an integer number, or the string "random".\n                    '
STD_ANON_13._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_13._CF_pattern.addPattern(pattern='random|[0-9]+')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_pattern)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
                          Specifies the placement behavior of the block. Default is "surface."

                          String of "sphere" will place equally randomly in a sphere of radius specified.

                          String of "circle" will place randomly in a circle at the y-coordinate specified.

                          String of "surface" will place randomly in a circle, then raise to the highest available block on the surface.
                      """

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 990, 14)
    _Documentation = '\n                          Specifies the placement behavior of the block. Default is "surface."\n\n                          String of "sphere" will place equally randomly in a sphere of radius specified.\n\n                          String of "circle" will place randomly in a circle at the y-coordinate specified.\n\n                          String of "surface" will place randomly in a circle, then raise to the highest available block on the surface.\n                      '
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.sphere = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='sphere', tag='sphere')
STD_ANON_14.circle = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='circle', tag='circle')
STD_ANON_14.surface = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='surface', tag='surface')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: {http://ProjectMalmo.microsoft.com}HexColour
class HexColour (pyxb.binding.datatypes.hexBinary):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HexColour')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1123, 2)
    _Documentation = None
HexColour._CF_length = pyxb.binding.facets.CF_length(value=pyxb.binding.datatypes.nonNegativeInteger(3))
HexColour._InitializeFacetMap(HexColour._CF_length)
Namespace.addCategoryObject('typeBinding', 'HexColour', HexColour)
_module_typeBindings.HexColour = HexColour

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1165, 14)
    _Documentation = None
STD_ANON_15._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_15, value=pyxb.binding.datatypes.decimal('0.0'))
STD_ANON_15._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_15, value=pyxb.binding.datatypes.decimal('1.0'))
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_minInclusive,
   STD_ANON_15._CF_maxInclusive)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.decimal):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1173, 14)
    _Documentation = None
STD_ANON_16._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_16, value=pyxb.binding.datatypes.decimal('0.0'))
STD_ANON_16._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_16, value=pyxb.binding.datatypes.decimal('1.0'))
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_minInclusive,
   STD_ANON_16._CF_maxInclusive)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1203, 8)
    _Documentation = None
STD_ANON_17._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_17, value=pyxb.binding.datatypes.int(0))
STD_ANON_17._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=STD_ANON_17, value=pyxb.binding.datatypes.int(2))
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_minInclusive,
   STD_ANON_17._CF_maxInclusive)
_module_typeBindings.STD_ANON_17 = STD_ANON_17

# Atomic simple type: {http://ProjectMalmo.microsoft.com}ContinuousMovementCommand
class ContinuousMovementCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Commands for smooth movement. Some examples:
      
        "{{{move 0.5}}}" - start moving forward at 50% of the normal walking speed (-ve = backward, +ve = forward).
        
        "{{{strafe -1}}}" - start moving left at 100% of the normal walking speed (-ve = left, +ve = right).
        
        "{{{pitch 0.1}}}" - start tilting the agent's head down at 10% of the maximum speed (-ve = up, +ve = down). The maximum speed is set by {{{turnSpeedDegs}}} in {{{ContinuousMovementCommands}}}. 
        
        "{{{turn 0.1}}}" - start turning right at 10% of the maximum speed (-ve = anti-clockwise/left, +ve = clockwise/right). The maximum speed is set by {{{turnSpeedDegs}}} in {{{ContinuousMovementCommands}}}. 
        
        "{{{jump 1}}}" - start jumping (1 = start, 0 = stop).
        
        "{{{crouch 1}}}" - start crouching (1 = start, 0 = stop).
        
        "{{{attack 1}}}" - start attacking (1 = start, 0 = stop). The 'attack' command is for destroying blocks and attacking mobs.
        
        "{{{use 1}}}" - start 'use'ing (1 = start, 0 = stop). The 'use' command is for placing blocks and for other things too.        
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContinuousMovementCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1219, 2)
    _Documentation = '\n        Commands for smooth movement. Some examples:\n      \n        "{{{move 0.5}}}" - start moving forward at 50% of the normal walking speed (-ve = backward, +ve = forward).\n        \n        "{{{strafe -1}}}" - start moving left at 100% of the normal walking speed (-ve = left, +ve = right).\n        \n        "{{{pitch 0.1}}}" - start tilting the agent\'s head down at 10% of the maximum speed (-ve = up, +ve = down). The maximum speed is set by {{{turnSpeedDegs}}} in {{{ContinuousMovementCommands}}}. \n        \n        "{{{turn 0.1}}}" - start turning right at 10% of the maximum speed (-ve = anti-clockwise/left, +ve = clockwise/right). The maximum speed is set by {{{turnSpeedDegs}}} in {{{ContinuousMovementCommands}}}. \n        \n        "{{{jump 1}}}" - start jumping (1 = start, 0 = stop).\n        \n        "{{{crouch 1}}}" - start crouching (1 = start, 0 = stop).\n        \n        "{{{attack 1}}}" - start attacking (1 = start, 0 = stop). The \'attack\' command is for destroying blocks and attacking mobs.\n        \n        "{{{use 1}}}" - start \'use\'ing (1 = start, 0 = stop). The \'use\' command is for placing blocks and for other things too.        \n      '
ContinuousMovementCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ContinuousMovementCommand, enum_prefix=None)
ContinuousMovementCommand.move = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='move', tag='move')
ContinuousMovementCommand.strafe = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='strafe', tag='strafe')
ContinuousMovementCommand.pitch = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='pitch', tag='pitch')
ContinuousMovementCommand.turn = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='turn', tag='turn')
ContinuousMovementCommand.jump = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='jump', tag='jump')
ContinuousMovementCommand.crouch = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='crouch', tag='crouch')
ContinuousMovementCommand.attack = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='attack', tag='attack')
ContinuousMovementCommand.use = ContinuousMovementCommand._CF_enumeration.addEnumeration(unicode_value='use', tag='use')
ContinuousMovementCommand._InitializeFacetMap(ContinuousMovementCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ContinuousMovementCommand', ContinuousMovementCommand)
_module_typeBindings.ContinuousMovementCommand = ContinuousMovementCommand

# Atomic simple type: {http://ProjectMalmo.microsoft.com}AbsoluteMovementCommand
class AbsoluteMovementCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Commands to set position and orientation directly. Some examples:
      
        "{{{tp 23.5 1 -34.5}}}" - teleport the agent to the absolute position x y z (space delimited).
        
        "{{{tpx 230}}}" - set the agent's x coordinate, without altering the y and z.
        
        "{{{tpy 103.2}}}" - set the agent's y coordinate, without altering the x and z.
        
        "{{{tpz -32.5}}}" - set the agent's z coordinate, without altering the x and y.
        
        "{{{setYaw 30}}}" - set the agent's body orientation to be 30 degrees clockwise from south.
        
        "{{{setPitch 20}}}" - set the agent's body orientation to be 20 degrees down from horizontal.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1253, 2)
    _Documentation = '\n        Commands to set position and orientation directly. Some examples:\n      \n        "{{{tp 23.5 1 -34.5}}}" - teleport the agent to the absolute position x y z (space delimited).\n        \n        "{{{tpx 230}}}" - set the agent\'s x coordinate, without altering the y and z.\n        \n        "{{{tpy 103.2}}}" - set the agent\'s y coordinate, without altering the x and z.\n        \n        "{{{tpz -32.5}}}" - set the agent\'s z coordinate, without altering the x and y.\n        \n        "{{{setYaw 30}}}" - set the agent\'s body orientation to be 30 degrees clockwise from south.\n        \n        "{{{setPitch 20}}}" - set the agent\'s body orientation to be 20 degrees down from horizontal.\n      '
AbsoluteMovementCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AbsoluteMovementCommand, enum_prefix=None)
AbsoluteMovementCommand.tpx = AbsoluteMovementCommand._CF_enumeration.addEnumeration(unicode_value='tpx', tag='tpx')
AbsoluteMovementCommand.tpy = AbsoluteMovementCommand._CF_enumeration.addEnumeration(unicode_value='tpy', tag='tpy')
AbsoluteMovementCommand.tpz = AbsoluteMovementCommand._CF_enumeration.addEnumeration(unicode_value='tpz', tag='tpz')
AbsoluteMovementCommand.tp = AbsoluteMovementCommand._CF_enumeration.addEnumeration(unicode_value='tp', tag='tp')
AbsoluteMovementCommand.setYaw = AbsoluteMovementCommand._CF_enumeration.addEnumeration(unicode_value='setYaw', tag='setYaw')
AbsoluteMovementCommand.setPitch = AbsoluteMovementCommand._CF_enumeration.addEnumeration(unicode_value='setPitch', tag='setPitch')
AbsoluteMovementCommand._InitializeFacetMap(AbsoluteMovementCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AbsoluteMovementCommand', AbsoluteMovementCommand)
_module_typeBindings.AbsoluteMovementCommand = AbsoluteMovementCommand

# Atomic simple type: {http://ProjectMalmo.microsoft.com}DiscreteMovementCommand
class DiscreteMovementCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Commands for moving and turning in discrete increments. Some examples:
      
        "{{{move 1}}}" - move the agent one block forwards (1 = forwards, -1 = backwards).

        "{{{jumpmove 1}}}" - move the agent one block up and forwards (1 = forwards, -1 = backwards).

        "{{{strafe 1}}}" - move the agent one block sideways (1 = right, -1 = left).
        
        "{{{jumpstrafe 1}}}" - move the agent one block up and sideways (1 = right, -1 = left).

        "{{{turn 1}}}" - rotate the agent 90 degrees right (1 = right, -1 = left).
        
        "{{{movenorth 1}}}" - move the agent one block north.
        
        "{{{moveeast 1}}}" - move the agent one block east.
        
        "{{{movesouth 1}}}" - move the agent one block south.
        
        "{{{movewest 1}}}" - move the agent one block west.
        
        "{{{jumpnorth 1}}}" - move the agent one block up and north.
        
        "{{{jumpeast 1}}}" - move the agent one block up and east.
        
        "{{{jumpsouth 1}}}" - move the agent one block up and south.
        
        "{{{jumpwest 1}}}" - move the agent one block up and west.

        "{{{jump 1}}}" - move the agent one block up.
        
        "{{{look 1}}}" - look down by 45 degrees (-ve = up, +ve = down).
        
        "{{{attack 1}}}" - destroy the block that has focus.
        
        "{{{use 1}}}" - place the held block item on the block face that has focus.
        
        "{{{jumpuse}}}" - simultaneously jump and place the held block on the block face that has focus.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1281, 2)
    _Documentation = '\n        Commands for moving and turning in discrete increments. Some examples:\n      \n        "{{{move 1}}}" - move the agent one block forwards (1 = forwards, -1 = backwards).\n\n        "{{{jumpmove 1}}}" - move the agent one block up and forwards (1 = forwards, -1 = backwards).\n\n        "{{{strafe 1}}}" - move the agent one block sideways (1 = right, -1 = left).\n        \n        "{{{jumpstrafe 1}}}" - move the agent one block up and sideways (1 = right, -1 = left).\n\n        "{{{turn 1}}}" - rotate the agent 90 degrees right (1 = right, -1 = left).\n        \n        "{{{movenorth 1}}}" - move the agent one block north.\n        \n        "{{{moveeast 1}}}" - move the agent one block east.\n        \n        "{{{movesouth 1}}}" - move the agent one block south.\n        \n        "{{{movewest 1}}}" - move the agent one block west.\n        \n        "{{{jumpnorth 1}}}" - move the agent one block up and north.\n        \n        "{{{jumpeast 1}}}" - move the agent one block up and east.\n        \n        "{{{jumpsouth 1}}}" - move the agent one block up and south.\n        \n        "{{{jumpwest 1}}}" - move the agent one block up and west.\n\n        "{{{jump 1}}}" - move the agent one block up.\n        \n        "{{{look 1}}}" - look down by 45 degrees (-ve = up, +ve = down).\n        \n        "{{{attack 1}}}" - destroy the block that has focus.\n        \n        "{{{use 1}}}" - place the held block item on the block face that has focus.\n        \n        "{{{jumpuse}}}" - simultaneously jump and place the held block on the block face that has focus.\n      '
DiscreteMovementCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DiscreteMovementCommand, enum_prefix=None)
DiscreteMovementCommand.move = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='move', tag='move')
DiscreteMovementCommand.jumpmove = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jumpmove', tag='jumpmove')
DiscreteMovementCommand.strafe = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='strafe', tag='strafe')
DiscreteMovementCommand.jumpstrafe = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jumpstrafe', tag='jumpstrafe')
DiscreteMovementCommand.turn = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='turn', tag='turn')
DiscreteMovementCommand.movenorth = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='movenorth', tag='movenorth')
DiscreteMovementCommand.moveeast = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='moveeast', tag='moveeast')
DiscreteMovementCommand.movesouth = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='movesouth', tag='movesouth')
DiscreteMovementCommand.movewest = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='movewest', tag='movewest')
DiscreteMovementCommand.jumpnorth = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jumpnorth', tag='jumpnorth')
DiscreteMovementCommand.jumpeast = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jumpeast', tag='jumpeast')
DiscreteMovementCommand.jumpsouth = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jumpsouth', tag='jumpsouth')
DiscreteMovementCommand.jumpwest = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jumpwest', tag='jumpwest')
DiscreteMovementCommand.jump = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jump', tag='jump')
DiscreteMovementCommand.look = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='look', tag='look')
DiscreteMovementCommand.attack = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='attack', tag='attack')
DiscreteMovementCommand.use = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='use', tag='use')
DiscreteMovementCommand.jumpuse = DiscreteMovementCommand._CF_enumeration.addEnumeration(unicode_value='jumpuse', tag='jumpuse')
DiscreteMovementCommand._InitializeFacetMap(DiscreteMovementCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DiscreteMovementCommand', DiscreteMovementCommand)
_module_typeBindings.DiscreteMovementCommand = DiscreteMovementCommand

# Atomic simple type: {http://ProjectMalmo.microsoft.com}InventoryCommand
class InventoryCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Commands for changing the contents of the inventory and hotbar.
        
        To move items around in the inventory you can use {{{swapInventoryItems}}}. For example, to swap
        the contents of slots 13 and 14, issue this command:
      
        "{{{swapInventoryItems 13 14}}}"
        
        Note that inventory slots are numbered from 0 to 39.
        0-8 are the hotbar slots (which correspond to the hotbar commands hotbar.1-hotbar.9 - _note the offset_)
        9-35 are the rest of the inventory (visible when you press 'E' in the game)
        36-39 are the armour slots.
        
        So to move an item out of the hotbar, say:
        
        "{{{swapInventoryItems 3 30}}}"

        Other commands:
        
        "{{{combineInventoryItems x y}}}" - will attempt to combine the stacks in slots x and y, and leave the results in slot x. Eg if there are ten blocks of granite in slot 4, and 57 blocks of granite in slot 12, then {{{combineInventoryItems 4 12}}} will result in 64 (the max) blocks of granite in slot 4, and the remainder in slot 12. If the slots can't be combined (they are different types, or the first slot is full) then nothing will happen.

        "{{{discardCurrentItem}}}" - discards the currently held item.
        
        To select a hotbar slot:
        
        "{{{hotbar.1 1}}}" 
        "{{{hotbar.1 0}}}" 
        
        Send both commands to select hotbar slot 1 as the currently-held tool. This affects the attack and use commands 
        - e.g. if the agent does 'use' while holding a block item it will place the block into the world.
        
        If the agent is currently pointed at a container item - eg a chest, shulker box, dispenser etc - then the swap and combine commands
        can be extended to allow access to the container's inventory. To do this, simply prefix the slot number with the name of the foreign
        inventory (which will be provided by the {{{ObservationFromFullInventory}}} observations).
        
        So to move an item out of the hotbar and into slot 0 of a chest, say:
        
        "{{{swapInventoryItems 3 Chest:0}}}"
        
        Note that this is the same as writing 

        "{{{swapInventoryItems Inventory:3 Chest:0}}}"

        "Inventory" is the name of the player's inventory.
        
        See inventory_test.py for a working example of this.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InventoryCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1345, 2)
    _Documentation = '\n        Commands for changing the contents of the inventory and hotbar.\n        \n        To move items around in the inventory you can use {{{swapInventoryItems}}}. For example, to swap\n        the contents of slots 13 and 14, issue this command:\n      \n        "{{{swapInventoryItems 13 14}}}"\n        \n        Note that inventory slots are numbered from 0 to 39.\n        0-8 are the hotbar slots (which correspond to the hotbar commands hotbar.1-hotbar.9 - _note the offset_)\n        9-35 are the rest of the inventory (visible when you press \'E\' in the game)\n        36-39 are the armour slots.\n        \n        So to move an item out of the hotbar, say:\n        \n        "{{{swapInventoryItems 3 30}}}"\n\n        Other commands:\n        \n        "{{{combineInventoryItems x y}}}" - will attempt to combine the stacks in slots x and y, and leave the results in slot x. Eg if there are ten blocks of granite in slot 4, and 57 blocks of granite in slot 12, then {{{combineInventoryItems 4 12}}} will result in 64 (the max) blocks of granite in slot 4, and the remainder in slot 12. If the slots can\'t be combined (they are different types, or the first slot is full) then nothing will happen.\n\n        "{{{discardCurrentItem}}}" - discards the currently held item.\n        \n        To select a hotbar slot:\n        \n        "{{{hotbar.1 1}}}" \n        "{{{hotbar.1 0}}}" \n        \n        Send both commands to select hotbar slot 1 as the currently-held tool. This affects the attack and use commands \n        - e.g. if the agent does \'use\' while holding a block item it will place the block into the world.\n        \n        If the agent is currently pointed at a container item - eg a chest, shulker box, dispenser etc - then the swap and combine commands\n        can be extended to allow access to the container\'s inventory. To do this, simply prefix the slot number with the name of the foreign\n        inventory (which will be provided by the {{{ObservationFromFullInventory}}} observations).\n        \n        So to move an item out of the hotbar and into slot 0 of a chest, say:\n        \n        "{{{swapInventoryItems 3 Chest:0}}}"\n        \n        Note that this is the same as writing \n\n        "{{{swapInventoryItems Inventory:3 Chest:0}}}"\n\n        "Inventory" is the name of the player\'s inventory.\n        \n        See inventory_test.py for a working example of this.\n      '
InventoryCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=InventoryCommand, enum_prefix=None)
InventoryCommand.swapInventoryItems = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='swapInventoryItems', tag='swapInventoryItems')
InventoryCommand.combineInventoryItems = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='combineInventoryItems', tag='combineInventoryItems')
InventoryCommand.discardCurrentItem = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='discardCurrentItem', tag='discardCurrentItem')
InventoryCommand.hotbar_1 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.1', tag='hotbar_1')
InventoryCommand.hotbar_2 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.2', tag='hotbar_2')
InventoryCommand.hotbar_3 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.3', tag='hotbar_3')
InventoryCommand.hotbar_4 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.4', tag='hotbar_4')
InventoryCommand.hotbar_5 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.5', tag='hotbar_5')
InventoryCommand.hotbar_6 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.6', tag='hotbar_6')
InventoryCommand.hotbar_7 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.7', tag='hotbar_7')
InventoryCommand.hotbar_8 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.8', tag='hotbar_8')
InventoryCommand.hotbar_9 = InventoryCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.9', tag='hotbar_9')
InventoryCommand._InitializeFacetMap(InventoryCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'InventoryCommand', InventoryCommand)
_module_typeBindings.InventoryCommand = InventoryCommand

# Atomic simple type: {http://ProjectMalmo.microsoft.com}SimpleCraftCommand
class SimpleCraftCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        A command for simple crafting:

        Will look up all recipes that produce the requested object, and attempt each one in turn until one is successful or all have failed. This ignores all issues like requiring a crafting table / brewing stand etc, and the shape of the recipe (which items go in which slots on the crafting table). It will simply check to see whether the player has the necessary raw ingredients, and, if so, will remove them from the player's inventory and add the result of the recipe.

        For basic objects, use the ItemTypes or BlockTypes found in Types.xsd. Eg:

        "{{{craft diamond_pickaxe}}}" will remove three diamonds and two sticks from the player's inventory, and add a diamond pickaxe.

        For more control over colours, types etc, add a Variation or Colour. Eg:

        "{{{craft carpet PINK}}}"
        
        etc.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1411, 2)
    _Documentation = '\n        A command for simple crafting:\n\n        Will look up all recipes that produce the requested object, and attempt each one in turn until one is successful or all have failed. This ignores all issues like requiring a crafting table / brewing stand etc, and the shape of the recipe (which items go in which slots on the crafting table). It will simply check to see whether the player has the necessary raw ingredients, and, if so, will remove them from the player\'s inventory and add the result of the recipe.\n\n        For basic objects, use the ItemTypes or BlockTypes found in Types.xsd. Eg:\n\n        "{{{craft diamond_pickaxe}}}" will remove three diamonds and two sticks from the player\'s inventory, and add a diamond pickaxe.\n\n        For more control over colours, types etc, add a Variation or Colour. Eg:\n\n        "{{{craft carpet PINK}}}"\n        \n        etc.\n      '
SimpleCraftCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SimpleCraftCommand, enum_prefix=None)
SimpleCraftCommand.craft = SimpleCraftCommand._CF_enumeration.addEnumeration(unicode_value='craft', tag='craft')
SimpleCraftCommand._InitializeFacetMap(SimpleCraftCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SimpleCraftCommand', SimpleCraftCommand)
_module_typeBindings.SimpleCraftCommand = SimpleCraftCommand

# Atomic simple type: {http://ProjectMalmo.microsoft.com}ChatCommand
class ChatCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        A command for broadcasting text messages to the other players. An example:
      
        "{{{chat I have found diamonds!}}}" - broadcasts the string "{{{I have found diamonds!}}}".
        
        Chat messages from other players can be observed using {{{ObservationFromChat}}}.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChatCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1434, 2)
    _Documentation = '\n        A command for broadcasting text messages to the other players. An example:\n      \n        "{{{chat I have found diamonds!}}}" - broadcasts the string "{{{I have found diamonds!}}}".\n        \n        Chat messages from other players can be observed using {{{ObservationFromChat}}}.\n      '
ChatCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ChatCommand, enum_prefix=None)
ChatCommand.chat = ChatCommand._CF_enumeration.addEnumeration(unicode_value='chat', tag='chat')
ChatCommand._InitializeFacetMap(ChatCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ChatCommand', ChatCommand)
_module_typeBindings.ChatCommand = ChatCommand

# Atomic simple type: {http://ProjectMalmo.microsoft.com}MissionQuitCommand
class MissionQuitCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        A command for ending the mission, example:

        "{{{quit}}}" - terminates the current mission.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1449, 2)
    _Documentation = '\n        A command for ending the mission, example:\n\n        "{{{quit}}}" - terminates the current mission.\n      '
MissionQuitCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MissionQuitCommand, enum_prefix=None)
MissionQuitCommand.quit = MissionQuitCommand._CF_enumeration.addEnumeration(unicode_value='quit', tag='quit')
MissionQuitCommand._InitializeFacetMap(MissionQuitCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MissionQuitCommand', MissionQuitCommand)
_module_typeBindings.MissionQuitCommand = MissionQuitCommand

# Atomic simple type: {http://ProjectMalmo.microsoft.com}HumanLevelCommand
class HumanLevelCommand (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Commands for controlling Minecraft at the level of keyboard and mouse events.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HumanLevelCommand')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1462, 2)
    _Documentation = '\n        Commands for controlling Minecraft at the level of keyboard and mouse events.\n      '
HumanLevelCommand._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HumanLevelCommand, enum_prefix=None)
HumanLevelCommand.forward = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='forward', tag='forward')
HumanLevelCommand.left = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
HumanLevelCommand.back = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='back', tag='back')
HumanLevelCommand.right = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
HumanLevelCommand.jump = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='jump', tag='jump')
HumanLevelCommand.sneak = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='sneak', tag='sneak')
HumanLevelCommand.sprint = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='sprint', tag='sprint')
HumanLevelCommand.inventory = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='inventory', tag='inventory')
HumanLevelCommand.swapHands = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='swapHands', tag='swapHands')
HumanLevelCommand.drop = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='drop', tag='drop')
HumanLevelCommand.use = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='use', tag='use')
HumanLevelCommand.attack = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='attack', tag='attack')
HumanLevelCommand.pickItem = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='pickItem', tag='pickItem')
HumanLevelCommand.hotbar_1 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.1', tag='hotbar_1')
HumanLevelCommand.hotbar_2 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.2', tag='hotbar_2')
HumanLevelCommand.hotbar_3 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.3', tag='hotbar_3')
HumanLevelCommand.hotbar_4 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.4', tag='hotbar_4')
HumanLevelCommand.hotbar_5 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.5', tag='hotbar_5')
HumanLevelCommand.hotbar_6 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.6', tag='hotbar_6')
HumanLevelCommand.hotbar_7 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.7', tag='hotbar_7')
HumanLevelCommand.hotbar_8 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.8', tag='hotbar_8')
HumanLevelCommand.hotbar_9 = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='hotbar.9', tag='hotbar_9')
HumanLevelCommand.moveMouse = HumanLevelCommand._CF_enumeration.addEnumeration(unicode_value='moveMouse', tag='moveMouse')
HumanLevelCommand._InitializeFacetMap(HumanLevelCommand._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HumanLevelCommand', HumanLevelCommand)
_module_typeBindings.HumanLevelCommand = HumanLevelCommand

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1513, 6)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.deny_list = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='deny-list', tag='deny_list')
STD_ANON_18.allow_list = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='allow-list', tag='allow_list')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)
_module_typeBindings.STD_ANON_18 = STD_ANON_18

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.integer):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1712, 8)
    _Documentation = None
STD_ANON_19._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=STD_ANON_19, value=pyxb.binding.datatypes.integer(0))
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_minInclusive)
_module_typeBindings.STD_ANON_19 = STD_ANON_19

# Atomic simple type: {http://ProjectMalmo.microsoft.com}Dimension
class Dimension (pyxb.binding.datatypes.int):

    """
        For multi-dimensional rewards, specifies the dimension to allocate this reward to. All rewards on this dimension will be summed.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Dimension')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2046, 2)
    _Documentation = '\n        For multi-dimensional rewards, specifies the dimension to allocate this reward to. All rewards on this dimension will be summed.\n      '
Dimension._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=Dimension, value=pyxb.binding.datatypes.int(0))
Dimension._InitializeFacetMap(Dimension._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'Dimension', Dimension)
_module_typeBindings.Dimension = Dimension

# Atomic simple type: {http://ProjectMalmo.microsoft.com}Behaviour
class Behaviour (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Behaviour')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2139, 2)
    _Documentation = None
Behaviour._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Behaviour, enum_prefix=None)
Behaviour.onceOnly = Behaviour._CF_enumeration.addEnumeration(unicode_value='onceOnly', tag='onceOnly')
Behaviour.oncePerBlock = Behaviour._CF_enumeration.addEnumeration(unicode_value='oncePerBlock', tag='oncePerBlock')
Behaviour.oncePerTimeSpan = Behaviour._CF_enumeration.addEnumeration(unicode_value='oncePerTimeSpan', tag='oncePerTimeSpan')
Behaviour.constant = Behaviour._CF_enumeration.addEnumeration(unicode_value='constant', tag='constant')
Behaviour._InitializeFacetMap(Behaviour._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Behaviour', Behaviour)
_module_typeBindings.Behaviour = Behaviour

# Atomic simple type: {http://ProjectMalmo.microsoft.com}RewardDensityForBuildAndBreak
class RewardDensityForBuildAndBreak (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Reward type for {{{RewardForStructureCopying}}}:
        
        - {{{PER_BLOCK}}} - reward will be given whenever a block is placed/destroyed in the goal volume, and will be determined by {{{RewardScale}}}. An additional reward of {{{RewardForCompletion}}} will be added the *first* time the copy is correctly completed.
        
        - {{{MISSION_END}}} - no reward will be given until the mission ends. Reward will be scaled from 0-1, where 0 means "no blocks correct" and 1 means "all blocks correct", and then multipled by {{{RewardScale}}}.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RewardDensityForBuildAndBreak')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2252, 2)
    _Documentation = '\n        Reward type for {{{RewardForStructureCopying}}}:\n        \n        - {{{PER_BLOCK}}} - reward will be given whenever a block is placed/destroyed in the goal volume, and will be determined by {{{RewardScale}}}. An additional reward of {{{RewardForCompletion}}} will be added the *first* time the copy is correctly completed.\n        \n        - {{{MISSION_END}}} - no reward will be given until the mission ends. Reward will be scaled from 0-1, where 0 means "no blocks correct" and 1 means "all blocks correct", and then multipled by {{{RewardScale}}}.\n      '
RewardDensityForBuildAndBreak._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RewardDensityForBuildAndBreak, enum_prefix=None)
RewardDensityForBuildAndBreak.PER_BLOCK = RewardDensityForBuildAndBreak._CF_enumeration.addEnumeration(unicode_value='PER_BLOCK', tag='PER_BLOCK')
RewardDensityForBuildAndBreak.MISSION_END = RewardDensityForBuildAndBreak._CF_enumeration.addEnumeration(unicode_value='MISSION_END', tag='MISSION_END')
RewardDensityForBuildAndBreak._InitializeFacetMap(RewardDensityForBuildAndBreak._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RewardDensityForBuildAndBreak', RewardDensityForBuildAndBreak)
_module_typeBindings.RewardDensityForBuildAndBreak = RewardDensityForBuildAndBreak

# Atomic simple type: {http://ProjectMalmo.microsoft.com}RewardDensityForTimeTaken
class RewardDensityForTimeTaken (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Reward type for {{{RewardForTimeTaken}}}:

        - {{{PER_TICK}}} - only the reward delta will be sent as a reward, at each tick. The initial reward will be ignored.

        - {{{PER_TICK_ACCUMULATED}}} - the initial reward will be adjusted by the delta at each tick, and the current total sent. Eg: if the initial reward is 1000 and the delta is -1, the agent will receive rewards of 1000,999,998,997 for the first four ticks.

        - {{{MISSION_END}}} - the initial reward will be adjusted by the delta at each tick, but no reward will be sent until the mission ends. Eg: if the initial reward is 1000, the delta is -1, and the mission runs for 800 ticks, then final reward sent will be 200.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RewardDensityForTimeTaken')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2336, 2)
    _Documentation = '\n        Reward type for {{{RewardForTimeTaken}}}:\n\n        - {{{PER_TICK}}} - only the reward delta will be sent as a reward, at each tick. The initial reward will be ignored.\n\n        - {{{PER_TICK_ACCUMULATED}}} - the initial reward will be adjusted by the delta at each tick, and the current total sent. Eg: if the initial reward is 1000 and the delta is -1, the agent will receive rewards of 1000,999,998,997 for the first four ticks.\n\n        - {{{MISSION_END}}} - the initial reward will be adjusted by the delta at each tick, but no reward will be sent until the mission ends. Eg: if the initial reward is 1000, the delta is -1, and the mission runs for 800 ticks, then final reward sent will be 200.\n      '
RewardDensityForTimeTaken._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RewardDensityForTimeTaken, enum_prefix=None)
RewardDensityForTimeTaken.PER_TICK = RewardDensityForTimeTaken._CF_enumeration.addEnumeration(unicode_value='PER_TICK', tag='PER_TICK')
RewardDensityForTimeTaken.PER_TICK_ACCUMULATED = RewardDensityForTimeTaken._CF_enumeration.addEnumeration(unicode_value='PER_TICK_ACCUMULATED', tag='PER_TICK_ACCUMULATED')
RewardDensityForTimeTaken.MISSION_END = RewardDensityForTimeTaken._CF_enumeration.addEnumeration(unicode_value='MISSION_END', tag='MISSION_END')
RewardDensityForTimeTaken._InitializeFacetMap(RewardDensityForTimeTaken._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RewardDensityForTimeTaken', RewardDensityForTimeTaken)
_module_typeBindings.RewardDensityForTimeTaken = RewardDensityForTimeTaken

# Atomic simple type: {http://ProjectMalmo.microsoft.com}Colour
class Colour (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        The sixteen block colours allowed in the Minecraft world: {{{WHITE}}}, {{{ORANGE}}}, {{{MAGENTA}}}, {{{LIGHT_BLUE}}}, {{{YELLOW}}}, {{{LIME}}}, {{{PINK}}},
        {{{GRAY}}}, {{{SILVER}}}, {{{CYAN}}}, {{{PURPLE}}}, {{{BLUE}}}, {{{BROWN}}}, {{{GREEN}}}, {{{RED}}}, {{{BLACK}}}.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Colour')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 10, 0)
    _Documentation = '\n        The sixteen block colours allowed in the Minecraft world: {{{WHITE}}}, {{{ORANGE}}}, {{{MAGENTA}}}, {{{LIGHT_BLUE}}}, {{{YELLOW}}}, {{{LIME}}}, {{{PINK}}},\n        {{{GRAY}}}, {{{SILVER}}}, {{{CYAN}}}, {{{PURPLE}}}, {{{BLUE}}}, {{{BROWN}}}, {{{GREEN}}}, {{{RED}}}, {{{BLACK}}}.\n      '
Colour._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Colour, enum_prefix=None)
Colour.WHITE = Colour._CF_enumeration.addEnumeration(unicode_value='WHITE', tag='WHITE')
Colour.ORANGE = Colour._CF_enumeration.addEnumeration(unicode_value='ORANGE', tag='ORANGE')
Colour.MAGENTA = Colour._CF_enumeration.addEnumeration(unicode_value='MAGENTA', tag='MAGENTA')
Colour.LIGHT_BLUE = Colour._CF_enumeration.addEnumeration(unicode_value='LIGHT_BLUE', tag='LIGHT_BLUE')
Colour.YELLOW = Colour._CF_enumeration.addEnumeration(unicode_value='YELLOW', tag='YELLOW')
Colour.LIME = Colour._CF_enumeration.addEnumeration(unicode_value='LIME', tag='LIME')
Colour.PINK = Colour._CF_enumeration.addEnumeration(unicode_value='PINK', tag='PINK')
Colour.GRAY = Colour._CF_enumeration.addEnumeration(unicode_value='GRAY', tag='GRAY')
Colour.SILVER = Colour._CF_enumeration.addEnumeration(unicode_value='SILVER', tag='SILVER')
Colour.CYAN = Colour._CF_enumeration.addEnumeration(unicode_value='CYAN', tag='CYAN')
Colour.PURPLE = Colour._CF_enumeration.addEnumeration(unicode_value='PURPLE', tag='PURPLE')
Colour.BLUE = Colour._CF_enumeration.addEnumeration(unicode_value='BLUE', tag='BLUE')
Colour.BROWN = Colour._CF_enumeration.addEnumeration(unicode_value='BROWN', tag='BROWN')
Colour.GREEN = Colour._CF_enumeration.addEnumeration(unicode_value='GREEN', tag='GREEN')
Colour.RED = Colour._CF_enumeration.addEnumeration(unicode_value='RED', tag='RED')
Colour.BLACK = Colour._CF_enumeration.addEnumeration(unicode_value='BLACK', tag='BLACK')
Colour._InitializeFacetMap(Colour._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Colour', Colour)
_module_typeBindings.Colour = Colour

# Atomic simple type: {http://ProjectMalmo.microsoft.com}Facing
class Facing (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Enum to specify block faces: {{{DOWN}}}, {{{UP}}}, {{{NORTH}}}, {{{SOUTH}}}, {{{WEST}}}, {{{EAST}}}, {{{UP_X}}}, {{{DOWN_X}}}, {{{UP_Z}}}, {{{DOWN_Z}}}.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Facing')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 37, 0)
    _Documentation = '\n        Enum to specify block faces: {{{DOWN}}}, {{{UP}}}, {{{NORTH}}}, {{{SOUTH}}}, {{{WEST}}}, {{{EAST}}}, {{{UP_X}}}, {{{DOWN_X}}}, {{{UP_Z}}}, {{{DOWN_Z}}}.\n      '
Facing._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Facing, enum_prefix=None)
Facing.DOWN = Facing._CF_enumeration.addEnumeration(unicode_value='DOWN', tag='DOWN')
Facing.UP = Facing._CF_enumeration.addEnumeration(unicode_value='UP', tag='UP')
Facing.NORTH = Facing._CF_enumeration.addEnumeration(unicode_value='NORTH', tag='NORTH')
Facing.SOUTH = Facing._CF_enumeration.addEnumeration(unicode_value='SOUTH', tag='SOUTH')
Facing.WEST = Facing._CF_enumeration.addEnumeration(unicode_value='WEST', tag='WEST')
Facing.EAST = Facing._CF_enumeration.addEnumeration(unicode_value='EAST', tag='EAST')
Facing.UP_X = Facing._CF_enumeration.addEnumeration(unicode_value='UP_X', tag='UP_X')
Facing.DOWN_X = Facing._CF_enumeration.addEnumeration(unicode_value='DOWN_X', tag='DOWN_X')
Facing.UP_Z = Facing._CF_enumeration.addEnumeration(unicode_value='UP_Z', tag='UP_Z')
Facing.DOWN_Z = Facing._CF_enumeration.addEnumeration(unicode_value='DOWN_Z', tag='DOWN_Z')
Facing._InitializeFacetMap(Facing._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Facing', Facing)
_module_typeBindings.Facing = Facing

# Atomic simple type: {http://ProjectMalmo.microsoft.com}ItemType
class ItemType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        The types of item allowed in the Minecraft world.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ItemType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 57, 0)
    _Documentation = '\n        The types of item allowed in the Minecraft world.\n      '
ItemType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ItemType, enum_prefix=None)
ItemType.iron_shovel = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_shovel', tag='iron_shovel')
ItemType.iron_pickaxe = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_pickaxe', tag='iron_pickaxe')
ItemType.iron_axe = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_axe', tag='iron_axe')
ItemType.flint_and_steel = ItemType._CF_enumeration.addEnumeration(unicode_value='flint_and_steel', tag='flint_and_steel')
ItemType.apple = ItemType._CF_enumeration.addEnumeration(unicode_value='apple', tag='apple')
ItemType.bow = ItemType._CF_enumeration.addEnumeration(unicode_value='bow', tag='bow')
ItemType.arrow = ItemType._CF_enumeration.addEnumeration(unicode_value='arrow', tag='arrow')
ItemType.coal = ItemType._CF_enumeration.addEnumeration(unicode_value='coal', tag='coal')
ItemType.diamond = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond', tag='diamond')
ItemType.iron_ingot = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_ingot', tag='iron_ingot')
ItemType.gold_ingot = ItemType._CF_enumeration.addEnumeration(unicode_value='gold_ingot', tag='gold_ingot')
ItemType.iron_sword = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_sword', tag='iron_sword')
ItemType.wooden_sword = ItemType._CF_enumeration.addEnumeration(unicode_value='wooden_sword', tag='wooden_sword')
ItemType.wooden_shovel = ItemType._CF_enumeration.addEnumeration(unicode_value='wooden_shovel', tag='wooden_shovel')
ItemType.wooden_pickaxe = ItemType._CF_enumeration.addEnumeration(unicode_value='wooden_pickaxe', tag='wooden_pickaxe')
ItemType.wooden_axe = ItemType._CF_enumeration.addEnumeration(unicode_value='wooden_axe', tag='wooden_axe')
ItemType.stone_sword = ItemType._CF_enumeration.addEnumeration(unicode_value='stone_sword', tag='stone_sword')
ItemType.stone_shovel = ItemType._CF_enumeration.addEnumeration(unicode_value='stone_shovel', tag='stone_shovel')
ItemType.stone_pickaxe = ItemType._CF_enumeration.addEnumeration(unicode_value='stone_pickaxe', tag='stone_pickaxe')
ItemType.stone_axe = ItemType._CF_enumeration.addEnumeration(unicode_value='stone_axe', tag='stone_axe')
ItemType.diamond_sword = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_sword', tag='diamond_sword')
ItemType.diamond_shovel = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_shovel', tag='diamond_shovel')
ItemType.diamond_pickaxe = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_pickaxe', tag='diamond_pickaxe')
ItemType.diamond_axe = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_axe', tag='diamond_axe')
ItemType.stick = ItemType._CF_enumeration.addEnumeration(unicode_value='stick', tag='stick')
ItemType.bowl = ItemType._CF_enumeration.addEnumeration(unicode_value='bowl', tag='bowl')
ItemType.mushroom_stew = ItemType._CF_enumeration.addEnumeration(unicode_value='mushroom_stew', tag='mushroom_stew')
ItemType.golden_sword = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_sword', tag='golden_sword')
ItemType.golden_shovel = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_shovel', tag='golden_shovel')
ItemType.golden_pickaxe = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_pickaxe', tag='golden_pickaxe')
ItemType.golden_axe = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_axe', tag='golden_axe')
ItemType.string = ItemType._CF_enumeration.addEnumeration(unicode_value='string', tag='string')
ItemType.feather = ItemType._CF_enumeration.addEnumeration(unicode_value='feather', tag='feather')
ItemType.gunpowder = ItemType._CF_enumeration.addEnumeration(unicode_value='gunpowder', tag='gunpowder')
ItemType.wooden_hoe = ItemType._CF_enumeration.addEnumeration(unicode_value='wooden_hoe', tag='wooden_hoe')
ItemType.stone_hoe = ItemType._CF_enumeration.addEnumeration(unicode_value='stone_hoe', tag='stone_hoe')
ItemType.iron_hoe = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_hoe', tag='iron_hoe')
ItemType.diamond_hoe = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_hoe', tag='diamond_hoe')
ItemType.golden_hoe = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_hoe', tag='golden_hoe')
ItemType.wheat_seeds = ItemType._CF_enumeration.addEnumeration(unicode_value='wheat_seeds', tag='wheat_seeds')
ItemType.wheat = ItemType._CF_enumeration.addEnumeration(unicode_value='wheat', tag='wheat')
ItemType.bread = ItemType._CF_enumeration.addEnumeration(unicode_value='bread', tag='bread')
ItemType.leather_helmet = ItemType._CF_enumeration.addEnumeration(unicode_value='leather_helmet', tag='leather_helmet')
ItemType.leather_chestplate = ItemType._CF_enumeration.addEnumeration(unicode_value='leather_chestplate', tag='leather_chestplate')
ItemType.leather_leggings = ItemType._CF_enumeration.addEnumeration(unicode_value='leather_leggings', tag='leather_leggings')
ItemType.leather_boots = ItemType._CF_enumeration.addEnumeration(unicode_value='leather_boots', tag='leather_boots')
ItemType.chainmail_helmet = ItemType._CF_enumeration.addEnumeration(unicode_value='chainmail_helmet', tag='chainmail_helmet')
ItemType.chainmail_chestplate = ItemType._CF_enumeration.addEnumeration(unicode_value='chainmail_chestplate', tag='chainmail_chestplate')
ItemType.chainmail_leggings = ItemType._CF_enumeration.addEnumeration(unicode_value='chainmail_leggings', tag='chainmail_leggings')
ItemType.chainmail_boots = ItemType._CF_enumeration.addEnumeration(unicode_value='chainmail_boots', tag='chainmail_boots')
ItemType.iron_helmet = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_helmet', tag='iron_helmet')
ItemType.iron_chestplate = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_chestplate', tag='iron_chestplate')
ItemType.iron_leggings = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_leggings', tag='iron_leggings')
ItemType.iron_boots = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_boots', tag='iron_boots')
ItemType.diamond_helmet = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_helmet', tag='diamond_helmet')
ItemType.diamond_chestplate = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_chestplate', tag='diamond_chestplate')
ItemType.diamond_leggings = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_leggings', tag='diamond_leggings')
ItemType.diamond_boots = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_boots', tag='diamond_boots')
ItemType.golden_helmet = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_helmet', tag='golden_helmet')
ItemType.golden_chestplate = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_chestplate', tag='golden_chestplate')
ItemType.golden_leggings = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_leggings', tag='golden_leggings')
ItemType.golden_boots = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_boots', tag='golden_boots')
ItemType.flint = ItemType._CF_enumeration.addEnumeration(unicode_value='flint', tag='flint')
ItemType.porkchop = ItemType._CF_enumeration.addEnumeration(unicode_value='porkchop', tag='porkchop')
ItemType.cooked_porkchop = ItemType._CF_enumeration.addEnumeration(unicode_value='cooked_porkchop', tag='cooked_porkchop')
ItemType.painting = ItemType._CF_enumeration.addEnumeration(unicode_value='painting', tag='painting')
ItemType.golden_apple = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_apple', tag='golden_apple')
ItemType.sign = ItemType._CF_enumeration.addEnumeration(unicode_value='sign', tag='sign')
ItemType.wooden_door = ItemType._CF_enumeration.addEnumeration(unicode_value='wooden_door', tag='wooden_door')
ItemType.bucket = ItemType._CF_enumeration.addEnumeration(unicode_value='bucket', tag='bucket')
ItemType.bucket_ = ItemType._CF_enumeration.addEnumeration(unicode_value='bucket', tag='bucket_')
ItemType.water_bucket = ItemType._CF_enumeration.addEnumeration(unicode_value='water_bucket', tag='water_bucket')
ItemType.lava_bucket = ItemType._CF_enumeration.addEnumeration(unicode_value='lava_bucket', tag='lava_bucket')
ItemType.minecart = ItemType._CF_enumeration.addEnumeration(unicode_value='minecart', tag='minecart')
ItemType.saddle = ItemType._CF_enumeration.addEnumeration(unicode_value='saddle', tag='saddle')
ItemType.iron_door = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_door', tag='iron_door')
ItemType.redstone = ItemType._CF_enumeration.addEnumeration(unicode_value='redstone', tag='redstone')
ItemType.snowball = ItemType._CF_enumeration.addEnumeration(unicode_value='snowball', tag='snowball')
ItemType.boat = ItemType._CF_enumeration.addEnumeration(unicode_value='boat', tag='boat')
ItemType.leather = ItemType._CF_enumeration.addEnumeration(unicode_value='leather', tag='leather')
ItemType.milk_bucket = ItemType._CF_enumeration.addEnumeration(unicode_value='milk_bucket', tag='milk_bucket')
ItemType.brick = ItemType._CF_enumeration.addEnumeration(unicode_value='brick', tag='brick')
ItemType.clay_ball = ItemType._CF_enumeration.addEnumeration(unicode_value='clay_ball', tag='clay_ball')
ItemType.reeds = ItemType._CF_enumeration.addEnumeration(unicode_value='reeds', tag='reeds')
ItemType.paper = ItemType._CF_enumeration.addEnumeration(unicode_value='paper', tag='paper')
ItemType.book = ItemType._CF_enumeration.addEnumeration(unicode_value='book', tag='book')
ItemType.slime_ball = ItemType._CF_enumeration.addEnumeration(unicode_value='slime_ball', tag='slime_ball')
ItemType.chest_minecart = ItemType._CF_enumeration.addEnumeration(unicode_value='chest_minecart', tag='chest_minecart')
ItemType.furnace_minecart = ItemType._CF_enumeration.addEnumeration(unicode_value='furnace_minecart', tag='furnace_minecart')
ItemType.egg = ItemType._CF_enumeration.addEnumeration(unicode_value='egg', tag='egg')
ItemType.compass = ItemType._CF_enumeration.addEnumeration(unicode_value='compass', tag='compass')
ItemType.fishing_rod = ItemType._CF_enumeration.addEnumeration(unicode_value='fishing_rod', tag='fishing_rod')
ItemType.clock = ItemType._CF_enumeration.addEnumeration(unicode_value='clock', tag='clock')
ItemType.glowstone_dust = ItemType._CF_enumeration.addEnumeration(unicode_value='glowstone_dust', tag='glowstone_dust')
ItemType.fish = ItemType._CF_enumeration.addEnumeration(unicode_value='fish', tag='fish')
ItemType.cooked_fish = ItemType._CF_enumeration.addEnumeration(unicode_value='cooked_fish', tag='cooked_fish')
ItemType.dye = ItemType._CF_enumeration.addEnumeration(unicode_value='dye', tag='dye')
ItemType.bone = ItemType._CF_enumeration.addEnumeration(unicode_value='bone', tag='bone')
ItemType.sugar = ItemType._CF_enumeration.addEnumeration(unicode_value='sugar', tag='sugar')
ItemType.cake = ItemType._CF_enumeration.addEnumeration(unicode_value='cake', tag='cake')
ItemType.bed = ItemType._CF_enumeration.addEnumeration(unicode_value='bed', tag='bed')
ItemType.repeater = ItemType._CF_enumeration.addEnumeration(unicode_value='repeater', tag='repeater')
ItemType.cookie = ItemType._CF_enumeration.addEnumeration(unicode_value='cookie', tag='cookie')
ItemType.filled_map = ItemType._CF_enumeration.addEnumeration(unicode_value='filled_map', tag='filled_map')
ItemType.shears = ItemType._CF_enumeration.addEnumeration(unicode_value='shears', tag='shears')
ItemType.melon = ItemType._CF_enumeration.addEnumeration(unicode_value='melon', tag='melon')
ItemType.pumpkin_seeds = ItemType._CF_enumeration.addEnumeration(unicode_value='pumpkin_seeds', tag='pumpkin_seeds')
ItemType.melon_seeds = ItemType._CF_enumeration.addEnumeration(unicode_value='melon_seeds', tag='melon_seeds')
ItemType.beef = ItemType._CF_enumeration.addEnumeration(unicode_value='beef', tag='beef')
ItemType.cooked_beef = ItemType._CF_enumeration.addEnumeration(unicode_value='cooked_beef', tag='cooked_beef')
ItemType.chicken = ItemType._CF_enumeration.addEnumeration(unicode_value='chicken', tag='chicken')
ItemType.cooked_chicken = ItemType._CF_enumeration.addEnumeration(unicode_value='cooked_chicken', tag='cooked_chicken')
ItemType.rotten_flesh = ItemType._CF_enumeration.addEnumeration(unicode_value='rotten_flesh', tag='rotten_flesh')
ItemType.ender_pearl = ItemType._CF_enumeration.addEnumeration(unicode_value='ender_pearl', tag='ender_pearl')
ItemType.blaze_rod = ItemType._CF_enumeration.addEnumeration(unicode_value='blaze_rod', tag='blaze_rod')
ItemType.ghast_tear = ItemType._CF_enumeration.addEnumeration(unicode_value='ghast_tear', tag='ghast_tear')
ItemType.gold_nugget = ItemType._CF_enumeration.addEnumeration(unicode_value='gold_nugget', tag='gold_nugget')
ItemType.nether_wart = ItemType._CF_enumeration.addEnumeration(unicode_value='nether_wart', tag='nether_wart')
ItemType.potion = ItemType._CF_enumeration.addEnumeration(unicode_value='potion', tag='potion')
ItemType.glass_bottle = ItemType._CF_enumeration.addEnumeration(unicode_value='glass_bottle', tag='glass_bottle')
ItemType.spider_eye = ItemType._CF_enumeration.addEnumeration(unicode_value='spider_eye', tag='spider_eye')
ItemType.fermented_spider_eye = ItemType._CF_enumeration.addEnumeration(unicode_value='fermented_spider_eye', tag='fermented_spider_eye')
ItemType.blaze_powder = ItemType._CF_enumeration.addEnumeration(unicode_value='blaze_powder', tag='blaze_powder')
ItemType.magma_cream = ItemType._CF_enumeration.addEnumeration(unicode_value='magma_cream', tag='magma_cream')
ItemType.brewing_stand = ItemType._CF_enumeration.addEnumeration(unicode_value='brewing_stand', tag='brewing_stand')
ItemType.cauldron = ItemType._CF_enumeration.addEnumeration(unicode_value='cauldron', tag='cauldron')
ItemType.ender_eye = ItemType._CF_enumeration.addEnumeration(unicode_value='ender_eye', tag='ender_eye')
ItemType.speckled_melon = ItemType._CF_enumeration.addEnumeration(unicode_value='speckled_melon', tag='speckled_melon')
ItemType.spawn_egg = ItemType._CF_enumeration.addEnumeration(unicode_value='spawn_egg', tag='spawn_egg')
ItemType.experience_bottle = ItemType._CF_enumeration.addEnumeration(unicode_value='experience_bottle', tag='experience_bottle')
ItemType.fire_charge = ItemType._CF_enumeration.addEnumeration(unicode_value='fire_charge', tag='fire_charge')
ItemType.writable_book = ItemType._CF_enumeration.addEnumeration(unicode_value='writable_book', tag='writable_book')
ItemType.written_book = ItemType._CF_enumeration.addEnumeration(unicode_value='written_book', tag='written_book')
ItemType.emerald = ItemType._CF_enumeration.addEnumeration(unicode_value='emerald', tag='emerald')
ItemType.item_frame = ItemType._CF_enumeration.addEnumeration(unicode_value='item_frame', tag='item_frame')
ItemType.flower_pot = ItemType._CF_enumeration.addEnumeration(unicode_value='flower_pot', tag='flower_pot')
ItemType.carrot = ItemType._CF_enumeration.addEnumeration(unicode_value='carrot', tag='carrot')
ItemType.potato = ItemType._CF_enumeration.addEnumeration(unicode_value='potato', tag='potato')
ItemType.baked_potato = ItemType._CF_enumeration.addEnumeration(unicode_value='baked_potato', tag='baked_potato')
ItemType.poisonous_potato = ItemType._CF_enumeration.addEnumeration(unicode_value='poisonous_potato', tag='poisonous_potato')
ItemType.map = ItemType._CF_enumeration.addEnumeration(unicode_value='map', tag='map')
ItemType.golden_carrot = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_carrot', tag='golden_carrot')
ItemType.skull = ItemType._CF_enumeration.addEnumeration(unicode_value='skull', tag='skull')
ItemType.carrot_on_a_stick = ItemType._CF_enumeration.addEnumeration(unicode_value='carrot_on_a_stick', tag='carrot_on_a_stick')
ItemType.nether_star = ItemType._CF_enumeration.addEnumeration(unicode_value='nether_star', tag='nether_star')
ItemType.pumpkin_pie = ItemType._CF_enumeration.addEnumeration(unicode_value='pumpkin_pie', tag='pumpkin_pie')
ItemType.fireworks = ItemType._CF_enumeration.addEnumeration(unicode_value='fireworks', tag='fireworks')
ItemType.firework_charge = ItemType._CF_enumeration.addEnumeration(unicode_value='firework_charge', tag='firework_charge')
ItemType.enchanted_book = ItemType._CF_enumeration.addEnumeration(unicode_value='enchanted_book', tag='enchanted_book')
ItemType.comparator = ItemType._CF_enumeration.addEnumeration(unicode_value='comparator', tag='comparator')
ItemType.netherbrick = ItemType._CF_enumeration.addEnumeration(unicode_value='netherbrick', tag='netherbrick')
ItemType.quartz = ItemType._CF_enumeration.addEnumeration(unicode_value='quartz', tag='quartz')
ItemType.tnt_minecart = ItemType._CF_enumeration.addEnumeration(unicode_value='tnt_minecart', tag='tnt_minecart')
ItemType.hopper_minecart = ItemType._CF_enumeration.addEnumeration(unicode_value='hopper_minecart', tag='hopper_minecart')
ItemType.prismarine_shard = ItemType._CF_enumeration.addEnumeration(unicode_value='prismarine_shard', tag='prismarine_shard')
ItemType.prismarine_crystals = ItemType._CF_enumeration.addEnumeration(unicode_value='prismarine_crystals', tag='prismarine_crystals')
ItemType.rabbit = ItemType._CF_enumeration.addEnumeration(unicode_value='rabbit', tag='rabbit')
ItemType.cooked_rabbit = ItemType._CF_enumeration.addEnumeration(unicode_value='cooked_rabbit', tag='cooked_rabbit')
ItemType.rabbit_stew = ItemType._CF_enumeration.addEnumeration(unicode_value='rabbit_stew', tag='rabbit_stew')
ItemType.rabbit_foot = ItemType._CF_enumeration.addEnumeration(unicode_value='rabbit_foot', tag='rabbit_foot')
ItemType.rabbit_hide = ItemType._CF_enumeration.addEnumeration(unicode_value='rabbit_hide', tag='rabbit_hide')
ItemType.armor_stand = ItemType._CF_enumeration.addEnumeration(unicode_value='armor_stand', tag='armor_stand')
ItemType.iron_horse_armor = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_horse_armor', tag='iron_horse_armor')
ItemType.golden_horse_armor = ItemType._CF_enumeration.addEnumeration(unicode_value='golden_horse_armor', tag='golden_horse_armor')
ItemType.diamond_horse_armor = ItemType._CF_enumeration.addEnumeration(unicode_value='diamond_horse_armor', tag='diamond_horse_armor')
ItemType.lead = ItemType._CF_enumeration.addEnumeration(unicode_value='lead', tag='lead')
ItemType.name_tag = ItemType._CF_enumeration.addEnumeration(unicode_value='name_tag', tag='name_tag')
ItemType.command_block_minecart = ItemType._CF_enumeration.addEnumeration(unicode_value='command_block_minecart', tag='command_block_minecart')
ItemType.mutton = ItemType._CF_enumeration.addEnumeration(unicode_value='mutton', tag='mutton')
ItemType.cooked_mutton = ItemType._CF_enumeration.addEnumeration(unicode_value='cooked_mutton', tag='cooked_mutton')
ItemType.banner = ItemType._CF_enumeration.addEnumeration(unicode_value='banner', tag='banner')
ItemType.spruce_door = ItemType._CF_enumeration.addEnumeration(unicode_value='spruce_door', tag='spruce_door')
ItemType.birch_door = ItemType._CF_enumeration.addEnumeration(unicode_value='birch_door', tag='birch_door')
ItemType.jungle_door = ItemType._CF_enumeration.addEnumeration(unicode_value='jungle_door', tag='jungle_door')
ItemType.acacia_door = ItemType._CF_enumeration.addEnumeration(unicode_value='acacia_door', tag='acacia_door')
ItemType.dark_oak_door = ItemType._CF_enumeration.addEnumeration(unicode_value='dark_oak_door', tag='dark_oak_door')
ItemType.chorus_fruit = ItemType._CF_enumeration.addEnumeration(unicode_value='chorus_fruit', tag='chorus_fruit')
ItemType.chorus_fruit_popped = ItemType._CF_enumeration.addEnumeration(unicode_value='chorus_fruit_popped', tag='chorus_fruit_popped')
ItemType.beetroot = ItemType._CF_enumeration.addEnumeration(unicode_value='beetroot', tag='beetroot')
ItemType.beetroot_seeds = ItemType._CF_enumeration.addEnumeration(unicode_value='beetroot_seeds', tag='beetroot_seeds')
ItemType.beetroot_soup = ItemType._CF_enumeration.addEnumeration(unicode_value='beetroot_soup', tag='beetroot_soup')
ItemType.dragon_breath = ItemType._CF_enumeration.addEnumeration(unicode_value='dragon_breath', tag='dragon_breath')
ItemType.splash_potion = ItemType._CF_enumeration.addEnumeration(unicode_value='splash_potion', tag='splash_potion')
ItemType.spectral_arrow = ItemType._CF_enumeration.addEnumeration(unicode_value='spectral_arrow', tag='spectral_arrow')
ItemType.tipped_arrow = ItemType._CF_enumeration.addEnumeration(unicode_value='tipped_arrow', tag='tipped_arrow')
ItemType.lingering_potion = ItemType._CF_enumeration.addEnumeration(unicode_value='lingering_potion', tag='lingering_potion')
ItemType.shield = ItemType._CF_enumeration.addEnumeration(unicode_value='shield', tag='shield')
ItemType.elytra = ItemType._CF_enumeration.addEnumeration(unicode_value='elytra', tag='elytra')
ItemType.spruce_boat = ItemType._CF_enumeration.addEnumeration(unicode_value='spruce_boat', tag='spruce_boat')
ItemType.birch_boat = ItemType._CF_enumeration.addEnumeration(unicode_value='birch_boat', tag='birch_boat')
ItemType.jungle_boat = ItemType._CF_enumeration.addEnumeration(unicode_value='jungle_boat', tag='jungle_boat')
ItemType.acacia_boat = ItemType._CF_enumeration.addEnumeration(unicode_value='acacia_boat', tag='acacia_boat')
ItemType.dark_oak_boat = ItemType._CF_enumeration.addEnumeration(unicode_value='dark_oak_boat', tag='dark_oak_boat')
ItemType.totem_of_undying = ItemType._CF_enumeration.addEnumeration(unicode_value='totem_of_undying', tag='totem_of_undying')
ItemType.shulker_shell = ItemType._CF_enumeration.addEnumeration(unicode_value='shulker_shell', tag='shulker_shell')
ItemType.iron_nugget = ItemType._CF_enumeration.addEnumeration(unicode_value='iron_nugget', tag='iron_nugget')
ItemType.record_13 = ItemType._CF_enumeration.addEnumeration(unicode_value='record_13', tag='record_13')
ItemType.record_cat = ItemType._CF_enumeration.addEnumeration(unicode_value='record_cat', tag='record_cat')
ItemType.record_blocks = ItemType._CF_enumeration.addEnumeration(unicode_value='record_blocks', tag='record_blocks')
ItemType.record_chirp = ItemType._CF_enumeration.addEnumeration(unicode_value='record_chirp', tag='record_chirp')
ItemType.record_far = ItemType._CF_enumeration.addEnumeration(unicode_value='record_far', tag='record_far')
ItemType.record_mall = ItemType._CF_enumeration.addEnumeration(unicode_value='record_mall', tag='record_mall')
ItemType.record_mellohi = ItemType._CF_enumeration.addEnumeration(unicode_value='record_mellohi', tag='record_mellohi')
ItemType.record_stal = ItemType._CF_enumeration.addEnumeration(unicode_value='record_stal', tag='record_stal')
ItemType.record_strad = ItemType._CF_enumeration.addEnumeration(unicode_value='record_strad', tag='record_strad')
ItemType.record_ward = ItemType._CF_enumeration.addEnumeration(unicode_value='record_ward', tag='record_ward')
ItemType.record_11 = ItemType._CF_enumeration.addEnumeration(unicode_value='record_11', tag='record_11')
ItemType.record_wait = ItemType._CF_enumeration.addEnumeration(unicode_value='record_wait', tag='record_wait')
ItemType._InitializeFacetMap(ItemType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ItemType', ItemType)
_module_typeBindings.ItemType = ItemType

# Atomic simple type: {http://ProjectMalmo.microsoft.com}BlockType
class BlockType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        The block types allowed in the Minecraft world.
       """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 275, 0)
    _Documentation = '\n        The block types allowed in the Minecraft world.\n       '
BlockType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=BlockType, enum_prefix=None)
BlockType.air = BlockType._CF_enumeration.addEnumeration(unicode_value='air', tag='air')
BlockType.stone = BlockType._CF_enumeration.addEnumeration(unicode_value='stone', tag='stone')
BlockType.grass = BlockType._CF_enumeration.addEnumeration(unicode_value='grass', tag='grass')
BlockType.dirt = BlockType._CF_enumeration.addEnumeration(unicode_value='dirt', tag='dirt')
BlockType.cobblestone = BlockType._CF_enumeration.addEnumeration(unicode_value='cobblestone', tag='cobblestone')
BlockType.planks = BlockType._CF_enumeration.addEnumeration(unicode_value='planks', tag='planks')
BlockType.sapling = BlockType._CF_enumeration.addEnumeration(unicode_value='sapling', tag='sapling')
BlockType.bedrock = BlockType._CF_enumeration.addEnumeration(unicode_value='bedrock', tag='bedrock')
BlockType.flowing_water = BlockType._CF_enumeration.addEnumeration(unicode_value='flowing_water', tag='flowing_water')
BlockType.water = BlockType._CF_enumeration.addEnumeration(unicode_value='water', tag='water')
BlockType.flowing_lava = BlockType._CF_enumeration.addEnumeration(unicode_value='flowing_lava', tag='flowing_lava')
BlockType.lava = BlockType._CF_enumeration.addEnumeration(unicode_value='lava', tag='lava')
BlockType.sand = BlockType._CF_enumeration.addEnumeration(unicode_value='sand', tag='sand')
BlockType.gravel = BlockType._CF_enumeration.addEnumeration(unicode_value='gravel', tag='gravel')
BlockType.gold_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='gold_ore', tag='gold_ore')
BlockType.iron_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='iron_ore', tag='iron_ore')
BlockType.coal_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='coal_ore', tag='coal_ore')
BlockType.log = BlockType._CF_enumeration.addEnumeration(unicode_value='log', tag='log')
BlockType.leaves = BlockType._CF_enumeration.addEnumeration(unicode_value='leaves', tag='leaves')
BlockType.sponge = BlockType._CF_enumeration.addEnumeration(unicode_value='sponge', tag='sponge')
BlockType.glass = BlockType._CF_enumeration.addEnumeration(unicode_value='glass', tag='glass')
BlockType.lapis_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='lapis_ore', tag='lapis_ore')
BlockType.lapis_block = BlockType._CF_enumeration.addEnumeration(unicode_value='lapis_block', tag='lapis_block')
BlockType.dispenser = BlockType._CF_enumeration.addEnumeration(unicode_value='dispenser', tag='dispenser')
BlockType.sandstone = BlockType._CF_enumeration.addEnumeration(unicode_value='sandstone', tag='sandstone')
BlockType.noteblock = BlockType._CF_enumeration.addEnumeration(unicode_value='noteblock', tag='noteblock')
BlockType.bed = BlockType._CF_enumeration.addEnumeration(unicode_value='bed', tag='bed')
BlockType.golden_rail = BlockType._CF_enumeration.addEnumeration(unicode_value='golden_rail', tag='golden_rail')
BlockType.detector_rail = BlockType._CF_enumeration.addEnumeration(unicode_value='detector_rail', tag='detector_rail')
BlockType.sticky_piston = BlockType._CF_enumeration.addEnumeration(unicode_value='sticky_piston', tag='sticky_piston')
BlockType.web = BlockType._CF_enumeration.addEnumeration(unicode_value='web', tag='web')
BlockType.tallgrass = BlockType._CF_enumeration.addEnumeration(unicode_value='tallgrass', tag='tallgrass')
BlockType.deadbush = BlockType._CF_enumeration.addEnumeration(unicode_value='deadbush', tag='deadbush')
BlockType.piston = BlockType._CF_enumeration.addEnumeration(unicode_value='piston', tag='piston')
BlockType.piston_head = BlockType._CF_enumeration.addEnumeration(unicode_value='piston_head', tag='piston_head')
BlockType.wool = BlockType._CF_enumeration.addEnumeration(unicode_value='wool', tag='wool')
BlockType.piston_extension = BlockType._CF_enumeration.addEnumeration(unicode_value='piston_extension', tag='piston_extension')
BlockType.yellow_flower = BlockType._CF_enumeration.addEnumeration(unicode_value='yellow_flower', tag='yellow_flower')
BlockType.red_flower = BlockType._CF_enumeration.addEnumeration(unicode_value='red_flower', tag='red_flower')
BlockType.brown_mushroom = BlockType._CF_enumeration.addEnumeration(unicode_value='brown_mushroom', tag='brown_mushroom')
BlockType.red_mushroom = BlockType._CF_enumeration.addEnumeration(unicode_value='red_mushroom', tag='red_mushroom')
BlockType.gold_block = BlockType._CF_enumeration.addEnumeration(unicode_value='gold_block', tag='gold_block')
BlockType.iron_block = BlockType._CF_enumeration.addEnumeration(unicode_value='iron_block', tag='iron_block')
BlockType.double_stone_slab = BlockType._CF_enumeration.addEnumeration(unicode_value='double_stone_slab', tag='double_stone_slab')
BlockType.stone_slab = BlockType._CF_enumeration.addEnumeration(unicode_value='stone_slab', tag='stone_slab')
BlockType.brick_block = BlockType._CF_enumeration.addEnumeration(unicode_value='brick_block', tag='brick_block')
BlockType.tnt = BlockType._CF_enumeration.addEnumeration(unicode_value='tnt', tag='tnt')
BlockType.bookshelf = BlockType._CF_enumeration.addEnumeration(unicode_value='bookshelf', tag='bookshelf')
BlockType.mossy_cobblestone = BlockType._CF_enumeration.addEnumeration(unicode_value='mossy_cobblestone', tag='mossy_cobblestone')
BlockType.obsidian = BlockType._CF_enumeration.addEnumeration(unicode_value='obsidian', tag='obsidian')
BlockType.torch = BlockType._CF_enumeration.addEnumeration(unicode_value='torch', tag='torch')
BlockType.fire = BlockType._CF_enumeration.addEnumeration(unicode_value='fire', tag='fire')
BlockType.mob_spawner = BlockType._CF_enumeration.addEnumeration(unicode_value='mob_spawner', tag='mob_spawner')
BlockType.oak_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='oak_stairs', tag='oak_stairs')
BlockType.chest = BlockType._CF_enumeration.addEnumeration(unicode_value='chest', tag='chest')
BlockType.redstone_wire = BlockType._CF_enumeration.addEnumeration(unicode_value='redstone_wire', tag='redstone_wire')
BlockType.diamond_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='diamond_ore', tag='diamond_ore')
BlockType.diamond_block = BlockType._CF_enumeration.addEnumeration(unicode_value='diamond_block', tag='diamond_block')
BlockType.crafting_table = BlockType._CF_enumeration.addEnumeration(unicode_value='crafting_table', tag='crafting_table')
BlockType.wheat = BlockType._CF_enumeration.addEnumeration(unicode_value='wheat', tag='wheat')
BlockType.farmland = BlockType._CF_enumeration.addEnumeration(unicode_value='farmland', tag='farmland')
BlockType.furnace = BlockType._CF_enumeration.addEnumeration(unicode_value='furnace', tag='furnace')
BlockType.lit_furnace = BlockType._CF_enumeration.addEnumeration(unicode_value='lit_furnace', tag='lit_furnace')
BlockType.standing_sign = BlockType._CF_enumeration.addEnumeration(unicode_value='standing_sign', tag='standing_sign')
BlockType.wooden_door = BlockType._CF_enumeration.addEnumeration(unicode_value='wooden_door', tag='wooden_door')
BlockType.ladder = BlockType._CF_enumeration.addEnumeration(unicode_value='ladder', tag='ladder')
BlockType.rail = BlockType._CF_enumeration.addEnumeration(unicode_value='rail', tag='rail')
BlockType.stone_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='stone_stairs', tag='stone_stairs')
BlockType.wall_sign = BlockType._CF_enumeration.addEnumeration(unicode_value='wall_sign', tag='wall_sign')
BlockType.lever = BlockType._CF_enumeration.addEnumeration(unicode_value='lever', tag='lever')
BlockType.stone_pressure_plate = BlockType._CF_enumeration.addEnumeration(unicode_value='stone_pressure_plate', tag='stone_pressure_plate')
BlockType.iron_door = BlockType._CF_enumeration.addEnumeration(unicode_value='iron_door', tag='iron_door')
BlockType.wooden_pressure_plate = BlockType._CF_enumeration.addEnumeration(unicode_value='wooden_pressure_plate', tag='wooden_pressure_plate')
BlockType.redstone_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='redstone_ore', tag='redstone_ore')
BlockType.lit_redstone_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='lit_redstone_ore', tag='lit_redstone_ore')
BlockType.unlit_redstone_torch = BlockType._CF_enumeration.addEnumeration(unicode_value='unlit_redstone_torch', tag='unlit_redstone_torch')
BlockType.redstone_torch = BlockType._CF_enumeration.addEnumeration(unicode_value='redstone_torch', tag='redstone_torch')
BlockType.stone_button = BlockType._CF_enumeration.addEnumeration(unicode_value='stone_button', tag='stone_button')
BlockType.snow_layer = BlockType._CF_enumeration.addEnumeration(unicode_value='snow_layer', tag='snow_layer')
BlockType.ice = BlockType._CF_enumeration.addEnumeration(unicode_value='ice', tag='ice')
BlockType.snow = BlockType._CF_enumeration.addEnumeration(unicode_value='snow', tag='snow')
BlockType.cactus = BlockType._CF_enumeration.addEnumeration(unicode_value='cactus', tag='cactus')
BlockType.clay = BlockType._CF_enumeration.addEnumeration(unicode_value='clay', tag='clay')
BlockType.reeds = BlockType._CF_enumeration.addEnumeration(unicode_value='reeds', tag='reeds')
BlockType.jukebox = BlockType._CF_enumeration.addEnumeration(unicode_value='jukebox', tag='jukebox')
BlockType.fence = BlockType._CF_enumeration.addEnumeration(unicode_value='fence', tag='fence')
BlockType.pumpkin = BlockType._CF_enumeration.addEnumeration(unicode_value='pumpkin', tag='pumpkin')
BlockType.netherrack = BlockType._CF_enumeration.addEnumeration(unicode_value='netherrack', tag='netherrack')
BlockType.soul_sand = BlockType._CF_enumeration.addEnumeration(unicode_value='soul_sand', tag='soul_sand')
BlockType.glowstone = BlockType._CF_enumeration.addEnumeration(unicode_value='glowstone', tag='glowstone')
BlockType.portal = BlockType._CF_enumeration.addEnumeration(unicode_value='portal', tag='portal')
BlockType.lit_pumpkin = BlockType._CF_enumeration.addEnumeration(unicode_value='lit_pumpkin', tag='lit_pumpkin')
BlockType.cake = BlockType._CF_enumeration.addEnumeration(unicode_value='cake', tag='cake')
BlockType.unpowered_repeater = BlockType._CF_enumeration.addEnumeration(unicode_value='unpowered_repeater', tag='unpowered_repeater')
BlockType.powered_repeater = BlockType._CF_enumeration.addEnumeration(unicode_value='powered_repeater', tag='powered_repeater')
BlockType.stained_glass = BlockType._CF_enumeration.addEnumeration(unicode_value='stained_glass', tag='stained_glass')
BlockType.trapdoor = BlockType._CF_enumeration.addEnumeration(unicode_value='trapdoor', tag='trapdoor')
BlockType.monster_egg = BlockType._CF_enumeration.addEnumeration(unicode_value='monster_egg', tag='monster_egg')
BlockType.stonebrick = BlockType._CF_enumeration.addEnumeration(unicode_value='stonebrick', tag='stonebrick')
BlockType.brown_mushroom_block = BlockType._CF_enumeration.addEnumeration(unicode_value='brown_mushroom_block', tag='brown_mushroom_block')
BlockType.red_mushroom_block = BlockType._CF_enumeration.addEnumeration(unicode_value='red_mushroom_block', tag='red_mushroom_block')
BlockType.iron_bars = BlockType._CF_enumeration.addEnumeration(unicode_value='iron_bars', tag='iron_bars')
BlockType.glass_pane = BlockType._CF_enumeration.addEnumeration(unicode_value='glass_pane', tag='glass_pane')
BlockType.melon_block = BlockType._CF_enumeration.addEnumeration(unicode_value='melon_block', tag='melon_block')
BlockType.pumpkin_stem = BlockType._CF_enumeration.addEnumeration(unicode_value='pumpkin_stem', tag='pumpkin_stem')
BlockType.melon_stem = BlockType._CF_enumeration.addEnumeration(unicode_value='melon_stem', tag='melon_stem')
BlockType.vine = BlockType._CF_enumeration.addEnumeration(unicode_value='vine', tag='vine')
BlockType.fence_gate = BlockType._CF_enumeration.addEnumeration(unicode_value='fence_gate', tag='fence_gate')
BlockType.brick_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='brick_stairs', tag='brick_stairs')
BlockType.stone_brick_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='stone_brick_stairs', tag='stone_brick_stairs')
BlockType.mycelium = BlockType._CF_enumeration.addEnumeration(unicode_value='mycelium', tag='mycelium')
BlockType.waterlily = BlockType._CF_enumeration.addEnumeration(unicode_value='waterlily', tag='waterlily')
BlockType.nether_brick = BlockType._CF_enumeration.addEnumeration(unicode_value='nether_brick', tag='nether_brick')
BlockType.nether_brick_fence = BlockType._CF_enumeration.addEnumeration(unicode_value='nether_brick_fence', tag='nether_brick_fence')
BlockType.nether_brick_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='nether_brick_stairs', tag='nether_brick_stairs')
BlockType.nether_wart = BlockType._CF_enumeration.addEnumeration(unicode_value='nether_wart', tag='nether_wart')
BlockType.enchanting_table = BlockType._CF_enumeration.addEnumeration(unicode_value='enchanting_table', tag='enchanting_table')
BlockType.brewing_stand = BlockType._CF_enumeration.addEnumeration(unicode_value='brewing_stand', tag='brewing_stand')
BlockType.cauldron = BlockType._CF_enumeration.addEnumeration(unicode_value='cauldron', tag='cauldron')
BlockType.end_portal = BlockType._CF_enumeration.addEnumeration(unicode_value='end_portal', tag='end_portal')
BlockType.end_portal_frame = BlockType._CF_enumeration.addEnumeration(unicode_value='end_portal_frame', tag='end_portal_frame')
BlockType.end_stone = BlockType._CF_enumeration.addEnumeration(unicode_value='end_stone', tag='end_stone')
BlockType.dragon_egg = BlockType._CF_enumeration.addEnumeration(unicode_value='dragon_egg', tag='dragon_egg')
BlockType.redstone_lamp = BlockType._CF_enumeration.addEnumeration(unicode_value='redstone_lamp', tag='redstone_lamp')
BlockType.lit_redstone_lamp = BlockType._CF_enumeration.addEnumeration(unicode_value='lit_redstone_lamp', tag='lit_redstone_lamp')
BlockType.double_wooden_slab = BlockType._CF_enumeration.addEnumeration(unicode_value='double_wooden_slab', tag='double_wooden_slab')
BlockType.wooden_slab = BlockType._CF_enumeration.addEnumeration(unicode_value='wooden_slab', tag='wooden_slab')
BlockType.cocoa = BlockType._CF_enumeration.addEnumeration(unicode_value='cocoa', tag='cocoa')
BlockType.sandstone_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='sandstone_stairs', tag='sandstone_stairs')
BlockType.emerald_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='emerald_ore', tag='emerald_ore')
BlockType.ender_chest = BlockType._CF_enumeration.addEnumeration(unicode_value='ender_chest', tag='ender_chest')
BlockType.tripwire_hook = BlockType._CF_enumeration.addEnumeration(unicode_value='tripwire_hook', tag='tripwire_hook')
BlockType.tripwire = BlockType._CF_enumeration.addEnumeration(unicode_value='tripwire', tag='tripwire')
BlockType.emerald_block = BlockType._CF_enumeration.addEnumeration(unicode_value='emerald_block', tag='emerald_block')
BlockType.spruce_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='spruce_stairs', tag='spruce_stairs')
BlockType.birch_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='birch_stairs', tag='birch_stairs')
BlockType.jungle_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='jungle_stairs', tag='jungle_stairs')
BlockType.command_block = BlockType._CF_enumeration.addEnumeration(unicode_value='command_block', tag='command_block')
BlockType.beacon = BlockType._CF_enumeration.addEnumeration(unicode_value='beacon', tag='beacon')
BlockType.cobblestone_wall = BlockType._CF_enumeration.addEnumeration(unicode_value='cobblestone_wall', tag='cobblestone_wall')
BlockType.flower_pot = BlockType._CF_enumeration.addEnumeration(unicode_value='flower_pot', tag='flower_pot')
BlockType.carrots = BlockType._CF_enumeration.addEnumeration(unicode_value='carrots', tag='carrots')
BlockType.potatoes = BlockType._CF_enumeration.addEnumeration(unicode_value='potatoes', tag='potatoes')
BlockType.wooden_button = BlockType._CF_enumeration.addEnumeration(unicode_value='wooden_button', tag='wooden_button')
BlockType.skull = BlockType._CF_enumeration.addEnumeration(unicode_value='skull', tag='skull')
BlockType.anvil = BlockType._CF_enumeration.addEnumeration(unicode_value='anvil', tag='anvil')
BlockType.trapped_chest = BlockType._CF_enumeration.addEnumeration(unicode_value='trapped_chest', tag='trapped_chest')
BlockType.light_weighted_pressure_plate = BlockType._CF_enumeration.addEnumeration(unicode_value='light_weighted_pressure_plate', tag='light_weighted_pressure_plate')
BlockType.heavy_weighted_pressure_plate = BlockType._CF_enumeration.addEnumeration(unicode_value='heavy_weighted_pressure_plate', tag='heavy_weighted_pressure_plate')
BlockType.unpowered_comparator = BlockType._CF_enumeration.addEnumeration(unicode_value='unpowered_comparator', tag='unpowered_comparator')
BlockType.powered_comparator = BlockType._CF_enumeration.addEnumeration(unicode_value='powered_comparator', tag='powered_comparator')
BlockType.daylight_detector = BlockType._CF_enumeration.addEnumeration(unicode_value='daylight_detector', tag='daylight_detector')
BlockType.redstone_block = BlockType._CF_enumeration.addEnumeration(unicode_value='redstone_block', tag='redstone_block')
BlockType.quartz_ore = BlockType._CF_enumeration.addEnumeration(unicode_value='quartz_ore', tag='quartz_ore')
BlockType.hopper = BlockType._CF_enumeration.addEnumeration(unicode_value='hopper', tag='hopper')
BlockType.quartz_block = BlockType._CF_enumeration.addEnumeration(unicode_value='quartz_block', tag='quartz_block')
BlockType.quartz_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='quartz_stairs', tag='quartz_stairs')
BlockType.activator_rail = BlockType._CF_enumeration.addEnumeration(unicode_value='activator_rail', tag='activator_rail')
BlockType.dropper = BlockType._CF_enumeration.addEnumeration(unicode_value='dropper', tag='dropper')
BlockType.stained_hardened_clay = BlockType._CF_enumeration.addEnumeration(unicode_value='stained_hardened_clay', tag='stained_hardened_clay')
BlockType.stained_glass_pane = BlockType._CF_enumeration.addEnumeration(unicode_value='stained_glass_pane', tag='stained_glass_pane')
BlockType.leaves2 = BlockType._CF_enumeration.addEnumeration(unicode_value='leaves2', tag='leaves2')
BlockType.log2 = BlockType._CF_enumeration.addEnumeration(unicode_value='log2', tag='log2')
BlockType.acacia_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='acacia_stairs', tag='acacia_stairs')
BlockType.dark_oak_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='dark_oak_stairs', tag='dark_oak_stairs')
BlockType.slime = BlockType._CF_enumeration.addEnumeration(unicode_value='slime', tag='slime')
BlockType.barrier = BlockType._CF_enumeration.addEnumeration(unicode_value='barrier', tag='barrier')
BlockType.iron_trapdoor = BlockType._CF_enumeration.addEnumeration(unicode_value='iron_trapdoor', tag='iron_trapdoor')
BlockType.prismarine = BlockType._CF_enumeration.addEnumeration(unicode_value='prismarine', tag='prismarine')
BlockType.sea_lantern = BlockType._CF_enumeration.addEnumeration(unicode_value='sea_lantern', tag='sea_lantern')
BlockType.hay_block = BlockType._CF_enumeration.addEnumeration(unicode_value='hay_block', tag='hay_block')
BlockType.carpet = BlockType._CF_enumeration.addEnumeration(unicode_value='carpet', tag='carpet')
BlockType.hardened_clay = BlockType._CF_enumeration.addEnumeration(unicode_value='hardened_clay', tag='hardened_clay')
BlockType.coal_block = BlockType._CF_enumeration.addEnumeration(unicode_value='coal_block', tag='coal_block')
BlockType.packed_ice = BlockType._CF_enumeration.addEnumeration(unicode_value='packed_ice', tag='packed_ice')
BlockType.double_plant = BlockType._CF_enumeration.addEnumeration(unicode_value='double_plant', tag='double_plant')
BlockType.standing_banner = BlockType._CF_enumeration.addEnumeration(unicode_value='standing_banner', tag='standing_banner')
BlockType.wall_banner = BlockType._CF_enumeration.addEnumeration(unicode_value='wall_banner', tag='wall_banner')
BlockType.daylight_detector_inverted = BlockType._CF_enumeration.addEnumeration(unicode_value='daylight_detector_inverted', tag='daylight_detector_inverted')
BlockType.red_sandstone = BlockType._CF_enumeration.addEnumeration(unicode_value='red_sandstone', tag='red_sandstone')
BlockType.red_sandstone_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='red_sandstone_stairs', tag='red_sandstone_stairs')
BlockType.double_stone_slab2 = BlockType._CF_enumeration.addEnumeration(unicode_value='double_stone_slab2', tag='double_stone_slab2')
BlockType.stone_slab2 = BlockType._CF_enumeration.addEnumeration(unicode_value='stone_slab2', tag='stone_slab2')
BlockType.spruce_fence_gate = BlockType._CF_enumeration.addEnumeration(unicode_value='spruce_fence_gate', tag='spruce_fence_gate')
BlockType.birch_fence_gate = BlockType._CF_enumeration.addEnumeration(unicode_value='birch_fence_gate', tag='birch_fence_gate')
BlockType.jungle_fence_gate = BlockType._CF_enumeration.addEnumeration(unicode_value='jungle_fence_gate', tag='jungle_fence_gate')
BlockType.dark_oak_fence_gate = BlockType._CF_enumeration.addEnumeration(unicode_value='dark_oak_fence_gate', tag='dark_oak_fence_gate')
BlockType.acacia_fence_gate = BlockType._CF_enumeration.addEnumeration(unicode_value='acacia_fence_gate', tag='acacia_fence_gate')
BlockType.spruce_fence = BlockType._CF_enumeration.addEnumeration(unicode_value='spruce_fence', tag='spruce_fence')
BlockType.birch_fence = BlockType._CF_enumeration.addEnumeration(unicode_value='birch_fence', tag='birch_fence')
BlockType.jungle_fence = BlockType._CF_enumeration.addEnumeration(unicode_value='jungle_fence', tag='jungle_fence')
BlockType.dark_oak_fence = BlockType._CF_enumeration.addEnumeration(unicode_value='dark_oak_fence', tag='dark_oak_fence')
BlockType.acacia_fence = BlockType._CF_enumeration.addEnumeration(unicode_value='acacia_fence', tag='acacia_fence')
BlockType.spruce_door = BlockType._CF_enumeration.addEnumeration(unicode_value='spruce_door', tag='spruce_door')
BlockType.birch_door = BlockType._CF_enumeration.addEnumeration(unicode_value='birch_door', tag='birch_door')
BlockType.jungle_door = BlockType._CF_enumeration.addEnumeration(unicode_value='jungle_door', tag='jungle_door')
BlockType.acacia_door = BlockType._CF_enumeration.addEnumeration(unicode_value='acacia_door', tag='acacia_door')
BlockType.dark_oak_door = BlockType._CF_enumeration.addEnumeration(unicode_value='dark_oak_door', tag='dark_oak_door')
BlockType.end_rod = BlockType._CF_enumeration.addEnumeration(unicode_value='end_rod', tag='end_rod')
BlockType.chorus_plant = BlockType._CF_enumeration.addEnumeration(unicode_value='chorus_plant', tag='chorus_plant')
BlockType.chorus_flower = BlockType._CF_enumeration.addEnumeration(unicode_value='chorus_flower', tag='chorus_flower')
BlockType.purpur_block = BlockType._CF_enumeration.addEnumeration(unicode_value='purpur_block', tag='purpur_block')
BlockType.purpur_pillar = BlockType._CF_enumeration.addEnumeration(unicode_value='purpur_pillar', tag='purpur_pillar')
BlockType.purpur_stairs = BlockType._CF_enumeration.addEnumeration(unicode_value='purpur_stairs', tag='purpur_stairs')
BlockType.purpur_double_slab = BlockType._CF_enumeration.addEnumeration(unicode_value='purpur_double_slab', tag='purpur_double_slab')
BlockType.purpur_slab = BlockType._CF_enumeration.addEnumeration(unicode_value='purpur_slab', tag='purpur_slab')
BlockType.end_bricks = BlockType._CF_enumeration.addEnumeration(unicode_value='end_bricks', tag='end_bricks')
BlockType.beetroots = BlockType._CF_enumeration.addEnumeration(unicode_value='beetroots', tag='beetroots')
BlockType.grass_path = BlockType._CF_enumeration.addEnumeration(unicode_value='grass_path', tag='grass_path')
BlockType.end_gateway = BlockType._CF_enumeration.addEnumeration(unicode_value='end_gateway', tag='end_gateway')
BlockType.repeating_command_block = BlockType._CF_enumeration.addEnumeration(unicode_value='repeating_command_block', tag='repeating_command_block')
BlockType.chain_command_block = BlockType._CF_enumeration.addEnumeration(unicode_value='chain_command_block', tag='chain_command_block')
BlockType.frosted_ice = BlockType._CF_enumeration.addEnumeration(unicode_value='frosted_ice', tag='frosted_ice')
BlockType.magma = BlockType._CF_enumeration.addEnumeration(unicode_value='magma', tag='magma')
BlockType.nether_wart_block = BlockType._CF_enumeration.addEnumeration(unicode_value='nether_wart_block', tag='nether_wart_block')
BlockType.red_nether_brick = BlockType._CF_enumeration.addEnumeration(unicode_value='red_nether_brick', tag='red_nether_brick')
BlockType.bone_block = BlockType._CF_enumeration.addEnumeration(unicode_value='bone_block', tag='bone_block')
BlockType.structure_void = BlockType._CF_enumeration.addEnumeration(unicode_value='structure_void', tag='structure_void')
BlockType.observer = BlockType._CF_enumeration.addEnumeration(unicode_value='observer', tag='observer')
BlockType.white_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='white_shulker_box', tag='white_shulker_box')
BlockType.orange_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='orange_shulker_box', tag='orange_shulker_box')
BlockType.magenta_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='magenta_shulker_box', tag='magenta_shulker_box')
BlockType.light_blue_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='light_blue_shulker_box', tag='light_blue_shulker_box')
BlockType.yellow_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='yellow_shulker_box', tag='yellow_shulker_box')
BlockType.lime_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='lime_shulker_box', tag='lime_shulker_box')
BlockType.pink_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='pink_shulker_box', tag='pink_shulker_box')
BlockType.gray_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='gray_shulker_box', tag='gray_shulker_box')
BlockType.silver_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='silver_shulker_box', tag='silver_shulker_box')
BlockType.cyan_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='cyan_shulker_box', tag='cyan_shulker_box')
BlockType.purple_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='purple_shulker_box', tag='purple_shulker_box')
BlockType.blue_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='blue_shulker_box', tag='blue_shulker_box')
BlockType.brown_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='brown_shulker_box', tag='brown_shulker_box')
BlockType.green_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='green_shulker_box', tag='green_shulker_box')
BlockType.red_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='red_shulker_box', tag='red_shulker_box')
BlockType.black_shulker_box = BlockType._CF_enumeration.addEnumeration(unicode_value='black_shulker_box', tag='black_shulker_box')
BlockType.structure_block = BlockType._CF_enumeration.addEnumeration(unicode_value='structure_block', tag='structure_block')
BlockType._InitializeFacetMap(BlockType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'BlockType', BlockType)
_module_typeBindings.BlockType = BlockType

# Atomic simple type: {http://ProjectMalmo.microsoft.com}SignType
class SignType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
      Subset of the block types which act as signs
    """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SignType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 525, 0)
    _Documentation = '\n      Subset of the block types which act as signs\n    '
SignType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SignType, enum_prefix=None)
SignType.standing_sign = SignType._CF_enumeration.addEnumeration(unicode_value='standing_sign', tag='standing_sign')
SignType.wall_sign = SignType._CF_enumeration.addEnumeration(unicode_value='wall_sign', tag='wall_sign')
SignType._InitializeFacetMap(SignType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SignType', SignType)
_module_typeBindings.SignType = SignType

# Atomic simple type: {http://ProjectMalmo.microsoft.com}ContainerType
class ContainerType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
      Subset of the block types which act as containers, for use in DrawContainer object
    """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContainerType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 537, 0)
    _Documentation = '\n      Subset of the block types which act as containers, for use in DrawContainer object\n    '
ContainerType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ContainerType, enum_prefix=None)
ContainerType.dispenser = ContainerType._CF_enumeration.addEnumeration(unicode_value='dispenser', tag='dispenser')
ContainerType.chest = ContainerType._CF_enumeration.addEnumeration(unicode_value='chest', tag='chest')
ContainerType.trapped_chest = ContainerType._CF_enumeration.addEnumeration(unicode_value='trapped_chest', tag='trapped_chest')
ContainerType.hopper = ContainerType._CF_enumeration.addEnumeration(unicode_value='hopper', tag='hopper')
ContainerType.dropper = ContainerType._CF_enumeration.addEnumeration(unicode_value='dropper', tag='dropper')
ContainerType.white_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='white_shulker_box', tag='white_shulker_box')
ContainerType.orange_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='orange_shulker_box', tag='orange_shulker_box')
ContainerType.magenta_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='magenta_shulker_box', tag='magenta_shulker_box')
ContainerType.light_blue_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='light_blue_shulker_box', tag='light_blue_shulker_box')
ContainerType.yellow_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='yellow_shulker_box', tag='yellow_shulker_box')
ContainerType.lime_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='lime_shulker_box', tag='lime_shulker_box')
ContainerType.pink_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='pink_shulker_box', tag='pink_shulker_box')
ContainerType.gray_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='gray_shulker_box', tag='gray_shulker_box')
ContainerType.silver_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='silver_shulker_box', tag='silver_shulker_box')
ContainerType.cyan_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='cyan_shulker_box', tag='cyan_shulker_box')
ContainerType.purple_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='purple_shulker_box', tag='purple_shulker_box')
ContainerType.blue_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='blue_shulker_box', tag='blue_shulker_box')
ContainerType.brown_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='brown_shulker_box', tag='brown_shulker_box')
ContainerType.green_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='green_shulker_box', tag='green_shulker_box')
ContainerType.red_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='red_shulker_box', tag='red_shulker_box')
ContainerType.black_shulker_box = ContainerType._CF_enumeration.addEnumeration(unicode_value='black_shulker_box', tag='black_shulker_box')
ContainerType._InitializeFacetMap(ContainerType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ContainerType', ContainerType)
_module_typeBindings.ContainerType = ContainerType

# Atomic simple type: {http://ProjectMalmo.microsoft.com}StoneTypes
class StoneTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Types of stone for stone blocks/items
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StoneTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 568, 0)
    _Documentation = '\n        Types of stone for stone blocks/items\n      '
StoneTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=StoneTypes, enum_prefix=None)
StoneTypes.stone = StoneTypes._CF_enumeration.addEnumeration(unicode_value='stone', tag='stone')
StoneTypes.granite = StoneTypes._CF_enumeration.addEnumeration(unicode_value='granite', tag='granite')
StoneTypes.smooth_granite = StoneTypes._CF_enumeration.addEnumeration(unicode_value='smooth_granite', tag='smooth_granite')
StoneTypes.diorite = StoneTypes._CF_enumeration.addEnumeration(unicode_value='diorite', tag='diorite')
StoneTypes.smooth_diorite = StoneTypes._CF_enumeration.addEnumeration(unicode_value='smooth_diorite', tag='smooth_diorite')
StoneTypes.andesite = StoneTypes._CF_enumeration.addEnumeration(unicode_value='andesite', tag='andesite')
StoneTypes.smooth_andesite = StoneTypes._CF_enumeration.addEnumeration(unicode_value='smooth_andesite', tag='smooth_andesite')
StoneTypes._InitializeFacetMap(StoneTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'StoneTypes', StoneTypes)
_module_typeBindings.StoneTypes = StoneTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}WoodTypes
class WoodTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Types of wood for wooden blocks/items
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WoodTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 585, 0)
    _Documentation = '\n        Types of wood for wooden blocks/items\n      '
WoodTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=WoodTypes, enum_prefix=None)
WoodTypes.oak = WoodTypes._CF_enumeration.addEnumeration(unicode_value='oak', tag='oak')
WoodTypes.spruce = WoodTypes._CF_enumeration.addEnumeration(unicode_value='spruce', tag='spruce')
WoodTypes.birch = WoodTypes._CF_enumeration.addEnumeration(unicode_value='birch', tag='birch')
WoodTypes.jungle = WoodTypes._CF_enumeration.addEnumeration(unicode_value='jungle', tag='jungle')
WoodTypes.acacia = WoodTypes._CF_enumeration.addEnumeration(unicode_value='acacia', tag='acacia')
WoodTypes.dark_oak = WoodTypes._CF_enumeration.addEnumeration(unicode_value='dark_oak', tag='dark_oak')
WoodTypes._InitializeFacetMap(WoodTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'WoodTypes', WoodTypes)
_module_typeBindings.WoodTypes = WoodTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}FlowerTypes
class FlowerTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
            Types of flower
        """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FlowerTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 601, 0)
    _Documentation = '\n            Types of flower\n        '
FlowerTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FlowerTypes, enum_prefix=None)
FlowerTypes.dandelion = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='dandelion', tag='dandelion')
FlowerTypes.poppy = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='poppy', tag='poppy')
FlowerTypes.blue_orchid = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='blue_orchid', tag='blue_orchid')
FlowerTypes.allium = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='allium', tag='allium')
FlowerTypes.houstonia = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='houstonia', tag='houstonia')
FlowerTypes.red_tulip = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='red_tulip', tag='red_tulip')
FlowerTypes.orange_tulip = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='orange_tulip', tag='orange_tulip')
FlowerTypes.white_tulip = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='white_tulip', tag='white_tulip')
FlowerTypes.pink_tulip = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='pink_tulip', tag='pink_tulip')
FlowerTypes.oxeye_daisy = FlowerTypes._CF_enumeration.addEnumeration(unicode_value='oxeye_daisy', tag='oxeye_daisy')
FlowerTypes._InitializeFacetMap(FlowerTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FlowerTypes', FlowerTypes)
_module_typeBindings.FlowerTypes = FlowerTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}MonsterEggTypes
class MonsterEggTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
            Types of monster egg blocks
        """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MonsterEggTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 621, 0)
    _Documentation = '\n            Types of monster egg blocks\n        '
MonsterEggTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=MonsterEggTypes, enum_prefix=None)
MonsterEggTypes.cobblestone = MonsterEggTypes._CF_enumeration.addEnumeration(unicode_value='cobblestone', tag='cobblestone')
MonsterEggTypes.stone_brick = MonsterEggTypes._CF_enumeration.addEnumeration(unicode_value='stone_brick', tag='stone_brick')
MonsterEggTypes.mossy_brick = MonsterEggTypes._CF_enumeration.addEnumeration(unicode_value='mossy_brick', tag='mossy_brick')
MonsterEggTypes.cracked_brick = MonsterEggTypes._CF_enumeration.addEnumeration(unicode_value='cracked_brick', tag='cracked_brick')
MonsterEggTypes.chiseled_brick = MonsterEggTypes._CF_enumeration.addEnumeration(unicode_value='chiseled_brick', tag='chiseled_brick')
MonsterEggTypes._InitializeFacetMap(MonsterEggTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'MonsterEggTypes', MonsterEggTypes)
_module_typeBindings.MonsterEggTypes = MonsterEggTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}ShapeTypes
class ShapeTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
            Shapes for, eg, rails
        """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ShapeTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 636, 0)
    _Documentation = '\n            Shapes for, eg, rails\n        '
ShapeTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ShapeTypes, enum_prefix=None)
ShapeTypes.north_south = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='north_south', tag='north_south')
ShapeTypes.east_west = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='east_west', tag='east_west')
ShapeTypes.north_east = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='north_east', tag='north_east')
ShapeTypes.north_west = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='north_west', tag='north_west')
ShapeTypes.south_east = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='south_east', tag='south_east')
ShapeTypes.south_west = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='south_west', tag='south_west')
ShapeTypes.ascending_east = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='ascending_east', tag='ascending_east')
ShapeTypes.ascending_west = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='ascending_west', tag='ascending_west')
ShapeTypes.ascending_north = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='ascending_north', tag='ascending_north')
ShapeTypes.ascending_south = ShapeTypes._CF_enumeration.addEnumeration(unicode_value='ascending_south', tag='ascending_south')
ShapeTypes._InitializeFacetMap(ShapeTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ShapeTypes', ShapeTypes)
_module_typeBindings.ShapeTypes = ShapeTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}HalfTypes
class HalfTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
            Specify which half - for stairs or double blocks (doors, tall flowers, etc)
        """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HalfTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 656, 0)
    _Documentation = '\n            Specify which half - for stairs or double blocks (doors, tall flowers, etc)\n        '
HalfTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=HalfTypes, enum_prefix=None)
HalfTypes.top = HalfTypes._CF_enumeration.addEnumeration(unicode_value='top', tag='top')
HalfTypes.bottom = HalfTypes._CF_enumeration.addEnumeration(unicode_value='bottom', tag='bottom')
HalfTypes.head = HalfTypes._CF_enumeration.addEnumeration(unicode_value='head', tag='head')
HalfTypes.foot = HalfTypes._CF_enumeration.addEnumeration(unicode_value='foot', tag='foot')
HalfTypes.upper = HalfTypes._CF_enumeration.addEnumeration(unicode_value='upper', tag='upper')
HalfTypes.lower = HalfTypes._CF_enumeration.addEnumeration(unicode_value='lower', tag='lower')
HalfTypes._InitializeFacetMap(HalfTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'HalfTypes', HalfTypes)
_module_typeBindings.HalfTypes = HalfTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}EntityTypes
class EntityTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Types of entity for eggs, spawners etc.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EntityTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 675, 0)
    _Documentation = '\n        Types of entity for eggs, spawners etc.\n      '
EntityTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=EntityTypes, enum_prefix=None)
EntityTypes.ElderGuardian = EntityTypes._CF_enumeration.addEnumeration(unicode_value='ElderGuardian', tag='ElderGuardian')
EntityTypes.WitherSkeleton = EntityTypes._CF_enumeration.addEnumeration(unicode_value='WitherSkeleton', tag='WitherSkeleton')
EntityTypes.Stray = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Stray', tag='Stray')
EntityTypes.Husk = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Husk', tag='Husk')
EntityTypes.ZombieVillager = EntityTypes._CF_enumeration.addEnumeration(unicode_value='ZombieVillager', tag='ZombieVillager')
EntityTypes.SkeletonHorse = EntityTypes._CF_enumeration.addEnumeration(unicode_value='SkeletonHorse', tag='SkeletonHorse')
EntityTypes.ZombieHorse = EntityTypes._CF_enumeration.addEnumeration(unicode_value='ZombieHorse', tag='ZombieHorse')
EntityTypes.EvocationIllager = EntityTypes._CF_enumeration.addEnumeration(unicode_value='EvocationIllager', tag='EvocationIllager')
EntityTypes.VindicationIllager = EntityTypes._CF_enumeration.addEnumeration(unicode_value='VindicationIllager', tag='VindicationIllager')
EntityTypes.Vex = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Vex', tag='Vex')
EntityTypes.Creeper = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Creeper', tag='Creeper')
EntityTypes.Skeleton = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Skeleton', tag='Skeleton')
EntityTypes.Spider = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Spider', tag='Spider')
EntityTypes.Giant = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Giant', tag='Giant')
EntityTypes.Zombie = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Zombie', tag='Zombie')
EntityTypes.Slime = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Slime', tag='Slime')
EntityTypes.Ghast = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Ghast', tag='Ghast')
EntityTypes.PigZombie = EntityTypes._CF_enumeration.addEnumeration(unicode_value='PigZombie', tag='PigZombie')
EntityTypes.Enderman = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Enderman', tag='Enderman')
EntityTypes.CaveSpider = EntityTypes._CF_enumeration.addEnumeration(unicode_value='CaveSpider', tag='CaveSpider')
EntityTypes.Silverfish = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Silverfish', tag='Silverfish')
EntityTypes.Blaze = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Blaze', tag='Blaze')
EntityTypes.LavaSlime = EntityTypes._CF_enumeration.addEnumeration(unicode_value='LavaSlime', tag='LavaSlime')
EntityTypes.EnderDragon = EntityTypes._CF_enumeration.addEnumeration(unicode_value='EnderDragon', tag='EnderDragon')
EntityTypes.WitherBoss = EntityTypes._CF_enumeration.addEnumeration(unicode_value='WitherBoss', tag='WitherBoss')
EntityTypes.Bat = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Bat', tag='Bat')
EntityTypes.Witch = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Witch', tag='Witch')
EntityTypes.Endermite = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Endermite', tag='Endermite')
EntityTypes.Guardian = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Guardian', tag='Guardian')
EntityTypes.Shulker = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Shulker', tag='Shulker')
EntityTypes.Donkey = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Donkey', tag='Donkey')
EntityTypes.Mule = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Mule', tag='Mule')
EntityTypes.Pig = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Pig', tag='Pig')
EntityTypes.Sheep = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Sheep', tag='Sheep')
EntityTypes.Cow = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Cow', tag='Cow')
EntityTypes.Chicken = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Chicken', tag='Chicken')
EntityTypes.Squid = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Squid', tag='Squid')
EntityTypes.Wolf = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Wolf', tag='Wolf')
EntityTypes.MushroomCow = EntityTypes._CF_enumeration.addEnumeration(unicode_value='MushroomCow', tag='MushroomCow')
EntityTypes.SnowMan = EntityTypes._CF_enumeration.addEnumeration(unicode_value='SnowMan', tag='SnowMan')
EntityTypes.Ozelot = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Ozelot', tag='Ozelot')
EntityTypes.VillagerGolem = EntityTypes._CF_enumeration.addEnumeration(unicode_value='VillagerGolem', tag='VillagerGolem')
EntityTypes.Horse = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Horse', tag='Horse')
EntityTypes.Rabbit = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Rabbit', tag='Rabbit')
EntityTypes.PolarBear = EntityTypes._CF_enumeration.addEnumeration(unicode_value='PolarBear', tag='PolarBear')
EntityTypes.Llama = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Llama', tag='Llama')
EntityTypes.Villager = EntityTypes._CF_enumeration.addEnumeration(unicode_value='Villager', tag='Villager')
EntityTypes._InitializeFacetMap(EntityTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'EntityTypes', EntityTypes)
_module_typeBindings.EntityTypes = EntityTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}NonLivingEntityTypes
class NonLivingEntityTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Non-living entities, such as boats, minecarts etc.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NonLivingEntityTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 732, 0)
    _Documentation = '\n        Non-living entities, such as boats, minecarts etc.\n      '
NonLivingEntityTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NonLivingEntityTypes, enum_prefix=None)
NonLivingEntityTypes.MinecartRideable = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='MinecartRideable', tag='MinecartRideable')
NonLivingEntityTypes.MinecartChest = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='MinecartChest', tag='MinecartChest')
NonLivingEntityTypes.MinecartFurnace = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='MinecartFurnace', tag='MinecartFurnace')
NonLivingEntityTypes.MinecartTNT = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='MinecartTNT', tag='MinecartTNT')
NonLivingEntityTypes.MinecartSpawner = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='MinecartSpawner', tag='MinecartSpawner')
NonLivingEntityTypes.MinecartHopper = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='MinecartHopper', tag='MinecartHopper')
NonLivingEntityTypes.MinecartCommandBlock = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='MinecartCommandBlock', tag='MinecartCommandBlock')
NonLivingEntityTypes.Boat = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='Boat', tag='Boat')
NonLivingEntityTypes.ArmorStand = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='ArmorStand', tag='ArmorStand')
NonLivingEntityTypes.ItemFrame = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='ItemFrame', tag='ItemFrame')
NonLivingEntityTypes.EnderCrystal = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='EnderCrystal', tag='EnderCrystal')
NonLivingEntityTypes.LeashKnot = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='LeashKnot', tag='LeashKnot')
NonLivingEntityTypes.Painting = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='Painting', tag='Painting')
NonLivingEntityTypes.PrimedTnt = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='PrimedTnt', tag='PrimedTnt')
NonLivingEntityTypes.FallingSand = NonLivingEntityTypes._CF_enumeration.addEnumeration(unicode_value='FallingSand', tag='FallingSand')
NonLivingEntityTypes._InitializeFacetMap(NonLivingEntityTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NonLivingEntityTypes', NonLivingEntityTypes)
_module_typeBindings.NonLivingEntityTypes = NonLivingEntityTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}ProjectileEntityTypes
class ProjectileEntityTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Non-living entities which tend to represent projectiles thrown by other mobs, etc.
        Doesn't make much sense to spawn/draw these, but the agent could encounter them in the wild.
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProjectileEntityTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 757, 0)
    _Documentation = "\n        Non-living entities which tend to represent projectiles thrown by other mobs, etc.\n        Doesn't make much sense to spawn/draw these, but the agent could encounter them in the wild.\n      "
ProjectileEntityTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ProjectileEntityTypes, enum_prefix=None)
ProjectileEntityTypes.XPOrb = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='XPOrb', tag='XPOrb')
ProjectileEntityTypes.AreaEffectCloud = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='AreaEffectCloud', tag='AreaEffectCloud')
ProjectileEntityTypes.ThrownEgg = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='ThrownEgg', tag='ThrownEgg')
ProjectileEntityTypes.Arrow = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='Arrow', tag='Arrow')
ProjectileEntityTypes.Snowball = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='Snowball', tag='Snowball')
ProjectileEntityTypes.Fireball = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='Fireball', tag='Fireball')
ProjectileEntityTypes.SmallFireball = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='SmallFireball', tag='SmallFireball')
ProjectileEntityTypes.ThrownEnderpearl = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='ThrownEnderpearl', tag='ThrownEnderpearl')
ProjectileEntityTypes.EyeOfEnderSignal = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='EyeOfEnderSignal', tag='EyeOfEnderSignal')
ProjectileEntityTypes.ThrownPotion = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='ThrownPotion', tag='ThrownPotion')
ProjectileEntityTypes.ThrownExpBottle = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='ThrownExpBottle', tag='ThrownExpBottle')
ProjectileEntityTypes.WitherSkull = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='WitherSkull', tag='WitherSkull')
ProjectileEntityTypes.FireworksRocketEntity = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='FireworksRocketEntity', tag='FireworksRocketEntity')
ProjectileEntityTypes.SpectralArrow = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='SpectralArrow', tag='SpectralArrow')
ProjectileEntityTypes.ShulkerBullet = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='ShulkerBullet', tag='ShulkerBullet')
ProjectileEntityTypes.DragonFireball = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='DragonFireball', tag='DragonFireball')
ProjectileEntityTypes.EvocationFangs = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='EvocationFangs', tag='EvocationFangs')
ProjectileEntityTypes.LlamaSpit = ProjectileEntityTypes._CF_enumeration.addEnumeration(unicode_value='LlamaSpit', tag='LlamaSpit')
ProjectileEntityTypes._InitializeFacetMap(ProjectileEntityTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ProjectileEntityTypes', ProjectileEntityTypes)
_module_typeBindings.ProjectileEntityTypes = ProjectileEntityTypes

# Atomic simple type: {http://ProjectMalmo.microsoft.com}NoteTypes
class NoteTypes (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """
        Note values for creating tuned noteblocks
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NoteTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 786, 0)
    _Documentation = '\n        Note values for creating tuned noteblocks\n      '
NoteTypes._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NoteTypes, enum_prefix=None)
NoteTypes.F_sharp_3 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='F_sharp_3', tag='F_sharp_3')
NoteTypes.G3 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='G3', tag='G3')
NoteTypes.G_sharp_3 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='G_sharp_3', tag='G_sharp_3')
NoteTypes.A3 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='A3', tag='A3')
NoteTypes.A_sharp_3 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='A_sharp_3', tag='A_sharp_3')
NoteTypes.B3 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='B3', tag='B3')
NoteTypes.C4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='C4', tag='C4')
NoteTypes.C_sharp_4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='C_sharp_4', tag='C_sharp_4')
NoteTypes.D4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='D4', tag='D4')
NoteTypes.D_sharp_4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='D_sharp_4', tag='D_sharp_4')
NoteTypes.E4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='E4', tag='E4')
NoteTypes.F4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='F4', tag='F4')
NoteTypes.F_sharp_4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='F_sharp_4', tag='F_sharp_4')
NoteTypes.G4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='G4', tag='G4')
NoteTypes.G_sharp_4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='G_sharp_4', tag='G_sharp_4')
NoteTypes.A4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='A4', tag='A4')
NoteTypes.A_sharp_4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='A_sharp_4', tag='A_sharp_4')
NoteTypes.B4 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='B4', tag='B4')
NoteTypes.C5 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='C5', tag='C5')
NoteTypes.C_sharp_5 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='C_sharp_5', tag='C_sharp_5')
NoteTypes.D5 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='D5', tag='D5')
NoteTypes.D_sharp_5 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='D_sharp_5', tag='D_sharp_5')
NoteTypes.E5 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='E5', tag='E5')
NoteTypes.F5 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='F5', tag='F5')
NoteTypes.F_sharp_5 = NoteTypes._CF_enumeration.addEnumeration(unicode_value='F_sharp_5', tag='F_sharp_5')
NoteTypes._InitializeFacetMap(NoteTypes._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NoteTypes', NoteTypes)
_module_typeBindings.NoteTypes = NoteTypes

# List simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_20 (pyxb.binding.basis.STD_list):

    """Simple type that is a list of EntityTypes."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 170, 20)
    _Documentation = None

    _ItemType = EntityTypes
STD_ANON_20._InitializeFacetMap()
_module_typeBindings.STD_ANON_20 = STD_ANON_20

# List simple type: {http://ProjectMalmo.microsoft.com}BlockList
# superclasses pyxb.binding.datatypes.anySimpleType
class BlockList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of BlockType."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockList')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 218, 2)
    _Documentation = None

    _ItemType = BlockType
BlockList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'BlockList', BlockList)
_module_typeBindings.BlockList = BlockList

# List simple type: {http://ProjectMalmo.microsoft.com}ItemList
# superclasses pyxb.binding.datatypes.anySimpleType
class ItemList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of ItemType."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ItemList')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 222, 2)
    _Documentation = None

    _ItemType = ItemType
ItemList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ItemList', ItemList)
_module_typeBindings.ItemList = ItemList

# List simple type: {http://ProjectMalmo.microsoft.com}ColourList
# superclasses pyxb.binding.datatypes.anySimpleType
class ColourList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of Colour."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ColourList')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 230, 2)
    _Documentation = None

    _ItemType = Colour
ColourList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'ColourList', ColourList)
_module_typeBindings.ColourList = ColourList

# Union simple type: {http://ProjectMalmo.microsoft.com}Command
# superclasses pyxb.binding.datatypes.anySimpleType
class Command (pyxb.binding.basis.STD_union):

    """Simple type that is a union of ContinuousMovementCommand, AbsoluteMovementCommand, DiscreteMovementCommand, InventoryCommand, ChatCommand, SimpleCraftCommand, MissionQuitCommand, HumanLevelCommand."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Command')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1495, 2)
    _Documentation = None

    _MemberTypes = ( ContinuousMovementCommand, AbsoluteMovementCommand, DiscreteMovementCommand, InventoryCommand, ChatCommand, SimpleCraftCommand, MissionQuitCommand, HumanLevelCommand, )
Command._CF_pattern = pyxb.binding.facets.CF_pattern()
Command._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Command)
Command.move = 'move'                             # originally ContinuousMovementCommand.move
Command.strafe = 'strafe'                         # originally ContinuousMovementCommand.strafe
Command.pitch = 'pitch'                           # originally ContinuousMovementCommand.pitch
Command.turn = 'turn'                             # originally ContinuousMovementCommand.turn
Command.jump = 'jump'                             # originally ContinuousMovementCommand.jump
Command.crouch = 'crouch'                         # originally ContinuousMovementCommand.crouch
Command.attack = 'attack'                         # originally ContinuousMovementCommand.attack
Command.use = 'use'                               # originally ContinuousMovementCommand.use
Command.tpx = 'tpx'                               # originally AbsoluteMovementCommand.tpx
Command.tpy = 'tpy'                               # originally AbsoluteMovementCommand.tpy
Command.tpz = 'tpz'                               # originally AbsoluteMovementCommand.tpz
Command.tp = 'tp'                                 # originally AbsoluteMovementCommand.tp
Command.setYaw = 'setYaw'                         # originally AbsoluteMovementCommand.setYaw
Command.setPitch = 'setPitch'                     # originally AbsoluteMovementCommand.setPitch
Command.move = 'move'                             # originally DiscreteMovementCommand.move
Command.jumpmove = 'jumpmove'                     # originally DiscreteMovementCommand.jumpmove
Command.strafe = 'strafe'                         # originally DiscreteMovementCommand.strafe
Command.jumpstrafe = 'jumpstrafe'                 # originally DiscreteMovementCommand.jumpstrafe
Command.turn = 'turn'                             # originally DiscreteMovementCommand.turn
Command.movenorth = 'movenorth'                   # originally DiscreteMovementCommand.movenorth
Command.moveeast = 'moveeast'                     # originally DiscreteMovementCommand.moveeast
Command.movesouth = 'movesouth'                   # originally DiscreteMovementCommand.movesouth
Command.movewest = 'movewest'                     # originally DiscreteMovementCommand.movewest
Command.jumpnorth = 'jumpnorth'                   # originally DiscreteMovementCommand.jumpnorth
Command.jumpeast = 'jumpeast'                     # originally DiscreteMovementCommand.jumpeast
Command.jumpsouth = 'jumpsouth'                   # originally DiscreteMovementCommand.jumpsouth
Command.jumpwest = 'jumpwest'                     # originally DiscreteMovementCommand.jumpwest
Command.jump = 'jump'                             # originally DiscreteMovementCommand.jump
Command.look = 'look'                             # originally DiscreteMovementCommand.look
Command.attack = 'attack'                         # originally DiscreteMovementCommand.attack
Command.use = 'use'                               # originally DiscreteMovementCommand.use
Command.jumpuse = 'jumpuse'                       # originally DiscreteMovementCommand.jumpuse
Command.swapInventoryItems = 'swapInventoryItems' # originally InventoryCommand.swapInventoryItems
Command.combineInventoryItems = 'combineInventoryItems'# originally InventoryCommand.combineInventoryItems
Command.discardCurrentItem = 'discardCurrentItem' # originally InventoryCommand.discardCurrentItem
Command.hotbar_1 = 'hotbar.1'                     # originally InventoryCommand.hotbar_1
Command.hotbar_2 = 'hotbar.2'                     # originally InventoryCommand.hotbar_2
Command.hotbar_3 = 'hotbar.3'                     # originally InventoryCommand.hotbar_3
Command.hotbar_4 = 'hotbar.4'                     # originally InventoryCommand.hotbar_4
Command.hotbar_5 = 'hotbar.5'                     # originally InventoryCommand.hotbar_5
Command.hotbar_6 = 'hotbar.6'                     # originally InventoryCommand.hotbar_6
Command.hotbar_7 = 'hotbar.7'                     # originally InventoryCommand.hotbar_7
Command.hotbar_8 = 'hotbar.8'                     # originally InventoryCommand.hotbar_8
Command.hotbar_9 = 'hotbar.9'                     # originally InventoryCommand.hotbar_9
Command.chat = 'chat'                             # originally ChatCommand.chat
Command.craft = 'craft'                           # originally SimpleCraftCommand.craft
Command.quit = 'quit'                             # originally MissionQuitCommand.quit
Command.forward = 'forward'                       # originally HumanLevelCommand.forward
Command.left = 'left'                             # originally HumanLevelCommand.left
Command.back = 'back'                             # originally HumanLevelCommand.back
Command.right = 'right'                           # originally HumanLevelCommand.right
Command.jump = 'jump'                             # originally HumanLevelCommand.jump
Command.sneak = 'sneak'                           # originally HumanLevelCommand.sneak
Command.sprint = 'sprint'                         # originally HumanLevelCommand.sprint
Command.inventory = 'inventory'                   # originally HumanLevelCommand.inventory
Command.swapHands = 'swapHands'                   # originally HumanLevelCommand.swapHands
Command.drop = 'drop'                             # originally HumanLevelCommand.drop
Command.use = 'use'                               # originally HumanLevelCommand.use
Command.attack = 'attack'                         # originally HumanLevelCommand.attack
Command.pickItem = 'pickItem'                     # originally HumanLevelCommand.pickItem
Command.hotbar_1 = 'hotbar.1'                     # originally HumanLevelCommand.hotbar_1
Command.hotbar_2 = 'hotbar.2'                     # originally HumanLevelCommand.hotbar_2
Command.hotbar_3 = 'hotbar.3'                     # originally HumanLevelCommand.hotbar_3
Command.hotbar_4 = 'hotbar.4'                     # originally HumanLevelCommand.hotbar_4
Command.hotbar_5 = 'hotbar.5'                     # originally HumanLevelCommand.hotbar_5
Command.hotbar_6 = 'hotbar.6'                     # originally HumanLevelCommand.hotbar_6
Command.hotbar_7 = 'hotbar.7'                     # originally HumanLevelCommand.hotbar_7
Command.hotbar_8 = 'hotbar.8'                     # originally HumanLevelCommand.hotbar_8
Command.hotbar_9 = 'hotbar.9'                     # originally HumanLevelCommand.hotbar_9
Command.moveMouse = 'moveMouse'                   # originally HumanLevelCommand.moveMouse
Command._InitializeFacetMap(Command._CF_pattern,
   Command._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Command', Command)
_module_typeBindings.Command = Command

# List simple type: {http://ProjectMalmo.microsoft.com}MobList
# superclasses pyxb.binding.datatypes.anySimpleType
class MobList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of EntityTypes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobList')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2475, 2)
    _Documentation = None

    _ItemType = EntityTypes
MobList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'MobList', MobList)
_module_typeBindings.MobList = MobList

# Union simple type: {http://ProjectMalmo.microsoft.com}BlockOrItem
# superclasses pyxb.binding.datatypes.anySimpleType
class BlockOrItem (pyxb.binding.basis.STD_union):

    """Simple type that is a union of BlockType, ItemType."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockOrItem')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 521, 0)
    _Documentation = None

    _MemberTypes = ( BlockType, ItemType, )
BlockOrItem._CF_pattern = pyxb.binding.facets.CF_pattern()
BlockOrItem._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=BlockOrItem)
BlockOrItem.air = 'air'                           # originally BlockType.air
BlockOrItem.stone = 'stone'                       # originally BlockType.stone
BlockOrItem.grass = 'grass'                       # originally BlockType.grass
BlockOrItem.dirt = 'dirt'                         # originally BlockType.dirt
BlockOrItem.cobblestone = 'cobblestone'           # originally BlockType.cobblestone
BlockOrItem.planks = 'planks'                     # originally BlockType.planks
BlockOrItem.sapling = 'sapling'                   # originally BlockType.sapling
BlockOrItem.bedrock = 'bedrock'                   # originally BlockType.bedrock
BlockOrItem.flowing_water = 'flowing_water'       # originally BlockType.flowing_water
BlockOrItem.water = 'water'                       # originally BlockType.water
BlockOrItem.flowing_lava = 'flowing_lava'         # originally BlockType.flowing_lava
BlockOrItem.lava = 'lava'                         # originally BlockType.lava
BlockOrItem.sand = 'sand'                         # originally BlockType.sand
BlockOrItem.gravel = 'gravel'                     # originally BlockType.gravel
BlockOrItem.gold_ore = 'gold_ore'                 # originally BlockType.gold_ore
BlockOrItem.iron_ore = 'iron_ore'                 # originally BlockType.iron_ore
BlockOrItem.coal_ore = 'coal_ore'                 # originally BlockType.coal_ore
BlockOrItem.log = 'log'                           # originally BlockType.log
BlockOrItem.leaves = 'leaves'                     # originally BlockType.leaves
BlockOrItem.sponge = 'sponge'                     # originally BlockType.sponge
BlockOrItem.glass = 'glass'                       # originally BlockType.glass
BlockOrItem.lapis_ore = 'lapis_ore'               # originally BlockType.lapis_ore
BlockOrItem.lapis_block = 'lapis_block'           # originally BlockType.lapis_block
BlockOrItem.dispenser = 'dispenser'               # originally BlockType.dispenser
BlockOrItem.sandstone = 'sandstone'               # originally BlockType.sandstone
BlockOrItem.noteblock = 'noteblock'               # originally BlockType.noteblock
BlockOrItem.bed = 'bed'                           # originally BlockType.bed
BlockOrItem.golden_rail = 'golden_rail'           # originally BlockType.golden_rail
BlockOrItem.detector_rail = 'detector_rail'       # originally BlockType.detector_rail
BlockOrItem.sticky_piston = 'sticky_piston'       # originally BlockType.sticky_piston
BlockOrItem.web = 'web'                           # originally BlockType.web
BlockOrItem.tallgrass = 'tallgrass'               # originally BlockType.tallgrass
BlockOrItem.deadbush = 'deadbush'                 # originally BlockType.deadbush
BlockOrItem.piston = 'piston'                     # originally BlockType.piston
BlockOrItem.piston_head = 'piston_head'           # originally BlockType.piston_head
BlockOrItem.wool = 'wool'                         # originally BlockType.wool
BlockOrItem.piston_extension = 'piston_extension' # originally BlockType.piston_extension
BlockOrItem.yellow_flower = 'yellow_flower'       # originally BlockType.yellow_flower
BlockOrItem.red_flower = 'red_flower'             # originally BlockType.red_flower
BlockOrItem.brown_mushroom = 'brown_mushroom'     # originally BlockType.brown_mushroom
BlockOrItem.red_mushroom = 'red_mushroom'         # originally BlockType.red_mushroom
BlockOrItem.gold_block = 'gold_block'             # originally BlockType.gold_block
BlockOrItem.iron_block = 'iron_block'             # originally BlockType.iron_block
BlockOrItem.double_stone_slab = 'double_stone_slab'# originally BlockType.double_stone_slab
BlockOrItem.stone_slab = 'stone_slab'             # originally BlockType.stone_slab
BlockOrItem.brick_block = 'brick_block'           # originally BlockType.brick_block
BlockOrItem.tnt = 'tnt'                           # originally BlockType.tnt
BlockOrItem.bookshelf = 'bookshelf'               # originally BlockType.bookshelf
BlockOrItem.mossy_cobblestone = 'mossy_cobblestone'# originally BlockType.mossy_cobblestone
BlockOrItem.obsidian = 'obsidian'                 # originally BlockType.obsidian
BlockOrItem.torch = 'torch'                       # originally BlockType.torch
BlockOrItem.fire = 'fire'                         # originally BlockType.fire
BlockOrItem.mob_spawner = 'mob_spawner'           # originally BlockType.mob_spawner
BlockOrItem.oak_stairs = 'oak_stairs'             # originally BlockType.oak_stairs
BlockOrItem.chest = 'chest'                       # originally BlockType.chest
BlockOrItem.redstone_wire = 'redstone_wire'       # originally BlockType.redstone_wire
BlockOrItem.diamond_ore = 'diamond_ore'           # originally BlockType.diamond_ore
BlockOrItem.diamond_block = 'diamond_block'       # originally BlockType.diamond_block
BlockOrItem.crafting_table = 'crafting_table'     # originally BlockType.crafting_table
BlockOrItem.wheat = 'wheat'                       # originally BlockType.wheat
BlockOrItem.farmland = 'farmland'                 # originally BlockType.farmland
BlockOrItem.furnace = 'furnace'                   # originally BlockType.furnace
BlockOrItem.lit_furnace = 'lit_furnace'           # originally BlockType.lit_furnace
BlockOrItem.standing_sign = 'standing_sign'       # originally BlockType.standing_sign
BlockOrItem.wooden_door = 'wooden_door'           # originally BlockType.wooden_door
BlockOrItem.ladder = 'ladder'                     # originally BlockType.ladder
BlockOrItem.rail = 'rail'                         # originally BlockType.rail
BlockOrItem.stone_stairs = 'stone_stairs'         # originally BlockType.stone_stairs
BlockOrItem.wall_sign = 'wall_sign'               # originally BlockType.wall_sign
BlockOrItem.lever = 'lever'                       # originally BlockType.lever
BlockOrItem.stone_pressure_plate = 'stone_pressure_plate'# originally BlockType.stone_pressure_plate
BlockOrItem.iron_door = 'iron_door'               # originally BlockType.iron_door
BlockOrItem.wooden_pressure_plate = 'wooden_pressure_plate'# originally BlockType.wooden_pressure_plate
BlockOrItem.redstone_ore = 'redstone_ore'         # originally BlockType.redstone_ore
BlockOrItem.lit_redstone_ore = 'lit_redstone_ore' # originally BlockType.lit_redstone_ore
BlockOrItem.unlit_redstone_torch = 'unlit_redstone_torch'# originally BlockType.unlit_redstone_torch
BlockOrItem.redstone_torch = 'redstone_torch'     # originally BlockType.redstone_torch
BlockOrItem.stone_button = 'stone_button'         # originally BlockType.stone_button
BlockOrItem.snow_layer = 'snow_layer'             # originally BlockType.snow_layer
BlockOrItem.ice = 'ice'                           # originally BlockType.ice
BlockOrItem.snow = 'snow'                         # originally BlockType.snow
BlockOrItem.cactus = 'cactus'                     # originally BlockType.cactus
BlockOrItem.clay = 'clay'                         # originally BlockType.clay
BlockOrItem.reeds = 'reeds'                       # originally BlockType.reeds
BlockOrItem.jukebox = 'jukebox'                   # originally BlockType.jukebox
BlockOrItem.fence = 'fence'                       # originally BlockType.fence
BlockOrItem.pumpkin = 'pumpkin'                   # originally BlockType.pumpkin
BlockOrItem.netherrack = 'netherrack'             # originally BlockType.netherrack
BlockOrItem.soul_sand = 'soul_sand'               # originally BlockType.soul_sand
BlockOrItem.glowstone = 'glowstone'               # originally BlockType.glowstone
BlockOrItem.portal = 'portal'                     # originally BlockType.portal
BlockOrItem.lit_pumpkin = 'lit_pumpkin'           # originally BlockType.lit_pumpkin
BlockOrItem.cake = 'cake'                         # originally BlockType.cake
BlockOrItem.unpowered_repeater = 'unpowered_repeater'# originally BlockType.unpowered_repeater
BlockOrItem.powered_repeater = 'powered_repeater' # originally BlockType.powered_repeater
BlockOrItem.stained_glass = 'stained_glass'       # originally BlockType.stained_glass
BlockOrItem.trapdoor = 'trapdoor'                 # originally BlockType.trapdoor
BlockOrItem.monster_egg = 'monster_egg'           # originally BlockType.monster_egg
BlockOrItem.stonebrick = 'stonebrick'             # originally BlockType.stonebrick
BlockOrItem.brown_mushroom_block = 'brown_mushroom_block'# originally BlockType.brown_mushroom_block
BlockOrItem.red_mushroom_block = 'red_mushroom_block'# originally BlockType.red_mushroom_block
BlockOrItem.iron_bars = 'iron_bars'               # originally BlockType.iron_bars
BlockOrItem.glass_pane = 'glass_pane'             # originally BlockType.glass_pane
BlockOrItem.melon_block = 'melon_block'           # originally BlockType.melon_block
BlockOrItem.pumpkin_stem = 'pumpkin_stem'         # originally BlockType.pumpkin_stem
BlockOrItem.melon_stem = 'melon_stem'             # originally BlockType.melon_stem
BlockOrItem.vine = 'vine'                         # originally BlockType.vine
BlockOrItem.fence_gate = 'fence_gate'             # originally BlockType.fence_gate
BlockOrItem.brick_stairs = 'brick_stairs'         # originally BlockType.brick_stairs
BlockOrItem.stone_brick_stairs = 'stone_brick_stairs'# originally BlockType.stone_brick_stairs
BlockOrItem.mycelium = 'mycelium'                 # originally BlockType.mycelium
BlockOrItem.waterlily = 'waterlily'               # originally BlockType.waterlily
BlockOrItem.nether_brick = 'nether_brick'         # originally BlockType.nether_brick
BlockOrItem.nether_brick_fence = 'nether_brick_fence'# originally BlockType.nether_brick_fence
BlockOrItem.nether_brick_stairs = 'nether_brick_stairs'# originally BlockType.nether_brick_stairs
BlockOrItem.nether_wart = 'nether_wart'           # originally BlockType.nether_wart
BlockOrItem.enchanting_table = 'enchanting_table' # originally BlockType.enchanting_table
BlockOrItem.brewing_stand = 'brewing_stand'       # originally BlockType.brewing_stand
BlockOrItem.cauldron = 'cauldron'                 # originally BlockType.cauldron
BlockOrItem.end_portal = 'end_portal'             # originally BlockType.end_portal
BlockOrItem.end_portal_frame = 'end_portal_frame' # originally BlockType.end_portal_frame
BlockOrItem.end_stone = 'end_stone'               # originally BlockType.end_stone
BlockOrItem.dragon_egg = 'dragon_egg'             # originally BlockType.dragon_egg
BlockOrItem.redstone_lamp = 'redstone_lamp'       # originally BlockType.redstone_lamp
BlockOrItem.lit_redstone_lamp = 'lit_redstone_lamp'# originally BlockType.lit_redstone_lamp
BlockOrItem.double_wooden_slab = 'double_wooden_slab'# originally BlockType.double_wooden_slab
BlockOrItem.wooden_slab = 'wooden_slab'           # originally BlockType.wooden_slab
BlockOrItem.cocoa = 'cocoa'                       # originally BlockType.cocoa
BlockOrItem.sandstone_stairs = 'sandstone_stairs' # originally BlockType.sandstone_stairs
BlockOrItem.emerald_ore = 'emerald_ore'           # originally BlockType.emerald_ore
BlockOrItem.ender_chest = 'ender_chest'           # originally BlockType.ender_chest
BlockOrItem.tripwire_hook = 'tripwire_hook'       # originally BlockType.tripwire_hook
BlockOrItem.tripwire = 'tripwire'                 # originally BlockType.tripwire
BlockOrItem.emerald_block = 'emerald_block'       # originally BlockType.emerald_block
BlockOrItem.spruce_stairs = 'spruce_stairs'       # originally BlockType.spruce_stairs
BlockOrItem.birch_stairs = 'birch_stairs'         # originally BlockType.birch_stairs
BlockOrItem.jungle_stairs = 'jungle_stairs'       # originally BlockType.jungle_stairs
BlockOrItem.command_block = 'command_block'       # originally BlockType.command_block
BlockOrItem.beacon = 'beacon'                     # originally BlockType.beacon
BlockOrItem.cobblestone_wall = 'cobblestone_wall' # originally BlockType.cobblestone_wall
BlockOrItem.flower_pot = 'flower_pot'             # originally BlockType.flower_pot
BlockOrItem.carrots = 'carrots'                   # originally BlockType.carrots
BlockOrItem.potatoes = 'potatoes'                 # originally BlockType.potatoes
BlockOrItem.wooden_button = 'wooden_button'       # originally BlockType.wooden_button
BlockOrItem.skull = 'skull'                       # originally BlockType.skull
BlockOrItem.anvil = 'anvil'                       # originally BlockType.anvil
BlockOrItem.trapped_chest = 'trapped_chest'       # originally BlockType.trapped_chest
BlockOrItem.light_weighted_pressure_plate = 'light_weighted_pressure_plate'# originally BlockType.light_weighted_pressure_plate
BlockOrItem.heavy_weighted_pressure_plate = 'heavy_weighted_pressure_plate'# originally BlockType.heavy_weighted_pressure_plate
BlockOrItem.unpowered_comparator = 'unpowered_comparator'# originally BlockType.unpowered_comparator
BlockOrItem.powered_comparator = 'powered_comparator'# originally BlockType.powered_comparator
BlockOrItem.daylight_detector = 'daylight_detector'# originally BlockType.daylight_detector
BlockOrItem.redstone_block = 'redstone_block'     # originally BlockType.redstone_block
BlockOrItem.quartz_ore = 'quartz_ore'             # originally BlockType.quartz_ore
BlockOrItem.hopper = 'hopper'                     # originally BlockType.hopper
BlockOrItem.quartz_block = 'quartz_block'         # originally BlockType.quartz_block
BlockOrItem.quartz_stairs = 'quartz_stairs'       # originally BlockType.quartz_stairs
BlockOrItem.activator_rail = 'activator_rail'     # originally BlockType.activator_rail
BlockOrItem.dropper = 'dropper'                   # originally BlockType.dropper
BlockOrItem.stained_hardened_clay = 'stained_hardened_clay'# originally BlockType.stained_hardened_clay
BlockOrItem.stained_glass_pane = 'stained_glass_pane'# originally BlockType.stained_glass_pane
BlockOrItem.leaves2 = 'leaves2'                   # originally BlockType.leaves2
BlockOrItem.log2 = 'log2'                         # originally BlockType.log2
BlockOrItem.acacia_stairs = 'acacia_stairs'       # originally BlockType.acacia_stairs
BlockOrItem.dark_oak_stairs = 'dark_oak_stairs'   # originally BlockType.dark_oak_stairs
BlockOrItem.slime = 'slime'                       # originally BlockType.slime
BlockOrItem.barrier = 'barrier'                   # originally BlockType.barrier
BlockOrItem.iron_trapdoor = 'iron_trapdoor'       # originally BlockType.iron_trapdoor
BlockOrItem.prismarine = 'prismarine'             # originally BlockType.prismarine
BlockOrItem.sea_lantern = 'sea_lantern'           # originally BlockType.sea_lantern
BlockOrItem.hay_block = 'hay_block'               # originally BlockType.hay_block
BlockOrItem.carpet = 'carpet'                     # originally BlockType.carpet
BlockOrItem.hardened_clay = 'hardened_clay'       # originally BlockType.hardened_clay
BlockOrItem.coal_block = 'coal_block'             # originally BlockType.coal_block
BlockOrItem.packed_ice = 'packed_ice'             # originally BlockType.packed_ice
BlockOrItem.double_plant = 'double_plant'         # originally BlockType.double_plant
BlockOrItem.standing_banner = 'standing_banner'   # originally BlockType.standing_banner
BlockOrItem.wall_banner = 'wall_banner'           # originally BlockType.wall_banner
BlockOrItem.daylight_detector_inverted = 'daylight_detector_inverted'# originally BlockType.daylight_detector_inverted
BlockOrItem.red_sandstone = 'red_sandstone'       # originally BlockType.red_sandstone
BlockOrItem.red_sandstone_stairs = 'red_sandstone_stairs'# originally BlockType.red_sandstone_stairs
BlockOrItem.double_stone_slab2 = 'double_stone_slab2'# originally BlockType.double_stone_slab2
BlockOrItem.stone_slab2 = 'stone_slab2'           # originally BlockType.stone_slab2
BlockOrItem.spruce_fence_gate = 'spruce_fence_gate'# originally BlockType.spruce_fence_gate
BlockOrItem.birch_fence_gate = 'birch_fence_gate' # originally BlockType.birch_fence_gate
BlockOrItem.jungle_fence_gate = 'jungle_fence_gate'# originally BlockType.jungle_fence_gate
BlockOrItem.dark_oak_fence_gate = 'dark_oak_fence_gate'# originally BlockType.dark_oak_fence_gate
BlockOrItem.acacia_fence_gate = 'acacia_fence_gate'# originally BlockType.acacia_fence_gate
BlockOrItem.spruce_fence = 'spruce_fence'         # originally BlockType.spruce_fence
BlockOrItem.birch_fence = 'birch_fence'           # originally BlockType.birch_fence
BlockOrItem.jungle_fence = 'jungle_fence'         # originally BlockType.jungle_fence
BlockOrItem.dark_oak_fence = 'dark_oak_fence'     # originally BlockType.dark_oak_fence
BlockOrItem.acacia_fence = 'acacia_fence'         # originally BlockType.acacia_fence
BlockOrItem.spruce_door = 'spruce_door'           # originally BlockType.spruce_door
BlockOrItem.birch_door = 'birch_door'             # originally BlockType.birch_door
BlockOrItem.jungle_door = 'jungle_door'           # originally BlockType.jungle_door
BlockOrItem.acacia_door = 'acacia_door'           # originally BlockType.acacia_door
BlockOrItem.dark_oak_door = 'dark_oak_door'       # originally BlockType.dark_oak_door
BlockOrItem.end_rod = 'end_rod'                   # originally BlockType.end_rod
BlockOrItem.chorus_plant = 'chorus_plant'         # originally BlockType.chorus_plant
BlockOrItem.chorus_flower = 'chorus_flower'       # originally BlockType.chorus_flower
BlockOrItem.purpur_block = 'purpur_block'         # originally BlockType.purpur_block
BlockOrItem.purpur_pillar = 'purpur_pillar'       # originally BlockType.purpur_pillar
BlockOrItem.purpur_stairs = 'purpur_stairs'       # originally BlockType.purpur_stairs
BlockOrItem.purpur_double_slab = 'purpur_double_slab'# originally BlockType.purpur_double_slab
BlockOrItem.purpur_slab = 'purpur_slab'           # originally BlockType.purpur_slab
BlockOrItem.end_bricks = 'end_bricks'             # originally BlockType.end_bricks
BlockOrItem.beetroots = 'beetroots'               # originally BlockType.beetroots
BlockOrItem.grass_path = 'grass_path'             # originally BlockType.grass_path
BlockOrItem.end_gateway = 'end_gateway'           # originally BlockType.end_gateway
BlockOrItem.repeating_command_block = 'repeating_command_block'# originally BlockType.repeating_command_block
BlockOrItem.chain_command_block = 'chain_command_block'# originally BlockType.chain_command_block
BlockOrItem.frosted_ice = 'frosted_ice'           # originally BlockType.frosted_ice
BlockOrItem.magma = 'magma'                       # originally BlockType.magma
BlockOrItem.nether_wart_block = 'nether_wart_block'# originally BlockType.nether_wart_block
BlockOrItem.red_nether_brick = 'red_nether_brick' # originally BlockType.red_nether_brick
BlockOrItem.bone_block = 'bone_block'             # originally BlockType.bone_block
BlockOrItem.structure_void = 'structure_void'     # originally BlockType.structure_void
BlockOrItem.observer = 'observer'                 # originally BlockType.observer
BlockOrItem.white_shulker_box = 'white_shulker_box'# originally BlockType.white_shulker_box
BlockOrItem.orange_shulker_box = 'orange_shulker_box'# originally BlockType.orange_shulker_box
BlockOrItem.magenta_shulker_box = 'magenta_shulker_box'# originally BlockType.magenta_shulker_box
BlockOrItem.light_blue_shulker_box = 'light_blue_shulker_box'# originally BlockType.light_blue_shulker_box
BlockOrItem.yellow_shulker_box = 'yellow_shulker_box'# originally BlockType.yellow_shulker_box
BlockOrItem.lime_shulker_box = 'lime_shulker_box' # originally BlockType.lime_shulker_box
BlockOrItem.pink_shulker_box = 'pink_shulker_box' # originally BlockType.pink_shulker_box
BlockOrItem.gray_shulker_box = 'gray_shulker_box' # originally BlockType.gray_shulker_box
BlockOrItem.silver_shulker_box = 'silver_shulker_box'# originally BlockType.silver_shulker_box
BlockOrItem.cyan_shulker_box = 'cyan_shulker_box' # originally BlockType.cyan_shulker_box
BlockOrItem.purple_shulker_box = 'purple_shulker_box'# originally BlockType.purple_shulker_box
BlockOrItem.blue_shulker_box = 'blue_shulker_box' # originally BlockType.blue_shulker_box
BlockOrItem.brown_shulker_box = 'brown_shulker_box'# originally BlockType.brown_shulker_box
BlockOrItem.green_shulker_box = 'green_shulker_box'# originally BlockType.green_shulker_box
BlockOrItem.red_shulker_box = 'red_shulker_box'   # originally BlockType.red_shulker_box
BlockOrItem.black_shulker_box = 'black_shulker_box'# originally BlockType.black_shulker_box
BlockOrItem.structure_block = 'structure_block'   # originally BlockType.structure_block
BlockOrItem.iron_shovel = 'iron_shovel'           # originally ItemType.iron_shovel
BlockOrItem.iron_pickaxe = 'iron_pickaxe'         # originally ItemType.iron_pickaxe
BlockOrItem.iron_axe = 'iron_axe'                 # originally ItemType.iron_axe
BlockOrItem.flint_and_steel = 'flint_and_steel'   # originally ItemType.flint_and_steel
BlockOrItem.apple = 'apple'                       # originally ItemType.apple
BlockOrItem.bow = 'bow'                           # originally ItemType.bow
BlockOrItem.arrow = 'arrow'                       # originally ItemType.arrow
BlockOrItem.coal = 'coal'                         # originally ItemType.coal
BlockOrItem.diamond = 'diamond'                   # originally ItemType.diamond
BlockOrItem.iron_ingot = 'iron_ingot'             # originally ItemType.iron_ingot
BlockOrItem.gold_ingot = 'gold_ingot'             # originally ItemType.gold_ingot
BlockOrItem.iron_sword = 'iron_sword'             # originally ItemType.iron_sword
BlockOrItem.wooden_sword = 'wooden_sword'         # originally ItemType.wooden_sword
BlockOrItem.wooden_shovel = 'wooden_shovel'       # originally ItemType.wooden_shovel
BlockOrItem.wooden_pickaxe = 'wooden_pickaxe'     # originally ItemType.wooden_pickaxe
BlockOrItem.wooden_axe = 'wooden_axe'             # originally ItemType.wooden_axe
BlockOrItem.stone_sword = 'stone_sword'           # originally ItemType.stone_sword
BlockOrItem.stone_shovel = 'stone_shovel'         # originally ItemType.stone_shovel
BlockOrItem.stone_pickaxe = 'stone_pickaxe'       # originally ItemType.stone_pickaxe
BlockOrItem.stone_axe = 'stone_axe'               # originally ItemType.stone_axe
BlockOrItem.diamond_sword = 'diamond_sword'       # originally ItemType.diamond_sword
BlockOrItem.diamond_shovel = 'diamond_shovel'     # originally ItemType.diamond_shovel
BlockOrItem.diamond_pickaxe = 'diamond_pickaxe'   # originally ItemType.diamond_pickaxe
BlockOrItem.diamond_axe = 'diamond_axe'           # originally ItemType.diamond_axe
BlockOrItem.stick = 'stick'                       # originally ItemType.stick
BlockOrItem.bowl = 'bowl'                         # originally ItemType.bowl
BlockOrItem.mushroom_stew = 'mushroom_stew'       # originally ItemType.mushroom_stew
BlockOrItem.golden_sword = 'golden_sword'         # originally ItemType.golden_sword
BlockOrItem.golden_shovel = 'golden_shovel'       # originally ItemType.golden_shovel
BlockOrItem.golden_pickaxe = 'golden_pickaxe'     # originally ItemType.golden_pickaxe
BlockOrItem.golden_axe = 'golden_axe'             # originally ItemType.golden_axe
BlockOrItem.string = 'string'                     # originally ItemType.string
BlockOrItem.feather = 'feather'                   # originally ItemType.feather
BlockOrItem.gunpowder = 'gunpowder'               # originally ItemType.gunpowder
BlockOrItem.wooden_hoe = 'wooden_hoe'             # originally ItemType.wooden_hoe
BlockOrItem.stone_hoe = 'stone_hoe'               # originally ItemType.stone_hoe
BlockOrItem.iron_hoe = 'iron_hoe'                 # originally ItemType.iron_hoe
BlockOrItem.diamond_hoe = 'diamond_hoe'           # originally ItemType.diamond_hoe
BlockOrItem.golden_hoe = 'golden_hoe'             # originally ItemType.golden_hoe
BlockOrItem.wheat_seeds = 'wheat_seeds'           # originally ItemType.wheat_seeds
BlockOrItem.wheat = 'wheat'                       # originally ItemType.wheat
BlockOrItem.bread = 'bread'                       # originally ItemType.bread
BlockOrItem.leather_helmet = 'leather_helmet'     # originally ItemType.leather_helmet
BlockOrItem.leather_chestplate = 'leather_chestplate'# originally ItemType.leather_chestplate
BlockOrItem.leather_leggings = 'leather_leggings' # originally ItemType.leather_leggings
BlockOrItem.leather_boots = 'leather_boots'       # originally ItemType.leather_boots
BlockOrItem.chainmail_helmet = 'chainmail_helmet' # originally ItemType.chainmail_helmet
BlockOrItem.chainmail_chestplate = 'chainmail_chestplate'# originally ItemType.chainmail_chestplate
BlockOrItem.chainmail_leggings = 'chainmail_leggings'# originally ItemType.chainmail_leggings
BlockOrItem.chainmail_boots = 'chainmail_boots'   # originally ItemType.chainmail_boots
BlockOrItem.iron_helmet = 'iron_helmet'           # originally ItemType.iron_helmet
BlockOrItem.iron_chestplate = 'iron_chestplate'   # originally ItemType.iron_chestplate
BlockOrItem.iron_leggings = 'iron_leggings'       # originally ItemType.iron_leggings
BlockOrItem.iron_boots = 'iron_boots'             # originally ItemType.iron_boots
BlockOrItem.diamond_helmet = 'diamond_helmet'     # originally ItemType.diamond_helmet
BlockOrItem.diamond_chestplate = 'diamond_chestplate'# originally ItemType.diamond_chestplate
BlockOrItem.diamond_leggings = 'diamond_leggings' # originally ItemType.diamond_leggings
BlockOrItem.diamond_boots = 'diamond_boots'       # originally ItemType.diamond_boots
BlockOrItem.golden_helmet = 'golden_helmet'       # originally ItemType.golden_helmet
BlockOrItem.golden_chestplate = 'golden_chestplate'# originally ItemType.golden_chestplate
BlockOrItem.golden_leggings = 'golden_leggings'   # originally ItemType.golden_leggings
BlockOrItem.golden_boots = 'golden_boots'         # originally ItemType.golden_boots
BlockOrItem.flint = 'flint'                       # originally ItemType.flint
BlockOrItem.porkchop = 'porkchop'                 # originally ItemType.porkchop
BlockOrItem.cooked_porkchop = 'cooked_porkchop'   # originally ItemType.cooked_porkchop
BlockOrItem.painting = 'painting'                 # originally ItemType.painting
BlockOrItem.golden_apple = 'golden_apple'         # originally ItemType.golden_apple
BlockOrItem.sign = 'sign'                         # originally ItemType.sign
BlockOrItem.wooden_door = 'wooden_door'           # originally ItemType.wooden_door
BlockOrItem.bucket = 'bucket'                     # originally ItemType.bucket
BlockOrItem.bucket_ = 'bucket'                    # originally ItemType.bucket_
BlockOrItem.water_bucket = 'water_bucket'         # originally ItemType.water_bucket
BlockOrItem.lava_bucket = 'lava_bucket'           # originally ItemType.lava_bucket
BlockOrItem.minecart = 'minecart'                 # originally ItemType.minecart
BlockOrItem.saddle = 'saddle'                     # originally ItemType.saddle
BlockOrItem.iron_door = 'iron_door'               # originally ItemType.iron_door
BlockOrItem.redstone = 'redstone'                 # originally ItemType.redstone
BlockOrItem.snowball = 'snowball'                 # originally ItemType.snowball
BlockOrItem.boat = 'boat'                         # originally ItemType.boat
BlockOrItem.leather = 'leather'                   # originally ItemType.leather
BlockOrItem.milk_bucket = 'milk_bucket'           # originally ItemType.milk_bucket
BlockOrItem.brick = 'brick'                       # originally ItemType.brick
BlockOrItem.clay_ball = 'clay_ball'               # originally ItemType.clay_ball
BlockOrItem.reeds = 'reeds'                       # originally ItemType.reeds
BlockOrItem.paper = 'paper'                       # originally ItemType.paper
BlockOrItem.book = 'book'                         # originally ItemType.book
BlockOrItem.slime_ball = 'slime_ball'             # originally ItemType.slime_ball
BlockOrItem.chest_minecart = 'chest_minecart'     # originally ItemType.chest_minecart
BlockOrItem.furnace_minecart = 'furnace_minecart' # originally ItemType.furnace_minecart
BlockOrItem.egg = 'egg'                           # originally ItemType.egg
BlockOrItem.compass = 'compass'                   # originally ItemType.compass
BlockOrItem.fishing_rod = 'fishing_rod'           # originally ItemType.fishing_rod
BlockOrItem.clock = 'clock'                       # originally ItemType.clock
BlockOrItem.glowstone_dust = 'glowstone_dust'     # originally ItemType.glowstone_dust
BlockOrItem.fish = 'fish'                         # originally ItemType.fish
BlockOrItem.cooked_fish = 'cooked_fish'           # originally ItemType.cooked_fish
BlockOrItem.dye = 'dye'                           # originally ItemType.dye
BlockOrItem.bone = 'bone'                         # originally ItemType.bone
BlockOrItem.sugar = 'sugar'                       # originally ItemType.sugar
BlockOrItem.cake = 'cake'                         # originally ItemType.cake
BlockOrItem.bed = 'bed'                           # originally ItemType.bed
BlockOrItem.repeater = 'repeater'                 # originally ItemType.repeater
BlockOrItem.cookie = 'cookie'                     # originally ItemType.cookie
BlockOrItem.filled_map = 'filled_map'             # originally ItemType.filled_map
BlockOrItem.shears = 'shears'                     # originally ItemType.shears
BlockOrItem.melon = 'melon'                       # originally ItemType.melon
BlockOrItem.pumpkin_seeds = 'pumpkin_seeds'       # originally ItemType.pumpkin_seeds
BlockOrItem.melon_seeds = 'melon_seeds'           # originally ItemType.melon_seeds
BlockOrItem.beef = 'beef'                         # originally ItemType.beef
BlockOrItem.cooked_beef = 'cooked_beef'           # originally ItemType.cooked_beef
BlockOrItem.chicken = 'chicken'                   # originally ItemType.chicken
BlockOrItem.cooked_chicken = 'cooked_chicken'     # originally ItemType.cooked_chicken
BlockOrItem.rotten_flesh = 'rotten_flesh'         # originally ItemType.rotten_flesh
BlockOrItem.ender_pearl = 'ender_pearl'           # originally ItemType.ender_pearl
BlockOrItem.blaze_rod = 'blaze_rod'               # originally ItemType.blaze_rod
BlockOrItem.ghast_tear = 'ghast_tear'             # originally ItemType.ghast_tear
BlockOrItem.gold_nugget = 'gold_nugget'           # originally ItemType.gold_nugget
BlockOrItem.nether_wart = 'nether_wart'           # originally ItemType.nether_wart
BlockOrItem.potion = 'potion'                     # originally ItemType.potion
BlockOrItem.glass_bottle = 'glass_bottle'         # originally ItemType.glass_bottle
BlockOrItem.spider_eye = 'spider_eye'             # originally ItemType.spider_eye
BlockOrItem.fermented_spider_eye = 'fermented_spider_eye'# originally ItemType.fermented_spider_eye
BlockOrItem.blaze_powder = 'blaze_powder'         # originally ItemType.blaze_powder
BlockOrItem.magma_cream = 'magma_cream'           # originally ItemType.magma_cream
BlockOrItem.brewing_stand = 'brewing_stand'       # originally ItemType.brewing_stand
BlockOrItem.cauldron = 'cauldron'                 # originally ItemType.cauldron
BlockOrItem.ender_eye = 'ender_eye'               # originally ItemType.ender_eye
BlockOrItem.speckled_melon = 'speckled_melon'     # originally ItemType.speckled_melon
BlockOrItem.spawn_egg = 'spawn_egg'               # originally ItemType.spawn_egg
BlockOrItem.experience_bottle = 'experience_bottle'# originally ItemType.experience_bottle
BlockOrItem.fire_charge = 'fire_charge'           # originally ItemType.fire_charge
BlockOrItem.writable_book = 'writable_book'       # originally ItemType.writable_book
BlockOrItem.written_book = 'written_book'         # originally ItemType.written_book
BlockOrItem.emerald = 'emerald'                   # originally ItemType.emerald
BlockOrItem.item_frame = 'item_frame'             # originally ItemType.item_frame
BlockOrItem.flower_pot = 'flower_pot'             # originally ItemType.flower_pot
BlockOrItem.carrot = 'carrot'                     # originally ItemType.carrot
BlockOrItem.potato = 'potato'                     # originally ItemType.potato
BlockOrItem.baked_potato = 'baked_potato'         # originally ItemType.baked_potato
BlockOrItem.poisonous_potato = 'poisonous_potato' # originally ItemType.poisonous_potato
BlockOrItem.map = 'map'                           # originally ItemType.map
BlockOrItem.golden_carrot = 'golden_carrot'       # originally ItemType.golden_carrot
BlockOrItem.skull = 'skull'                       # originally ItemType.skull
BlockOrItem.carrot_on_a_stick = 'carrot_on_a_stick'# originally ItemType.carrot_on_a_stick
BlockOrItem.nether_star = 'nether_star'           # originally ItemType.nether_star
BlockOrItem.pumpkin_pie = 'pumpkin_pie'           # originally ItemType.pumpkin_pie
BlockOrItem.fireworks = 'fireworks'               # originally ItemType.fireworks
BlockOrItem.firework_charge = 'firework_charge'   # originally ItemType.firework_charge
BlockOrItem.enchanted_book = 'enchanted_book'     # originally ItemType.enchanted_book
BlockOrItem.comparator = 'comparator'             # originally ItemType.comparator
BlockOrItem.netherbrick = 'netherbrick'           # originally ItemType.netherbrick
BlockOrItem.quartz = 'quartz'                     # originally ItemType.quartz
BlockOrItem.tnt_minecart = 'tnt_minecart'         # originally ItemType.tnt_minecart
BlockOrItem.hopper_minecart = 'hopper_minecart'   # originally ItemType.hopper_minecart
BlockOrItem.prismarine_shard = 'prismarine_shard' # originally ItemType.prismarine_shard
BlockOrItem.prismarine_crystals = 'prismarine_crystals'# originally ItemType.prismarine_crystals
BlockOrItem.rabbit = 'rabbit'                     # originally ItemType.rabbit
BlockOrItem.cooked_rabbit = 'cooked_rabbit'       # originally ItemType.cooked_rabbit
BlockOrItem.rabbit_stew = 'rabbit_stew'           # originally ItemType.rabbit_stew
BlockOrItem.rabbit_foot = 'rabbit_foot'           # originally ItemType.rabbit_foot
BlockOrItem.rabbit_hide = 'rabbit_hide'           # originally ItemType.rabbit_hide
BlockOrItem.armor_stand = 'armor_stand'           # originally ItemType.armor_stand
BlockOrItem.iron_horse_armor = 'iron_horse_armor' # originally ItemType.iron_horse_armor
BlockOrItem.golden_horse_armor = 'golden_horse_armor'# originally ItemType.golden_horse_armor
BlockOrItem.diamond_horse_armor = 'diamond_horse_armor'# originally ItemType.diamond_horse_armor
BlockOrItem.lead = 'lead'                         # originally ItemType.lead
BlockOrItem.name_tag = 'name_tag'                 # originally ItemType.name_tag
BlockOrItem.command_block_minecart = 'command_block_minecart'# originally ItemType.command_block_minecart
BlockOrItem.mutton = 'mutton'                     # originally ItemType.mutton
BlockOrItem.cooked_mutton = 'cooked_mutton'       # originally ItemType.cooked_mutton
BlockOrItem.banner = 'banner'                     # originally ItemType.banner
BlockOrItem.spruce_door = 'spruce_door'           # originally ItemType.spruce_door
BlockOrItem.birch_door = 'birch_door'             # originally ItemType.birch_door
BlockOrItem.jungle_door = 'jungle_door'           # originally ItemType.jungle_door
BlockOrItem.acacia_door = 'acacia_door'           # originally ItemType.acacia_door
BlockOrItem.dark_oak_door = 'dark_oak_door'       # originally ItemType.dark_oak_door
BlockOrItem.chorus_fruit = 'chorus_fruit'         # originally ItemType.chorus_fruit
BlockOrItem.chorus_fruit_popped = 'chorus_fruit_popped'# originally ItemType.chorus_fruit_popped
BlockOrItem.beetroot = 'beetroot'                 # originally ItemType.beetroot
BlockOrItem.beetroot_seeds = 'beetroot_seeds'     # originally ItemType.beetroot_seeds
BlockOrItem.beetroot_soup = 'beetroot_soup'       # originally ItemType.beetroot_soup
BlockOrItem.dragon_breath = 'dragon_breath'       # originally ItemType.dragon_breath
BlockOrItem.splash_potion = 'splash_potion'       # originally ItemType.splash_potion
BlockOrItem.spectral_arrow = 'spectral_arrow'     # originally ItemType.spectral_arrow
BlockOrItem.tipped_arrow = 'tipped_arrow'         # originally ItemType.tipped_arrow
BlockOrItem.lingering_potion = 'lingering_potion' # originally ItemType.lingering_potion
BlockOrItem.shield = 'shield'                     # originally ItemType.shield
BlockOrItem.elytra = 'elytra'                     # originally ItemType.elytra
BlockOrItem.spruce_boat = 'spruce_boat'           # originally ItemType.spruce_boat
BlockOrItem.birch_boat = 'birch_boat'             # originally ItemType.birch_boat
BlockOrItem.jungle_boat = 'jungle_boat'           # originally ItemType.jungle_boat
BlockOrItem.acacia_boat = 'acacia_boat'           # originally ItemType.acacia_boat
BlockOrItem.dark_oak_boat = 'dark_oak_boat'       # originally ItemType.dark_oak_boat
BlockOrItem.totem_of_undying = 'totem_of_undying' # originally ItemType.totem_of_undying
BlockOrItem.shulker_shell = 'shulker_shell'       # originally ItemType.shulker_shell
BlockOrItem.iron_nugget = 'iron_nugget'           # originally ItemType.iron_nugget
BlockOrItem.record_13 = 'record_13'               # originally ItemType.record_13
BlockOrItem.record_cat = 'record_cat'             # originally ItemType.record_cat
BlockOrItem.record_blocks = 'record_blocks'       # originally ItemType.record_blocks
BlockOrItem.record_chirp = 'record_chirp'         # originally ItemType.record_chirp
BlockOrItem.record_far = 'record_far'             # originally ItemType.record_far
BlockOrItem.record_mall = 'record_mall'           # originally ItemType.record_mall
BlockOrItem.record_mellohi = 'record_mellohi'     # originally ItemType.record_mellohi
BlockOrItem.record_stal = 'record_stal'           # originally ItemType.record_stal
BlockOrItem.record_strad = 'record_strad'         # originally ItemType.record_strad
BlockOrItem.record_ward = 'record_ward'           # originally ItemType.record_ward
BlockOrItem.record_11 = 'record_11'               # originally ItemType.record_11
BlockOrItem.record_wait = 'record_wait'           # originally ItemType.record_wait
BlockOrItem._InitializeFacetMap(BlockOrItem._CF_pattern,
   BlockOrItem._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'BlockOrItem', BlockOrItem)
_module_typeBindings.BlockOrItem = BlockOrItem

# Union simple type: {http://ProjectMalmo.microsoft.com}SpawnableTypes
# superclasses pyxb.binding.datatypes.anySimpleType
class SpawnableTypes (pyxb.binding.basis.STD_union):

    """
            An entity that can be placed using the DrawingDecorator.
        """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpawnableTypes')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 821, 0)
    _Documentation = '\n            An entity that can be placed using the DrawingDecorator.\n        '

    _MemberTypes = ( EntityTypes, NonLivingEntityTypes, )
SpawnableTypes.ElderGuardian = 'ElderGuardian'    # originally EntityTypes.ElderGuardian
SpawnableTypes.WitherSkeleton = 'WitherSkeleton'  # originally EntityTypes.WitherSkeleton
SpawnableTypes.Stray = 'Stray'                    # originally EntityTypes.Stray
SpawnableTypes.Husk = 'Husk'                      # originally EntityTypes.Husk
SpawnableTypes.ZombieVillager = 'ZombieVillager'  # originally EntityTypes.ZombieVillager
SpawnableTypes.SkeletonHorse = 'SkeletonHorse'    # originally EntityTypes.SkeletonHorse
SpawnableTypes.ZombieHorse = 'ZombieHorse'        # originally EntityTypes.ZombieHorse
SpawnableTypes.EvocationIllager = 'EvocationIllager'# originally EntityTypes.EvocationIllager
SpawnableTypes.VindicationIllager = 'VindicationIllager'# originally EntityTypes.VindicationIllager
SpawnableTypes.Vex = 'Vex'                        # originally EntityTypes.Vex
SpawnableTypes.Creeper = 'Creeper'                # originally EntityTypes.Creeper
SpawnableTypes.Skeleton = 'Skeleton'              # originally EntityTypes.Skeleton
SpawnableTypes.Spider = 'Spider'                  # originally EntityTypes.Spider
SpawnableTypes.Giant = 'Giant'                    # originally EntityTypes.Giant
SpawnableTypes.Zombie = 'Zombie'                  # originally EntityTypes.Zombie
SpawnableTypes.Slime = 'Slime'                    # originally EntityTypes.Slime
SpawnableTypes.Ghast = 'Ghast'                    # originally EntityTypes.Ghast
SpawnableTypes.PigZombie = 'PigZombie'            # originally EntityTypes.PigZombie
SpawnableTypes.Enderman = 'Enderman'              # originally EntityTypes.Enderman
SpawnableTypes.CaveSpider = 'CaveSpider'          # originally EntityTypes.CaveSpider
SpawnableTypes.Silverfish = 'Silverfish'          # originally EntityTypes.Silverfish
SpawnableTypes.Blaze = 'Blaze'                    # originally EntityTypes.Blaze
SpawnableTypes.LavaSlime = 'LavaSlime'            # originally EntityTypes.LavaSlime
SpawnableTypes.EnderDragon = 'EnderDragon'        # originally EntityTypes.EnderDragon
SpawnableTypes.WitherBoss = 'WitherBoss'          # originally EntityTypes.WitherBoss
SpawnableTypes.Bat = 'Bat'                        # originally EntityTypes.Bat
SpawnableTypes.Witch = 'Witch'                    # originally EntityTypes.Witch
SpawnableTypes.Endermite = 'Endermite'            # originally EntityTypes.Endermite
SpawnableTypes.Guardian = 'Guardian'              # originally EntityTypes.Guardian
SpawnableTypes.Shulker = 'Shulker'                # originally EntityTypes.Shulker
SpawnableTypes.Donkey = 'Donkey'                  # originally EntityTypes.Donkey
SpawnableTypes.Mule = 'Mule'                      # originally EntityTypes.Mule
SpawnableTypes.Pig = 'Pig'                        # originally EntityTypes.Pig
SpawnableTypes.Sheep = 'Sheep'                    # originally EntityTypes.Sheep
SpawnableTypes.Cow = 'Cow'                        # originally EntityTypes.Cow
SpawnableTypes.Chicken = 'Chicken'                # originally EntityTypes.Chicken
SpawnableTypes.Squid = 'Squid'                    # originally EntityTypes.Squid
SpawnableTypes.Wolf = 'Wolf'                      # originally EntityTypes.Wolf
SpawnableTypes.MushroomCow = 'MushroomCow'        # originally EntityTypes.MushroomCow
SpawnableTypes.SnowMan = 'SnowMan'                # originally EntityTypes.SnowMan
SpawnableTypes.Ozelot = 'Ozelot'                  # originally EntityTypes.Ozelot
SpawnableTypes.VillagerGolem = 'VillagerGolem'    # originally EntityTypes.VillagerGolem
SpawnableTypes.Horse = 'Horse'                    # originally EntityTypes.Horse
SpawnableTypes.Rabbit = 'Rabbit'                  # originally EntityTypes.Rabbit
SpawnableTypes.PolarBear = 'PolarBear'            # originally EntityTypes.PolarBear
SpawnableTypes.Llama = 'Llama'                    # originally EntityTypes.Llama
SpawnableTypes.Villager = 'Villager'              # originally EntityTypes.Villager
SpawnableTypes.MinecartRideable = 'MinecartRideable'# originally NonLivingEntityTypes.MinecartRideable
SpawnableTypes.MinecartChest = 'MinecartChest'    # originally NonLivingEntityTypes.MinecartChest
SpawnableTypes.MinecartFurnace = 'MinecartFurnace'# originally NonLivingEntityTypes.MinecartFurnace
SpawnableTypes.MinecartTNT = 'MinecartTNT'        # originally NonLivingEntityTypes.MinecartTNT
SpawnableTypes.MinecartSpawner = 'MinecartSpawner'# originally NonLivingEntityTypes.MinecartSpawner
SpawnableTypes.MinecartHopper = 'MinecartHopper'  # originally NonLivingEntityTypes.MinecartHopper
SpawnableTypes.MinecartCommandBlock = 'MinecartCommandBlock'# originally NonLivingEntityTypes.MinecartCommandBlock
SpawnableTypes.Boat = 'Boat'                      # originally NonLivingEntityTypes.Boat
SpawnableTypes.ArmorStand = 'ArmorStand'          # originally NonLivingEntityTypes.ArmorStand
SpawnableTypes.ItemFrame = 'ItemFrame'            # originally NonLivingEntityTypes.ItemFrame
SpawnableTypes.EnderCrystal = 'EnderCrystal'      # originally NonLivingEntityTypes.EnderCrystal
SpawnableTypes.LeashKnot = 'LeashKnot'            # originally NonLivingEntityTypes.LeashKnot
SpawnableTypes.Painting = 'Painting'              # originally NonLivingEntityTypes.Painting
SpawnableTypes.PrimedTnt = 'PrimedTnt'            # originally NonLivingEntityTypes.PrimedTnt
SpawnableTypes.FallingSand = 'FallingSand'        # originally NonLivingEntityTypes.FallingSand
SpawnableTypes._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'SpawnableTypes', SpawnableTypes)
_module_typeBindings.SpawnableTypes = SpawnableTypes

# Union simple type: {http://ProjectMalmo.microsoft.com}Variation
# superclasses pyxb.binding.datatypes.anySimpleType
class Variation (pyxb.binding.basis.STD_union):

    """
        Variants of block types, item types, entities etc
      """

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Variation')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Types.xsd', 833, 0)
    _Documentation = '\n        Variants of block types, item types, entities etc\n      '

    _MemberTypes = ( StoneTypes, WoodTypes, FlowerTypes, EntityTypes, ShapeTypes, MonsterEggTypes, HalfTypes, NoteTypes, )
Variation.stone = 'stone'                         # originally StoneTypes.stone
Variation.granite = 'granite'                     # originally StoneTypes.granite
Variation.smooth_granite = 'smooth_granite'       # originally StoneTypes.smooth_granite
Variation.diorite = 'diorite'                     # originally StoneTypes.diorite
Variation.smooth_diorite = 'smooth_diorite'       # originally StoneTypes.smooth_diorite
Variation.andesite = 'andesite'                   # originally StoneTypes.andesite
Variation.smooth_andesite = 'smooth_andesite'     # originally StoneTypes.smooth_andesite
Variation.oak = 'oak'                             # originally WoodTypes.oak
Variation.spruce = 'spruce'                       # originally WoodTypes.spruce
Variation.birch = 'birch'                         # originally WoodTypes.birch
Variation.jungle = 'jungle'                       # originally WoodTypes.jungle
Variation.acacia = 'acacia'                       # originally WoodTypes.acacia
Variation.dark_oak = 'dark_oak'                   # originally WoodTypes.dark_oak
Variation.dandelion = 'dandelion'                 # originally FlowerTypes.dandelion
Variation.poppy = 'poppy'                         # originally FlowerTypes.poppy
Variation.blue_orchid = 'blue_orchid'             # originally FlowerTypes.blue_orchid
Variation.allium = 'allium'                       # originally FlowerTypes.allium
Variation.houstonia = 'houstonia'                 # originally FlowerTypes.houstonia
Variation.red_tulip = 'red_tulip'                 # originally FlowerTypes.red_tulip
Variation.orange_tulip = 'orange_tulip'           # originally FlowerTypes.orange_tulip
Variation.white_tulip = 'white_tulip'             # originally FlowerTypes.white_tulip
Variation.pink_tulip = 'pink_tulip'               # originally FlowerTypes.pink_tulip
Variation.oxeye_daisy = 'oxeye_daisy'             # originally FlowerTypes.oxeye_daisy
Variation.ElderGuardian = 'ElderGuardian'         # originally EntityTypes.ElderGuardian
Variation.WitherSkeleton = 'WitherSkeleton'       # originally EntityTypes.WitherSkeleton
Variation.Stray = 'Stray'                         # originally EntityTypes.Stray
Variation.Husk = 'Husk'                           # originally EntityTypes.Husk
Variation.ZombieVillager = 'ZombieVillager'       # originally EntityTypes.ZombieVillager
Variation.SkeletonHorse = 'SkeletonHorse'         # originally EntityTypes.SkeletonHorse
Variation.ZombieHorse = 'ZombieHorse'             # originally EntityTypes.ZombieHorse
Variation.EvocationIllager = 'EvocationIllager'   # originally EntityTypes.EvocationIllager
Variation.VindicationIllager = 'VindicationIllager'# originally EntityTypes.VindicationIllager
Variation.Vex = 'Vex'                             # originally EntityTypes.Vex
Variation.Creeper = 'Creeper'                     # originally EntityTypes.Creeper
Variation.Skeleton = 'Skeleton'                   # originally EntityTypes.Skeleton
Variation.Spider = 'Spider'                       # originally EntityTypes.Spider
Variation.Giant = 'Giant'                         # originally EntityTypes.Giant
Variation.Zombie = 'Zombie'                       # originally EntityTypes.Zombie
Variation.Slime = 'Slime'                         # originally EntityTypes.Slime
Variation.Ghast = 'Ghast'                         # originally EntityTypes.Ghast
Variation.PigZombie = 'PigZombie'                 # originally EntityTypes.PigZombie
Variation.Enderman = 'Enderman'                   # originally EntityTypes.Enderman
Variation.CaveSpider = 'CaveSpider'               # originally EntityTypes.CaveSpider
Variation.Silverfish = 'Silverfish'               # originally EntityTypes.Silverfish
Variation.Blaze = 'Blaze'                         # originally EntityTypes.Blaze
Variation.LavaSlime = 'LavaSlime'                 # originally EntityTypes.LavaSlime
Variation.EnderDragon = 'EnderDragon'             # originally EntityTypes.EnderDragon
Variation.WitherBoss = 'WitherBoss'               # originally EntityTypes.WitherBoss
Variation.Bat = 'Bat'                             # originally EntityTypes.Bat
Variation.Witch = 'Witch'                         # originally EntityTypes.Witch
Variation.Endermite = 'Endermite'                 # originally EntityTypes.Endermite
Variation.Guardian = 'Guardian'                   # originally EntityTypes.Guardian
Variation.Shulker = 'Shulker'                     # originally EntityTypes.Shulker
Variation.Donkey = 'Donkey'                       # originally EntityTypes.Donkey
Variation.Mule = 'Mule'                           # originally EntityTypes.Mule
Variation.Pig = 'Pig'                             # originally EntityTypes.Pig
Variation.Sheep = 'Sheep'                         # originally EntityTypes.Sheep
Variation.Cow = 'Cow'                             # originally EntityTypes.Cow
Variation.Chicken = 'Chicken'                     # originally EntityTypes.Chicken
Variation.Squid = 'Squid'                         # originally EntityTypes.Squid
Variation.Wolf = 'Wolf'                           # originally EntityTypes.Wolf
Variation.MushroomCow = 'MushroomCow'             # originally EntityTypes.MushroomCow
Variation.SnowMan = 'SnowMan'                     # originally EntityTypes.SnowMan
Variation.Ozelot = 'Ozelot'                       # originally EntityTypes.Ozelot
Variation.VillagerGolem = 'VillagerGolem'         # originally EntityTypes.VillagerGolem
Variation.Horse = 'Horse'                         # originally EntityTypes.Horse
Variation.Rabbit = 'Rabbit'                       # originally EntityTypes.Rabbit
Variation.PolarBear = 'PolarBear'                 # originally EntityTypes.PolarBear
Variation.Llama = 'Llama'                         # originally EntityTypes.Llama
Variation.Villager = 'Villager'                   # originally EntityTypes.Villager
Variation.north_south = 'north_south'             # originally ShapeTypes.north_south
Variation.east_west = 'east_west'                 # originally ShapeTypes.east_west
Variation.north_east = 'north_east'               # originally ShapeTypes.north_east
Variation.north_west = 'north_west'               # originally ShapeTypes.north_west
Variation.south_east = 'south_east'               # originally ShapeTypes.south_east
Variation.south_west = 'south_west'               # originally ShapeTypes.south_west
Variation.ascending_east = 'ascending_east'       # originally ShapeTypes.ascending_east
Variation.ascending_west = 'ascending_west'       # originally ShapeTypes.ascending_west
Variation.ascending_north = 'ascending_north'     # originally ShapeTypes.ascending_north
Variation.ascending_south = 'ascending_south'     # originally ShapeTypes.ascending_south
Variation.cobblestone = 'cobblestone'             # originally MonsterEggTypes.cobblestone
Variation.stone_brick = 'stone_brick'             # originally MonsterEggTypes.stone_brick
Variation.mossy_brick = 'mossy_brick'             # originally MonsterEggTypes.mossy_brick
Variation.cracked_brick = 'cracked_brick'         # originally MonsterEggTypes.cracked_brick
Variation.chiseled_brick = 'chiseled_brick'       # originally MonsterEggTypes.chiseled_brick
Variation.top = 'top'                             # originally HalfTypes.top
Variation.bottom = 'bottom'                       # originally HalfTypes.bottom
Variation.head = 'head'                           # originally HalfTypes.head
Variation.foot = 'foot'                           # originally HalfTypes.foot
Variation.upper = 'upper'                         # originally HalfTypes.upper
Variation.lower = 'lower'                         # originally HalfTypes.lower
Variation.F_sharp_3 = 'F_sharp_3'                 # originally NoteTypes.F_sharp_3
Variation.G3 = 'G3'                               # originally NoteTypes.G3
Variation.G_sharp_3 = 'G_sharp_3'                 # originally NoteTypes.G_sharp_3
Variation.A3 = 'A3'                               # originally NoteTypes.A3
Variation.A_sharp_3 = 'A_sharp_3'                 # originally NoteTypes.A_sharp_3
Variation.B3 = 'B3'                               # originally NoteTypes.B3
Variation.C4 = 'C4'                               # originally NoteTypes.C4
Variation.C_sharp_4 = 'C_sharp_4'                 # originally NoteTypes.C_sharp_4
Variation.D4 = 'D4'                               # originally NoteTypes.D4
Variation.D_sharp_4 = 'D_sharp_4'                 # originally NoteTypes.D_sharp_4
Variation.E4 = 'E4'                               # originally NoteTypes.E4
Variation.F4 = 'F4'                               # originally NoteTypes.F4
Variation.F_sharp_4 = 'F_sharp_4'                 # originally NoteTypes.F_sharp_4
Variation.G4 = 'G4'                               # originally NoteTypes.G4
Variation.G_sharp_4 = 'G_sharp_4'                 # originally NoteTypes.G_sharp_4
Variation.A4 = 'A4'                               # originally NoteTypes.A4
Variation.A_sharp_4 = 'A_sharp_4'                 # originally NoteTypes.A_sharp_4
Variation.B4 = 'B4'                               # originally NoteTypes.B4
Variation.C5 = 'C5'                               # originally NoteTypes.C5
Variation.C_sharp_5 = 'C_sharp_5'                 # originally NoteTypes.C_sharp_5
Variation.D5 = 'D5'                               # originally NoteTypes.D5
Variation.D_sharp_5 = 'D_sharp_5'                 # originally NoteTypes.D_sharp_5
Variation.E5 = 'E5'                               # originally NoteTypes.E5
Variation.F5 = 'F5'                               # originally NoteTypes.F5
Variation.F_sharp_5 = 'F_sharp_5'                 # originally NoteTypes.F_sharp_5
Variation._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'Variation', Variation)
_module_typeBindings.Variation = Variation

# List simple type: {http://ProjectMalmo.microsoft.com}BlockOrItemList
# superclasses pyxb.binding.datatypes.anySimpleType
class BlockOrItemList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of BlockOrItem."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockOrItemList')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 226, 2)
    _Documentation = None

    _ItemType = BlockOrItem
BlockOrItemList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'BlockOrItemList', BlockOrItemList)
_module_typeBindings.BlockOrItemList = BlockOrItemList

# List simple type: {http://ProjectMalmo.microsoft.com}VariantList
# superclasses pyxb.binding.datatypes.anySimpleType
class VariantList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of Variation."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VariantList')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 234, 2)
    _Documentation = None

    _ItemType = Variation
VariantList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'VariantList', VariantList)
_module_typeBindings.VariantList = VariantList

# List simple type: {http://ProjectMalmo.microsoft.com}CommandList
# superclasses pyxb.binding.datatypes.anySimpleType
class CommandList (pyxb.binding.basis.STD_list):

    """Simple type that is a list of Command."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CommandList')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1499, 2)
    _Documentation = None

    _ItemType = Command
CommandList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'CommandList', CommandList)
_module_typeBindings.CommandList = CommandList

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """
              A mission definition has a description, a starting point and some kind of scoring system. It also defines the agents and roles involved.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 20, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModSettings uses Python identifier ModSettings
    __ModSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModSettings'), 'ModSettings', '__httpProjectMalmo_microsoft_com_CTD_ANON_httpProjectMalmo_microsoft_comModSettings', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 31, 4), )

    
    ModSettings = property(__ModSettings.value, __ModSettings.set, None, '\n              Settings here are independent of the mission but affect how it is run. \n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}ServerSection uses Python identifier ServerSection
    __ServerSection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ServerSection'), 'ServerSection', '__httpProjectMalmo_microsoft_com_CTD_ANON_httpProjectMalmo_microsoft_comServerSection', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 67, 4), )

    
    ServerSection = property(__ServerSection.value, __ServerSection.set, None, '\n              The Minecraft server stores the world and keeps track of the blocks that have changed. Each Minecraft client connects to the server when it needs to\n              change blocks or ask what blocks are present, for example. With multi-agent missions there may be many clients, all connected to a single server.\n              \n              Settings here affect the shared world that the clients experience.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}AgentSection uses Python identifier AgentSection
    __AgentSection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentSection'), 'AgentSection', '__httpProjectMalmo_microsoft_com_CTD_ANON_httpProjectMalmo_microsoft_comAgentSection', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 84, 4), )

    
    AgentSection = property(__AgentSection.value, __AgentSection.set, None, '\n              Each agent is specified in one of these sections, detailing the way they experience the world and the actions they can perform to interact with it.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}About uses Python identifier About
    __About = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'About'), 'About', '__httpProjectMalmo_microsoft_com_CTD_ANON_httpProjectMalmo_microsoft_comAbout', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 100, 4), )

    
    About = property(__About.value, __About.set, None, '\n              Description of the mission.\n            ')

    
    # Attribute SchemaVersion uses Python identifier SchemaVersion
    __SchemaVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SchemaVersion'), 'SchemaVersion', '__httpProjectMalmo_microsoft_com_CTD_ANON_SchemaVersion', pyxb.binding.datatypes.token)
    __SchemaVersion._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 27, 12)
    __SchemaVersion._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 27, 12)
    
    SchemaVersion = property(__SchemaVersion.value, __SchemaVersion.set, None, None)

    _ElementMap.update({
        __ModSettings.name() : __ModSettings,
        __ServerSection.name() : __ServerSection,
        __AgentSection.name() : __AgentSection,
        __About.name() : __About
    })
    _AttributeMap.update({
        __SchemaVersion.name() : __SchemaVersion
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """
              Settings here are independent of the mission but affect how it is run. 
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 37, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}MsPerTick uses Python identifier MsPerTick
    __MsPerTick = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MsPerTick'), 'MsPerTick', '__httpProjectMalmo_microsoft_com_CTD_ANON__httpProjectMalmo_microsoft_comMsPerTick', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 39, 16), )

    
    MsPerTick = property(__MsPerTick.value, __MsPerTick.set, None, '\n                            Use this to overclock Minecraft - to make Minecraft time run faster than normal.\n                        \n                            This sets the delay that Minecraft uses between world ticks, in milliseconds. The default is 50ms per tick (20Hz).\n                            Double-speed would be 25ms/tick (40Hz). For best results, stick to reasonable values (that the server \n                            might be able to cope with), which also result in a whole number of ticks per second.\n                        ')

    
    # Element {http://ProjectMalmo.microsoft.com}PrioritiseOffscreenRendering uses Python identifier PrioritiseOffscreenRendering
    __PrioritiseOffscreenRendering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PrioritiseOffscreenRendering'), 'PrioritiseOffscreenRendering', '__httpProjectMalmo_microsoft_com_CTD_ANON__httpProjectMalmo_microsoft_comPrioritiseOffscreenRendering', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 55, 16), )

    
    PrioritiseOffscreenRendering = property(__PrioritiseOffscreenRendering.value, __PrioritiseOffscreenRendering.set, None, '\n                            If set to true, the Minecraft window will only be updated once per second during the run of the mission. This will allow the\n                            render pipeline to run much faster, resulting in the platform receiving frames at a higher rate.\n                        ')

    _ElementMap.update({
        __MsPerTick.name() : __MsPerTick,
        __PrioritiseOffscreenRendering.name() : __PrioritiseOffscreenRendering
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """
              The Minecraft server stores the world and keeps track of the blocks that have changed. Each Minecraft client connects to the server when it needs to
              change blocks or ask what blocks are present, for example. With multi-agent missions there may be many clients, all connected to a single server.
              
              Settings here affect the shared world that the clients experience.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 76, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ServerInitialConditions uses Python identifier ServerInitialConditions
    __ServerInitialConditions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ServerInitialConditions'), 'ServerInitialConditions', '__httpProjectMalmo_microsoft_com_CTD_ANON_2_httpProjectMalmo_microsoft_comServerInitialConditions', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 147, 4), )

    
    ServerInitialConditions = property(__ServerInitialConditions.value, __ServerInitialConditions.set, None, '\n              Defines the initial conditions of the world.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}ServerHandlers uses Python identifier ServerHandlers
    __ServerHandlers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ServerHandlers'), 'ServerHandlers', '__httpProjectMalmo_microsoft_com_CTD_ANON_2_httpProjectMalmo_microsoft_comServerHandlers', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 414, 4), )

    
    ServerHandlers = property(__ServerHandlers.value, __ServerHandlers.set, None, '\n              Defines the Mission Handlers block for the server.\n            ')

    _ElementMap.update({
        __ServerInitialConditions.name() : __ServerInitialConditions,
        __ServerHandlers.name() : __ServerHandlers
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """
              Description of the mission.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 106, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Summary uses Python identifier Summary
    __Summary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Summary'), 'Summary', '__httpProjectMalmo_microsoft_com_CTD_ANON_3_httpProjectMalmo_microsoft_comSummary', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 108, 16), )

    
    Summary = property(__Summary.value, __Summary.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Description'), 'Description', '__httpProjectMalmo_microsoft_com_CTD_ANON_3_httpProjectMalmo_microsoft_comDescription', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 109, 16), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __Summary.name() : __Summary,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """
              Defines the initial conditions of the player. This includes the location and the contents of their inventory.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 120, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Placement uses Python identifier Placement
    __Placement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Placement'), 'Placement', '__httpProjectMalmo_microsoft_com_CTD_ANON_4_httpProjectMalmo_microsoft_comPlacement', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 122, 16), )

    
    Placement = property(__Placement.value, __Placement.set, None, "\n                      The player's starting location; if unspecified, will be the game's randomly-chosen spawn point.\n                    ")

    
    # Element {http://ProjectMalmo.microsoft.com}Inventory uses Python identifier Inventory
    __Inventory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Inventory'), 'Inventory', '__httpProjectMalmo_microsoft_com_CTD_ANON_4_httpProjectMalmo_microsoft_comInventory', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 129, 16), )

    
    Inventory = property(__Inventory.value, __Inventory.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}EnderBoxInventory uses Python identifier EnderBoxInventory
    __EnderBoxInventory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnderBoxInventory'), 'EnderBoxInventory', '__httpProjectMalmo_microsoft_com_CTD_ANON_4_httpProjectMalmo_microsoft_comEnderBoxInventory', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 136, 16), )

    
    EnderBoxInventory = property(__EnderBoxInventory.value, __EnderBoxInventory.set, None, None)

    _ElementMap.update({
        __Placement.name() : __Placement,
        __Inventory.name() : __Inventory,
        __EnderBoxInventory.name() : __EnderBoxInventory
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 130, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}InventoryObject uses Python identifier InventoryObject
    __InventoryObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InventoryObject'), 'InventoryObject', '__httpProjectMalmo_microsoft_com_CTD_ANON_5_httpProjectMalmo_microsoft_comInventoryObject', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 266, 4), )

    
    InventoryObject = property(__InventoryObject.value, __InventoryObject.set, None, '\n              Defines an item or block in the inventory.\n            ')

    _ElementMap.update({
        __InventoryObject.name() : __InventoryObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 137, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}InventoryObject uses Python identifier InventoryObject
    __InventoryObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InventoryObject'), 'InventoryObject', '__httpProjectMalmo_microsoft_com_CTD_ANON_6_httpProjectMalmo_microsoft_comInventoryObject', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 266, 4), )

    
    InventoryObject = property(__InventoryObject.value, __InventoryObject.set, None, '\n              Defines an item or block in the inventory.\n            ')

    _ElementMap.update({
        __InventoryObject.name() : __InventoryObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """
              Defines the initial conditions of the world.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 153, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}AllowSpawning uses Python identifier AllowSpawning
    __AllowSpawning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AllowSpawning'), 'AllowSpawning', '__httpProjectMalmo_microsoft_com_CTD_ANON_7_httpProjectMalmo_microsoft_comAllowSpawning', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 157, 16), )

    
    AllowSpawning = property(__AllowSpawning.value, __AllowSpawning.set, None, '\n                      Set this to true to allow mobs (animals and hostiles) to spawn during a mission.\n                    ')

    
    # Element {http://ProjectMalmo.microsoft.com}AllowedMobs uses Python identifier AllowedMobs
    __AllowedMobs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AllowedMobs'), 'AllowedMobs', '__httpProjectMalmo_microsoft_com_CTD_ANON_7_httpProjectMalmo_microsoft_comAllowedMobs', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 164, 16), )

    
    AllowedMobs = property(__AllowedMobs.value, __AllowedMobs.set, None, '\n                      If AllowSpawning is set to true, use this to specify a list of the allowed mobs. Only those mobs which are on the list will be allowed to spawn. If no list is specified, normal spawning behaviour will take place. Note that these settings *do* effect mob_spawner blocks.\n                    ')

    
    # Element {http://ProjectMalmo.microsoft.com}Time uses Python identifier Time
    __Time = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Time'), 'Time', '__httpProjectMalmo_microsoft_com_CTD_ANON_7_httpProjectMalmo_microsoft_comTime', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 178, 4), )

    
    Time = property(__Time.value, __Time.set, None, '\n            Minecraft has a day-night cycle that affects the light levels and the appearance of hostile mobs.\n          ')

    
    # Element {http://ProjectMalmo.microsoft.com}Weather uses Python identifier Weather
    __Weather = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Weather'), 'Weather', '__httpProjectMalmo_microsoft_com_CTD_ANON_7_httpProjectMalmo_microsoft_comWeather', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 220, 4), )

    
    Weather = property(__Weather.value, __Weather.set, None, '\n              Specifies the type of weather at the start of the mission.\n\n              "normal" = let Minecraft do what it normally does\n              \n              "clear" = start with clear weather\n              \n              "rain" = start with rain (or snow, in a cold biome)\n              \n              "thunder" = start with thundery weather\n            ')

    _ElementMap.update({
        __AllowSpawning.name() : __AllowSpawning,
        __AllowedMobs.name() : __AllowedMobs,
        __Time.name() : __Time,
        __Weather.name() : __Weather
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """
            Minecraft has a day-night cycle that affects the light levels and the appearance of hostile mobs.
          """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 184, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}AllowPassageOfTime uses Python identifier AllowPassageOfTime
    __AllowPassageOfTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AllowPassageOfTime'), 'AllowPassageOfTime', '__httpProjectMalmo_microsoft_com_CTD_ANON_8_httpProjectMalmo_microsoft_comAllowPassageOfTime', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 187, 16), )

    
    AllowPassageOfTime = property(__AllowPassageOfTime.value, __AllowPassageOfTime.set, None, '\n                      Set this to false to stop the day-night cycle. The sun position and weather will remain fixed for the duration of the mission.\n                    ')

    
    # Element {http://ProjectMalmo.microsoft.com}StartTime uses Python identifier StartTime
    __StartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartTime'), 'StartTime', '__httpProjectMalmo_microsoft_com_CTD_ANON_8_httpProjectMalmo_microsoft_comStartTime', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 198, 4), )

    
    StartTime = property(__StartTime.value, __StartTime.set, None, '\n          Specifies the time of day at the start of the mission, in thousandths of an hour.\n          \n          0 = dawn\n          \n          6000 = noon\n          \n          18000 = midnight\n          \n          Time in Minecraft travels (by default) 72 times faster than real-time. Thus a Minecraft day lasts 20 minutes.\n        ')

    _ElementMap.update({
        __AllowPassageOfTime.name() : __AllowPassageOfTime,
        __StartTime.name() : __StartTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """
              Defines the Mission Handlers block for an individual agent.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 409, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}DepthProducer uses Python identifier DepthProducer
    __DepthProducer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DepthProducer'), 'DepthProducer', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comDepthProducer', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1095, 2), )

    
    DepthProducer = property(__DepthProducer.value, __DepthProducer.set, None, '\n        Requests that 32bpp depth frames be sent.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}LuminanceProducer uses Python identifier LuminanceProducer
    __LuminanceProducer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LuminanceProducer'), 'LuminanceProducer', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comLuminanceProducer', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1109, 2), )

    
    LuminanceProducer = property(__LuminanceProducer.value, __LuminanceProducer.set, None, '\n        Requests an 8bpp grayscale image.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ColourMapProducer uses Python identifier ColourMapProducer
    __ColourMapProducer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ColourMapProducer'), 'ColourMapProducer', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comColourMapProducer', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1134, 2), )

    
    ColourMapProducer = property(__ColourMapProducer.value, __ColourMapProducer.set, None, '\n        Requests a 24bpp colour map - each object/entity represented by a solid block of colour.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}VideoProducer uses Python identifier VideoProducer
    __VideoProducer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VideoProducer'), 'VideoProducer', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comVideoProducer', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1152, 2), )

    
    VideoProducer = property(__VideoProducer.value, __VideoProducer.set, None, '\n        Requests that video frames be sent.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ContinuousMovementCommands uses Python identifier ContinuousMovementCommands
    __ContinuousMovementCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ContinuousMovementCommands'), 'ContinuousMovementCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comContinuousMovementCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1524, 2), )

    
    ContinuousMovementCommands = property(__ContinuousMovementCommands.value, __ContinuousMovementCommands.set, None, '\n        When present, the Mod will accept commands that control smooth movement.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards with normal speed.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}AbsoluteMovementCommands uses Python identifier AbsoluteMovementCommands
    __AbsoluteMovementCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommands'), 'AbsoluteMovementCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comAbsoluteMovementCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1558, 2), )

    
    AbsoluteMovementCommands = property(__AbsoluteMovementCommands.value, __AbsoluteMovementCommands.set, None, '\n        When present, the Mod will accept commands to set the player\'s position and orientation directly.\n\n        Commands take the form of "verb <value>" e.g. "{{{tpx 13}}}" to set the x-coordinate to 13.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}DiscreteMovementCommands uses Python identifier DiscreteMovementCommands
    __DiscreteMovementCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommands'), 'DiscreteMovementCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comDiscreteMovementCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1583, 2), )

    
    DiscreteMovementCommands = property(__DiscreteMovementCommands.value, __DiscreteMovementCommands.set, None, '\n        When present, the Mod will accept commands that control movement in discrete jumps.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards one square.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}InventoryCommands uses Python identifier InventoryCommands
    __InventoryCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InventoryCommands'), 'InventoryCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comInventoryCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1610, 2), )

    
    InventoryCommands = property(__InventoryCommands.value, __InventoryCommands.set, None, "\n        When present, the Mod will accept commands that control the player's inventory.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}SimpleCraftCommands uses Python identifier SimpleCraftCommands
    __SimpleCraftCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommands'), 'SimpleCraftCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comSimpleCraftCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1633, 2), )

    
    SimpleCraftCommands = property(__SimpleCraftCommands.value, __SimpleCraftCommands.set, None, '\n        When present, the Mod will accept simple commands that implement a basic form of crafting.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ChatCommands uses Python identifier ChatCommands
    __ChatCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChatCommands'), 'ChatCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comChatCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1656, 2), )

    
    ChatCommands = property(__ChatCommands.value, __ChatCommands.set, None, '\n        When present, the Mod will accept commands that send chat messages to the other players.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}MissionQuitCommands uses Python identifier MissionQuitCommands
    __MissionQuitCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommands'), 'MissionQuitCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comMissionQuitCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1679, 2), )

    
    MissionQuitCommands = property(__MissionQuitCommands.value, __MissionQuitCommands.set, None, '\n        When present, the Mod will accept a command that quits the mission.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}TurnBasedCommands uses Python identifier TurnBasedCommands
    __TurnBasedCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TurnBasedCommands'), 'TurnBasedCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comTurnBasedCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1703, 2), )

    
    TurnBasedCommands = property(__TurnBasedCommands.value, __TurnBasedCommands.set, None, '\n        Allows a user to specify that certain commands must be sent on a turn-by-turn basis - ie, in a multi-agent mission, placing the {{{DiscreteMovementCommand}}} handler inside the TurnBasedCommands section will mean that each agent must take it in turns to send a discrete movement command. See turn_based_test.py in the Python Samples for a demonstration/explanation of this.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}HumanLevelCommands uses Python identifier HumanLevelCommands
    __HumanLevelCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HumanLevelCommands'), 'HumanLevelCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comHumanLevelCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1721, 2), )

    
    HumanLevelCommands = property(__HumanLevelCommands.value, __HumanLevelCommands.set, None, '\n        When present, the Mod will accept commands on the level of mouse and keyboard events.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromRecentCommands uses Python identifier ObservationFromRecentCommands
    __ObservationFromRecentCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRecentCommands'), 'ObservationFromRecentCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromRecentCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1746, 2), )

    
    ObservationFromRecentCommands = property(__ObservationFromRecentCommands.value, __ObservationFromRecentCommands.set, None, '\n        When present, the Mod will return observations that say what commands have been acted on since the last report, in the JSON element {{{CommandsSinceLastObservation}}}.\n\n        Note that the commands returned might not yet have taken effect, depending on the command and the way in which Minecraft responds to it -\n        but they will have been processed by the command handling chain.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromTurnScheduler uses Python identifier ObservationFromTurnScheduler
    __ObservationFromTurnScheduler = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromTurnScheduler'), 'ObservationFromTurnScheduler', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromTurnScheduler', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1758, 2), )

    
    ObservationFromTurnScheduler = property(__ObservationFromTurnScheduler.value, __ObservationFromTurnScheduler.set, None, "\n        Automatically addd by Malmo when the user specifies the {{{TurnBasedCommands}}} handler. This provides vital observations back to the agent to allow them to make use of the turn scheduler. When it is the agent's turn, the JSON will contain {{{turn_number}}} - an integer which tracks the number of turns the agent has taken, and {{{turn_key}}} - a one-shot key which must be passed back to Malmo as a parameter in {{{sendCommand}}} in order for the command to be accepted.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromSubgoalPositionList uses Python identifier ObservationFromSubgoalPositionList
    __ObservationFromSubgoalPositionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSubgoalPositionList'), 'ObservationFromSubgoalPositionList', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromSubgoalPositionList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1767, 2), )

    
    ObservationFromSubgoalPositionList = property(__ObservationFromSubgoalPositionList.value, __ObservationFromSubgoalPositionList.set, None, '\n        When present, the Mod will return observations that indicate the direction to follow to the next subgoal.\n        The value to turn by is returned in the JSON element {{{yawDelta}}}.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromHotBar uses Python identifier ObservationFromHotBar
    __ObservationFromHotBar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHotBar'), 'ObservationFromHotBar', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromHotBar', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1781, 2), )

    
    ObservationFromHotBar = property(__ObservationFromHotBar.value, __ObservationFromHotBar.set, None, '\n        When present, the Mod will return observations that say what is in the hotbar.\n\n        Up to four values are returned for each slot, if not empty: e.g. {{{Hotbar_1_size}}} and {{{Hotbar_1_item}}} containing the number and\n        type of the item(s) in the slot, respectively, and {{{Hotbar_1_colour}}} and  {{{Hotbar_1_variant}}} if the item has a colour/variation. Hotbar slots are numbered 0 to 8 inclusive.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromFullStats uses Python identifier ObservationFromFullStats
    __ObservationFromFullStats = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullStats'), 'ObservationFromFullStats', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromFullStats', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1793, 2), )

    
    ObservationFromFullStats = property(__ObservationFromFullStats.value, __ObservationFromFullStats.set, None, '\n        When present, the Mod will return several observations:\n\n        * Achievement statistics: {{{DistanceTravelled}}}, {{{TimeAlive}}}, {{{MobsKilled}}}, {{{PlayersKilled}}}, {{{DamageTaken}}}, {{{DamageDealt}}}\n        * Life statistics: {{{Life}}}, {{{Score}}}, {{{Food}}}, {{{Air}}}, {{{XP}}}, {{{IsAlive}}}, {{{Name}}}\n        * Position statistics: {{{XPos}}}, {{{YPos}}}, {{{ZPos}}}, {{{Pitch}}}, {{{Yaw}}}\n        * Environment statistics: {{{WorldTime}}} - current time in ticks, {{{TotalTime}}} - total world time, unaffected by ServerInitialConditions\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromHuman uses Python identifier ObservationFromHuman
    __ObservationFromHuman = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHuman'), 'ObservationFromHuman', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromHuman', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1807, 2), )

    
    ObservationFromHuman = property(__ObservationFromHuman.value, __ObservationFromHuman.set, None, '\n        When present, the Mod will return low-level keyboard and mouse events.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromSystem uses Python identifier ObservationFromSystem
    __ObservationFromSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSystem'), 'ObservationFromSystem', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromSystem', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1816, 2), )

    
    ObservationFromSystem = property(__ObservationFromSystem.value, __ObservationFromSystem.set, None, '\n        When present, the Mod will return information on the current performance of the Minecraft system - eg tick speeds, etc.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromRay uses Python identifier ObservationFromRay
    __ObservationFromRay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRay'), 'ObservationFromRay', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromRay', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1825, 2), )

    
    ObservationFromRay = property(__ObservationFromRay.value, __ObservationFromRay.set, None, '\n        When present, the Mod will return a JSON object called "LineOfSight", containing observations about the block or entity which is currently in the centre of the screen:\n\n        * Hit details: {{{hitType}}} - will be "block" for a block, "entity" for an entity (eg spider, rabbit etc) or "item" for a free-floating item that can be picked up. {{{inRange}}} will be true if the block/entity is within the agent\'s reach - ie attacking or using will have an effect on the object. {{{distance}}} gives the straight-line distance from the agent.\n        * Position: {{{x}}}, {{{y}}}, {{{z}}} - in the case of block hits, will be the precise point when the ray intercepts the block. {{{yaw}}}, {{{pitch}}} are also added for entities.\n        * Type information: {{{type}}}, {{{colour}}}, {{{variant}}}, {{{facing}}}\n        * Extra properties: in the case of block types, any extra properties will be returned by their minecraft name, prefixed with "prop_" (eg, for leaves, "prop_decayable" and "prop_check_decay") - this is the same data as can be seen by exploring Minecraft with the F3 debug information displayed. For floating items, the stack size is returned in {{{stackSize}}}\n        * NBTTagCompound: for tile entity blocks, optionally returns a json object called "NBTTagCompound" which contains the entity\'s entire NBTTagCompound - eg useful for reading the text off signs, etc. Set {{{includeNBT}}} to true to receive this data.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromFullInventory uses Python identifier ObservationFromFullInventory
    __ObservationFromFullInventory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullInventory'), 'ObservationFromFullInventory', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromFullInventory', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1842, 2), )

    
    ObservationFromFullInventory = property(__ObservationFromFullInventory.value, __ObservationFromFullInventory.set, None, '\n        When present, the Mod will return observations that describe the contents of the player\'s inventory.\n        There are two modes - "flat" (the default) is provided for backwards compatibility, and behaves like this:\n\n        The inventory contents are returned in a flat format in the root of the json observations.\n        Up to four values are returned for each slot, if not empty: e.g. {{{InventorySlot_0_size}}} and {{{InventorySlot_0_item}}} containing the number and\n        type of the item(s) in the slot, respectively, and {{{InventorySlot_0_colour}}} and {{{InventorySlot_0_variant}}} if the item has a colour/variation.\n        Inventory slots are numbered 0 to 39 inclusive.\n        If there is a container item available (eg the player is pointed at a chest), this will be returned in the same way, but "InventorySlot"\n        will be replaced by "ContainerNameSlot" - eg {{{ShulkerBoxSlot_0_item}}} etc.\n        \n        If {{{flat}}} is false (recommended), the data is returned as an array of objects, one for each item in the inventory/inventories.\n        The JSON array is called "inventory", and each item in the array will contain:\n        * {{{type}}} - the type of the object in that ItemStack\n        * {{{colour}}} - the colour, if relevant\n        * {{{variant}}} - the variant, if relevant\n        * {{{quantity}}} - the number of objects in the ItemStack\n        * {{{index}}} - the slot number\n        * {{{inventory}}} - the name of the inventory - will be "Inventory" for the player, or, for example, "ShulkerBox", "Chest" etc, if a container is available.\n        This index and inventory information can be used to specify the item in the {{{InventoryCommands}}} - items are specified as inventory:index -\n        eg "ShulkerBox:12"\n        \n        In addition to this information, whether {{{flat}}} is true or false, an array called "inventoriesAvailable" will also be returned.\n        This will contain a list of all the inventories available (usually just the player\'s, but if the player is pointed at a container, this\n        will also be available.)\n        For each inventory, an object will be returned that specifies:\n        * {{{name}}} - the inventory name (same as will be returned in the {{{inventory}}} field for any items in that inventory)\n        * {{{size}}} - the number of slots the inventory provides.\n        \n        For a working example please see inventory_test.py in the Python samples folder.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromDiscreteCell uses Python identifier ObservationFromDiscreteCell
    __ObservationFromDiscreteCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDiscreteCell'), 'ObservationFromDiscreteCell', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromDiscreteCell', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1881, 2), )

    
    ObservationFromDiscreteCell = property(__ObservationFromDiscreteCell.value, __ObservationFromDiscreteCell.set, None, "\n        When present, the Mod will return an observation of the player's position that is unique for every cell on the x/z plane.\n        This is useful for discrete-movement missions where we need to uniquely identify their location but don't mind how.\n\n        The observation will contain the JSON element {{{cell}}} containing e.g. {{{(2,4)}}} if the player is standing at any location where\n        x = 2 and z = 4.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromDistance uses Python identifier ObservationFromDistance
    __ObservationFromDistance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDistance'), 'ObservationFromDistance', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromDistance', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1903, 2), )

    
    ObservationFromDistance = property(__ObservationFromDistance.value, __ObservationFromDistance.set, None, '\n        When present, the Mod will return an observation that specifies the distance to a named location.\n\n        A JSON element {{{distanceFromNAME}}} will be returned (where {{{NAME}}} is replaced with the name of the NamedPoint),\n        with a value that is the distance.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromGrid uses Python identifier ObservationFromGrid
    __ObservationFromGrid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromGrid'), 'ObservationFromGrid', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromGrid', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1938, 2), )

    
    ObservationFromGrid = property(__ObservationFromGrid.value, __ObservationFromGrid.set, None, '\n        When present, the Mod will return observations that say what the nearby blocks are.\n\n        For each {{{Grid}}} entry, a named JSON element will be returned with a 1D array of block types, in order along the x, then z, then y axes.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromNearbyEntities uses Python identifier ObservationFromNearbyEntities
    __ObservationFromNearbyEntities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromNearbyEntities'), 'ObservationFromNearbyEntities', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromNearbyEntities', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1968, 2), )

    
    ObservationFromNearbyEntities = property(__ObservationFromNearbyEntities.value, __ObservationFromNearbyEntities.set, None, '\n        When present, the Mod will return observations that list the positions of all entities that fall within the given ranges of the agent.\n\n        A JSON array will be returned for each range requested, named using the {{{name}}} attribute of the range. Within the array will be a series of elements, one for each entity, containing the following:\n        \n        - name: a string describing the entity (eg from Types.xsd)\n        \n        - x: the x position of the entity\n        \n        - y: the y position of the entity\n        \n        - z: the z position of the entity\n        \n        - quantity: if items have been grouped together by Minecraft, this indicates the number in the stack\n        \n        - colour: if the item is a tile entity, with a colour, this will be present to describe the colour\n        \n        - variation: optional string to describe the variation - eg the type of egg, or brick, etc (see Types.xsd)\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromChat uses Python identifier ObservationFromChat
    __ObservationFromChat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromChat'), 'ObservationFromChat', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromChat', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1997, 2), )

    
    ObservationFromChat = property(__ObservationFromChat.value, __ObservationFromChat.set, None, "\n        When present, the Mod will return observations that say what chat messages have occurred and from which player.\n        It will also return messages for any title or subtitle change (eg via Minecraft's title command)\n\n        A JSON element {{{Chat}}} will be returned, with a list of chat strings.\n        In the same way, title changes and subtitle changes will be returned in {{{Title}}} and {{{Subtitle}}} respectively.\n        \n        Note that unless the AgentHost ObservationsPolicy is set to KEEP_ALL_OBSERVATIONS it is likely that chat messages will be missed.\n        The default policy is LATEST_OBSERVATION_ONLY.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}ObservationFromCompass uses Python identifier ObservationFromCompass
    __ObservationFromCompass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromCompass'), 'ObservationFromCompass', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comObservationFromCompass', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2013, 2), )

    
    ObservationFromCompass = property(__ObservationFromCompass.value, __ObservationFromCompass.set, None, "\n             When present, the Mod will return observations that detail how the agent is facing and what position the agent is in with respect to a compass.\n\n             A JSON element will be returned for the compass in the agent's inventory. The JSON will contain the following\n\n             - set: boolean on whether the compass is set\n\n             - compass-x: the x coordinate value of the set compass, null if not set\n\n             - compass-y: the y coordinate value of the set compass, null if not set\n\n             - compass-z: the z coordinate value of the set compass, null if not set\n\n             - relative-x: the relative x coordinate value of the player to the compass, null if not set\n\n             - relative-y: the relative y coordinate value of the player to the compass, null if not set\n\n             - relative-z: the relative z coordinate value of the player to the compass, null if not set\n\n             - offset: the number of degrees the agent is facing away from the direction the compass is pointing\n                \n             - normalized-offset: the number of degrees the agent is facing away, with the agent considered 0 degrees\n\n             - distance: the distance from the agent's location to the compass's location\n         ")

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForDamagingEntity uses Python identifier RewardForDamagingEntity
    __RewardForDamagingEntity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForDamagingEntity'), 'RewardForDamagingEntity', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForDamagingEntity', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2079, 2), )

    
    RewardForDamagingEntity = property(__RewardForDamagingEntity.value, __RewardForDamagingEntity.set, None, '\n        Sends a reward when an entity is damaged.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForReachingPosition uses Python identifier RewardForReachingPosition
    __RewardForReachingPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForReachingPosition'), 'RewardForReachingPosition', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForReachingPosition', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2093, 2), )

    
    RewardForReachingPosition = property(__RewardForReachingPosition.value, __RewardForReachingPosition.set, None, '\n        Sends a reward when a specified position is reached by the agent.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForTouchingBlockType uses Python identifier RewardForTouchingBlockType
    __RewardForTouchingBlockType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForTouchingBlockType'), 'RewardForTouchingBlockType', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForTouchingBlockType', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2148, 2), )

    
    RewardForTouchingBlockType = property(__RewardForTouchingBlockType.value, __RewardForTouchingBlockType.set, None, '\n        Sends a rewards when an agent comes in contact with a specific block type.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForSendingCommand uses Python identifier RewardForSendingCommand
    __RewardForSendingCommand = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingCommand'), 'RewardForSendingCommand', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForSendingCommand', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2162, 2), )

    
    RewardForSendingCommand = property(__RewardForSendingCommand.value, __RewardForSendingCommand.set, None, '\n        Sends a reward when the agent issues a command.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForSendingMatchingChatMessage uses Python identifier RewardForSendingMatchingChatMessage
    __RewardForSendingMatchingChatMessage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingMatchingChatMessage'), 'RewardForSendingMatchingChatMessage', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForSendingMatchingChatMessage', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2182, 2), )

    
    RewardForSendingMatchingChatMessage = property(__RewardForSendingMatchingChatMessage.value, __RewardForSendingMatchingChatMessage.set, None, '\n        Sends a reward when the agent sends a chat message that matches a given regular expression (supports Java regex syntax).\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForCollectingItem uses Python identifier RewardForCollectingItem
    __RewardForCollectingItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForCollectingItem'), 'RewardForCollectingItem', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForCollectingItem', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2202, 2), )

    
    RewardForCollectingItem = property(__RewardForCollectingItem.value, __RewardForCollectingItem.set, None, '\n        Sends a reward when the agent collects a specific item.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForDiscardingItem uses Python identifier RewardForDiscardingItem
    __RewardForDiscardingItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForDiscardingItem'), 'RewardForDiscardingItem', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForDiscardingItem', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2216, 2), )

    
    RewardForDiscardingItem = property(__RewardForDiscardingItem.value, __RewardForDiscardingItem.set, None, '\n        Sends a reward when an agent discards a specific item.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForMissionEnd uses Python identifier RewardForMissionEnd
    __RewardForMissionEnd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForMissionEnd'), 'RewardForMissionEnd', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForMissionEnd', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2236, 2), )

    
    RewardForMissionEnd = property(__RewardForMissionEnd.value, __RewardForMissionEnd.set, None, '\n        Sends a reward when the mission ends for a specified reason.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForStructureCopying uses Python identifier RewardForStructureCopying
    __RewardForStructureCopying = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForStructureCopying'), 'RewardForStructureCopying', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForStructureCopying', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2287, 2), )

    
    RewardForStructureCopying = property(__RewardForStructureCopying.value, __RewardForStructureCopying.set, None, '\n        Sends a reward when the agent copies blocks from a given structure.\n        \n        NOTE: This will do nothing unless you have set up a {{{BuildBattleDecorator}}} on the server.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForTimeTaken uses Python identifier RewardForTimeTaken
    __RewardForTimeTaken = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForTimeTaken'), 'RewardForTimeTaken', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForTimeTaken', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2355, 2), )

    
    RewardForTimeTaken = property(__RewardForTimeTaken.value, __RewardForTimeTaken.set, None, '\n        Reward that is dependent on time. Can be received per tick, or just once at the end.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}RewardForCatchingMob uses Python identifier RewardForCatchingMob
    __RewardForCatchingMob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardForCatchingMob'), 'RewardForCatchingMob', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comRewardForCatchingMob', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2380, 2), )

    
    RewardForCatchingMob = property(__RewardForCatchingMob.value, __RewardForCatchingMob.set, None, '\n        Reward for cornering a mob, such that it cannot move from its current square without passing through an agent.\n        If {{{global}}} is true then the agent doesn\'t have to be involved in catching the mob; otherwise they must be adjacent to the mob.\n        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft\'s definition of caught, in which mobs can escape by jumping or passing through agents.\n        If {{{oneshot}}} is true, the reward will only be counted once per entity.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}AgentQuitFromReachingPosition uses Python identifier AgentQuitFromReachingPosition
    __AgentQuitFromReachingPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingPosition'), 'AgentQuitFromReachingPosition', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comAgentQuitFromReachingPosition', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2424, 2), )

    
    AgentQuitFromReachingPosition = property(__AgentQuitFromReachingPosition.value, __AgentQuitFromReachingPosition.set, None, "\n        When this is included the agent's mission will end when they reach a specified position.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}AgentQuitFromTimeUp uses Python identifier AgentQuitFromTimeUp
    __AgentQuitFromTimeUp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTimeUp'), 'AgentQuitFromTimeUp', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comAgentQuitFromTimeUp', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2437, 2), )

    
    AgentQuitFromTimeUp = property(__AgentQuitFromTimeUp.value, __AgentQuitFromTimeUp.set, None, "\n        When this is included the agent's mission will end when a certain amount of time has elapsed.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}AgentQuitFromTouchingBlockType uses Python identifier AgentQuitFromTouchingBlockType
    __AgentQuitFromTouchingBlockType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTouchingBlockType'), 'AgentQuitFromTouchingBlockType', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comAgentQuitFromTouchingBlockType', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2449, 2), )

    
    AgentQuitFromTouchingBlockType = property(__AgentQuitFromTouchingBlockType.value, __AgentQuitFromTouchingBlockType.set, None, "\n        When this is included the agent's mission will end when they come in contact with a specified block type.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}AgentQuitFromCollectingItem uses Python identifier AgentQuitFromCollectingItem
    __AgentQuitFromCollectingItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCollectingItem'), 'AgentQuitFromCollectingItem', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comAgentQuitFromCollectingItem', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2462, 2), )

    
    AgentQuitFromCollectingItem = property(__AgentQuitFromCollectingItem.value, __AgentQuitFromCollectingItem.set, None, "\n        When this is included the agent's mission will end when they collect (or craft) a specified item.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}AgentQuitFromCatchingMob uses Python identifier AgentQuitFromCatchingMob
    __AgentQuitFromCatchingMob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCatchingMob'), 'AgentQuitFromCatchingMob', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comAgentQuitFromCatchingMob', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2485, 2), )

    
    AgentQuitFromCatchingMob = property(__AgentQuitFromCatchingMob.value, __AgentQuitFromCatchingMob.set, None, '\n        Agent\'s mission will end when they corner a mob. If {{{global}}} is true then the agent doesn\'t have to be involved in catching the mob; otherwise they must be adjacent to the mob.\n        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft\'s definition of caught, in which mobs can escape by jumping or passing through agents.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}AgentQuitFromReachingCommandQuota uses Python identifier AgentQuitFromReachingCommandQuota
    __AgentQuitFromReachingCommandQuota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingCommandQuota'), 'AgentQuitFromReachingCommandQuota', '__httpProjectMalmo_microsoft_com_CTD_ANON_9_httpProjectMalmo_microsoft_comAgentQuitFromReachingCommandQuota', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2530, 2), )

    
    AgentQuitFromReachingCommandQuota = property(__AgentQuitFromReachingCommandQuota.value, __AgentQuitFromReachingCommandQuota.set, None, '\n          Count the commands acted on by the Mod, and signal the end of the mission when the defined quota of commands has been reached.\n\n          A total number of commands can be specified, and/or groups of commands can be given their own quota.\n      ')

    _ElementMap.update({
        __DepthProducer.name() : __DepthProducer,
        __LuminanceProducer.name() : __LuminanceProducer,
        __ColourMapProducer.name() : __ColourMapProducer,
        __VideoProducer.name() : __VideoProducer,
        __ContinuousMovementCommands.name() : __ContinuousMovementCommands,
        __AbsoluteMovementCommands.name() : __AbsoluteMovementCommands,
        __DiscreteMovementCommands.name() : __DiscreteMovementCommands,
        __InventoryCommands.name() : __InventoryCommands,
        __SimpleCraftCommands.name() : __SimpleCraftCommands,
        __ChatCommands.name() : __ChatCommands,
        __MissionQuitCommands.name() : __MissionQuitCommands,
        __TurnBasedCommands.name() : __TurnBasedCommands,
        __HumanLevelCommands.name() : __HumanLevelCommands,
        __ObservationFromRecentCommands.name() : __ObservationFromRecentCommands,
        __ObservationFromTurnScheduler.name() : __ObservationFromTurnScheduler,
        __ObservationFromSubgoalPositionList.name() : __ObservationFromSubgoalPositionList,
        __ObservationFromHotBar.name() : __ObservationFromHotBar,
        __ObservationFromFullStats.name() : __ObservationFromFullStats,
        __ObservationFromHuman.name() : __ObservationFromHuman,
        __ObservationFromSystem.name() : __ObservationFromSystem,
        __ObservationFromRay.name() : __ObservationFromRay,
        __ObservationFromFullInventory.name() : __ObservationFromFullInventory,
        __ObservationFromDiscreteCell.name() : __ObservationFromDiscreteCell,
        __ObservationFromDistance.name() : __ObservationFromDistance,
        __ObservationFromGrid.name() : __ObservationFromGrid,
        __ObservationFromNearbyEntities.name() : __ObservationFromNearbyEntities,
        __ObservationFromChat.name() : __ObservationFromChat,
        __ObservationFromCompass.name() : __ObservationFromCompass,
        __RewardForDamagingEntity.name() : __RewardForDamagingEntity,
        __RewardForReachingPosition.name() : __RewardForReachingPosition,
        __RewardForTouchingBlockType.name() : __RewardForTouchingBlockType,
        __RewardForSendingCommand.name() : __RewardForSendingCommand,
        __RewardForSendingMatchingChatMessage.name() : __RewardForSendingMatchingChatMessage,
        __RewardForCollectingItem.name() : __RewardForCollectingItem,
        __RewardForDiscardingItem.name() : __RewardForDiscardingItem,
        __RewardForMissionEnd.name() : __RewardForMissionEnd,
        __RewardForStructureCopying.name() : __RewardForStructureCopying,
        __RewardForTimeTaken.name() : __RewardForTimeTaken,
        __RewardForCatchingMob.name() : __RewardForCatchingMob,
        __AgentQuitFromReachingPosition.name() : __AgentQuitFromReachingPosition,
        __AgentQuitFromTimeUp.name() : __AgentQuitFromTimeUp,
        __AgentQuitFromTouchingBlockType.name() : __AgentQuitFromTouchingBlockType,
        __AgentQuitFromCollectingItem.name() : __AgentQuitFromCollectingItem,
        __AgentQuitFromCatchingMob.name() : __AgentQuitFromCatchingMob,
        __AgentQuitFromReachingCommandQuota.name() : __AgentQuitFromReachingCommandQuota
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """
              Defines the Mission Handlers block for the server.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 420, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}FlatWorldGenerator uses Python identifier FlatWorldGenerator
    __FlatWorldGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FlatWorldGenerator'), 'FlatWorldGenerator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comFlatWorldGenerator', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 69, 2), )

    
    FlatWorldGenerator = property(__FlatWorldGenerator.value, __FlatWorldGenerator.set, None, '\n        Generates a superflat world with a specified preset string - see e.g. [[http://www.minecraft101.net/superflat/]]\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}DefaultWorldGenerator uses Python identifier DefaultWorldGenerator
    __DefaultWorldGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DefaultWorldGenerator'), 'DefaultWorldGenerator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comDefaultWorldGenerator', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 109, 2), )

    
    DefaultWorldGenerator = property(__DefaultWorldGenerator.value, __DefaultWorldGenerator.set, None, '\n        Generates the default terrain.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}FileWorldGenerator uses Python identifier FileWorldGenerator
    __FileWorldGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FileWorldGenerator'), 'FileWorldGenerator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comFileWorldGenerator', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 142, 2), )

    
    FileWorldGenerator = property(__FileWorldGenerator.value, __FileWorldGenerator.set, None, '\n        Loads a saved world from disk. You can find the saved worlds in "{{{Minecraft\\run\\saves}}}". Use the full path to one of those folders.\n        \n        If Minecraft is running on a different machine then copy the folder to a readable network location and update the path accordingly. Example:\n        \n        {{{<FileWorldGenerator src="\\\\\\\\machine-id\\\\shared\\\\ProjectMalmo\\\\saved_maps\\\\arena" />}}}\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}BiomeGenerator uses Python identifier BiomeGenerator
    __BiomeGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BiomeGenerator'), 'BiomeGenerator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comBiomeGenerator', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 179, 2), )

    
    BiomeGenerator = property(__BiomeGenerator.value, __BiomeGenerator.set, None, '\n              Generates a survival world with the specified biome.\n          ')

    
    # Element {http://ProjectMalmo.microsoft.com}MovingTargetDecorator uses Python identifier MovingTargetDecorator
    __MovingTargetDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MovingTargetDecorator'), 'MovingTargetDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comMovingTargetDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 262, 2), )

    
    MovingTargetDecorator = property(__MovingTargetDecorator.value, __MovingTargetDecorator.set, None, '\n        Creates a moving two-block target which takes random moves within a specified arena. Can be linked to the turn scheduler.\n        This can be made more general in the future, but is currently tailored specifically for the Malmo collaborative challenge.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}SnakeDecorator uses Python identifier SnakeDecorator
    __SnakeDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SnakeDecorator'), 'SnakeDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comSnakeDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 320, 2), )

    
    SnakeDecorator = property(__SnakeDecorator.value, __SnakeDecorator.set, None, '\n        Adds a snake made of blocks, that grows at one end and shrinks at the other.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}MazeDecorator uses Python identifier MazeDecorator
    __MazeDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MazeDecorator'), 'MazeDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comMazeDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 407, 2), )

    
    MazeDecorator = property(__MazeDecorator.value, __MazeDecorator.set, None, '\n        Adds a maze into the world.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}DrawingDecorator uses Python identifier DrawingDecorator
    __DrawingDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DrawingDecorator'), 'DrawingDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comDrawingDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 534, 2), )

    
    DrawingDecorator = property(__DrawingDecorator.value, __DrawingDecorator.set, None, '\n        Draws structures into the world.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ClassroomDecorator uses Python identifier ClassroomDecorator
    __ClassroomDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClassroomDecorator'), 'ClassroomDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comClassroomDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 718, 2), )

    
    ClassroomDecorator = property(__ClassroomDecorator.value, __ClassroomDecorator.set, None, '\n        Adds a series of joined rooms into the world.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}AnimationDecorator uses Python identifier AnimationDecorator
    __AnimationDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AnimationDecorator'), 'AnimationDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comAnimationDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 813, 2), )

    
    AnimationDecorator = property(__AnimationDecorator.value, __AnimationDecorator.set, None, '\n          Basic animation created by repeatedly applying a DrawingDecorator at different positions.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}BuildBattleDecorator uses Python identifier BuildBattleDecorator
    __BuildBattleDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BuildBattleDecorator'), 'BuildBattleDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comBuildBattleDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 917, 2), )

    
    BuildBattleDecorator = property(__BuildBattleDecorator.value, __BuildBattleDecorator.set, None, "\n        Sets up a build battle area, with a source structure that can't be edited, and a goal structure, with optional recolouring of blocks to indicate correct/incorrect placement.\n        \n        NOTE: Make sure to add a {{{RewardForStructureCopying}}} handler to the AgentHandlers if you want your agent to be rewarded for contributing to the build.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}NavigationDecorator uses Python identifier NavigationDecorator
    __NavigationDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavigationDecorator'), 'NavigationDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comNavigationDecorator', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1012, 2), )

    
    NavigationDecorator = property(__NavigationDecorator.value, __NavigationDecorator.set, None, '\n              Adds a specified block to the world and sets compass to that block.\n\n              Block is placed randomly along a radius around the origin specified.\n\n              Can force the block to appear at the highest available y-value.\n           ')

    
    # Element {http://ProjectMalmo.microsoft.com}ServerQuitFromTimeUp uses Python identifier ServerQuitFromTimeUp
    __ServerQuitFromTimeUp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitFromTimeUp'), 'ServerQuitFromTimeUp', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comServerQuitFromTimeUp', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1066, 2), )

    
    ServerQuitFromTimeUp = property(__ServerQuitFromTimeUp.value, __ServerQuitFromTimeUp.set, None, '\n        Specifies a time limit that applies to all agents.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ServerQuitWhenAnyAgentFinishes uses Python identifier ServerQuitWhenAnyAgentFinishes
    __ServerQuitWhenAnyAgentFinishes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitWhenAnyAgentFinishes'), 'ServerQuitWhenAnyAgentFinishes', '__httpProjectMalmo_microsoft_com_CTD_ANON_10_httpProjectMalmo_microsoft_comServerQuitWhenAnyAgentFinishes', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1078, 2), )

    
    ServerQuitWhenAnyAgentFinishes = property(__ServerQuitWhenAnyAgentFinishes.value, __ServerQuitWhenAnyAgentFinishes.set, None, '\n        Specifies that the mission ends when any of the agents finish.\n      ')

    _ElementMap.update({
        __FlatWorldGenerator.name() : __FlatWorldGenerator,
        __DefaultWorldGenerator.name() : __DefaultWorldGenerator,
        __FileWorldGenerator.name() : __FileWorldGenerator,
        __BiomeGenerator.name() : __BiomeGenerator,
        __MovingTargetDecorator.name() : __MovingTargetDecorator,
        __SnakeDecorator.name() : __SnakeDecorator,
        __MazeDecorator.name() : __MazeDecorator,
        __DrawingDecorator.name() : __DrawingDecorator,
        __ClassroomDecorator.name() : __ClassroomDecorator,
        __AnimationDecorator.name() : __AnimationDecorator,
        __BuildBattleDecorator.name() : __BuildBattleDecorator,
        __NavigationDecorator.name() : __NavigationDecorator,
        __ServerQuitFromTimeUp.name() : __ServerQuitFromTimeUp,
        __ServerQuitWhenAnyAgentFinishes.name() : __ServerQuitWhenAnyAgentFinishes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type {http://ProjectMalmo.microsoft.com}Pos with content type EMPTY
class Pos (pyxb.binding.basis.complexTypeDefinition):
    """
        An absolute position in the 3D Minecraft world.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Pos')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 14, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_Pos_x', pyxb.binding.datatypes.decimal, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 20, 4)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 20, 4)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_Pos_y', pyxb.binding.datatypes.decimal, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 21, 4)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 21, 4)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_Pos_z', pyxb.binding.datatypes.decimal, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 22, 4)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 22, 4)
    
    z = property(__z.value, __z.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z
    })
_module_typeBindings.Pos = Pos
Namespace.addCategoryObject('typeBinding', 'Pos', Pos)


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """
        Generates a superflat world with a specified preset string - see e.g. [[http://www.minecraft101.net/superflat/]]
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 75, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute generatorString uses Python identifier generatorString
    __generatorString = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'generatorString'), 'generatorString', '__httpProjectMalmo_microsoft_com_CTD_ANON_11_generatorString', pyxb.binding.datatypes.string, unicode_default='3;7,2*3,2;1;village')
    __generatorString._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 76, 6)
    __generatorString._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 76, 6)
    
    generatorString = property(__generatorString.value, __generatorString.set, None, '\n            The superflat customization preset string.\n          ')

    
    # Attribute forceReset uses Python identifier forceReset
    __forceReset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'forceReset'), 'forceReset', '__httpProjectMalmo_microsoft_com_CTD_ANON_11_forceReset', pyxb.binding.datatypes.boolean, unicode_default='false')
    __forceReset._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 83, 6)
    __forceReset._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 83, 6)
    
    forceReset = property(__forceReset.value, __forceReset.set, None, '\n            Set this to true to force the world to be reloaded, otherwise the current world will be used (provided it matches the requested generator string).\n            Force reloading is slow, but will guarantee that no world changes will carry over between missions.\n          ')

    
    # Attribute seed uses Python identifier seed
    __seed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'seed'), 'seed', '__httpProjectMalmo_microsoft_com_CTD_ANON_11_seed', pyxb.binding.datatypes.string, unicode_default='')
    __seed._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 91, 6)
    __seed._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 91, 6)
    
    seed = property(__seed.value, __seed.set, None, '\n            The world seed - leave blank (default) to get a random world.\n          ')

    
    # Attribute destroyAfterUse uses Python identifier destroyAfterUse
    __destroyAfterUse = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'destroyAfterUse'), 'destroyAfterUse', '__httpProjectMalmo_microsoft_com_CTD_ANON_11_destroyAfterUse', pyxb.binding.datatypes.boolean, unicode_default='true')
    __destroyAfterUse._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 98, 6)
    __destroyAfterUse._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 98, 6)
    
    destroyAfterUse = property(__destroyAfterUse.value, __destroyAfterUse.set, None, '\n            Set this to true to force the world data files to be deleted after the mission is done.\n            Enabling this setting prevents the disk being filled with old worlds.\n          ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __generatorString.name() : __generatorString,
        __forceReset.name() : __forceReset,
        __seed.name() : __seed,
        __destroyAfterUse.name() : __destroyAfterUse
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """
        Generates the default terrain.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 115, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute seed uses Python identifier seed
    __seed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'seed'), 'seed', '__httpProjectMalmo_microsoft_com_CTD_ANON_12_seed', pyxb.binding.datatypes.string, unicode_default='')
    __seed._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 116, 6)
    __seed._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 116, 6)
    
    seed = property(__seed.value, __seed.set, None, '\n            The world seed - leave blank (default) to get a random world.\n          ')

    
    # Attribute forceReset uses Python identifier forceReset
    __forceReset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'forceReset'), 'forceReset', '__httpProjectMalmo_microsoft_com_CTD_ANON_12_forceReset', pyxb.binding.datatypes.boolean, unicode_default='false')
    __forceReset._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 123, 6)
    __forceReset._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 123, 6)
    
    forceReset = property(__forceReset.value, __forceReset.set, None, '\n            Set this to true to force the world to be reloaded, otherwise the current world will be used (provided it matches the requested seed).\n            Force reloading is slow, but will guarantee that no world changes will carry over between missions.\n          ')

    
    # Attribute destroyAfterUse uses Python identifier destroyAfterUse
    __destroyAfterUse = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'destroyAfterUse'), 'destroyAfterUse', '__httpProjectMalmo_microsoft_com_CTD_ANON_12_destroyAfterUse', pyxb.binding.datatypes.boolean, unicode_default='true')
    __destroyAfterUse._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 131, 6)
    __destroyAfterUse._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 131, 6)
    
    destroyAfterUse = property(__destroyAfterUse.value, __destroyAfterUse.set, None, '\n            Set this to true to force the world data files to be deleted after the mission is done.\n            Enabling this setting prevents the disk being filled with old worlds.\n          ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __seed.name() : __seed,
        __forceReset.name() : __forceReset,
        __destroyAfterUse.name() : __destroyAfterUse
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """
        Loads a saved world from disk. You can find the saved worlds in "{{{Minecraft\run\saves}}}". Use the full path to one of those folders.
        
        If Minecraft is running on a different machine then copy the folder to a readable network location and update the path accordingly. Example:
        
        {{{<FileWorldGenerator src="\\\\machine-id\\shared\\ProjectMalmo\\saved_maps\\arena" />}}}
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 152, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute src uses Python identifier src
    __src = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'src'), 'src', '__httpProjectMalmo_microsoft_com_CTD_ANON_13_src', pyxb.binding.datatypes.anyURI, required=True)
    __src._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 153, 6)
    __src._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 153, 6)
    
    src = property(__src.value, __src.set, None, '\n            The path to the saved world folder.\n          ')

    
    # Attribute forceReset uses Python identifier forceReset
    __forceReset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'forceReset'), 'forceReset', '__httpProjectMalmo_microsoft_com_CTD_ANON_13_forceReset', pyxb.binding.datatypes.boolean, unicode_default='false')
    __forceReset._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 160, 6)
    __forceReset._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 160, 6)
    
    forceReset = property(__forceReset.value, __forceReset.set, None, '\n            Set this to true to force the world to be reloaded, otherwise the current world will be used (provided it matches the requested source filename).\n            Force reloading is slow, but will guarantee that no world changes will carry over between missions.\n          ')

    
    # Attribute destroyAfterUse uses Python identifier destroyAfterUse
    __destroyAfterUse = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'destroyAfterUse'), 'destroyAfterUse', '__httpProjectMalmo_microsoft_com_CTD_ANON_13_destroyAfterUse', pyxb.binding.datatypes.boolean, unicode_default='true')
    __destroyAfterUse._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 168, 7)
    __destroyAfterUse._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 168, 7)
    
    destroyAfterUse = property(__destroyAfterUse.value, __destroyAfterUse.set, None, '\n            Set this to true to force the world data files to be deleted after the mission is done.\n            Enabling this setting prevents the disk being filled with old worlds.\n          ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __src.name() : __src,
        __forceReset.name() : __forceReset,
        __destroyAfterUse.name() : __destroyAfterUse
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """
              Generates a survival world with the specified biome.
          """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 185, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute biome uses Python identifier biome
    __biome = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'biome'), 'biome', '__httpProjectMalmo_microsoft_com_CTD_ANON_14_biome', pyxb.binding.datatypes.int)
    __biome._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 186, 10)
    __biome._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 186, 10)
    
    biome = property(__biome.value, __biome.set, None, "\n                      The biome type for the world. Each chunk will be loaded with the biome specified.\n\n                      If left blank, the world will be a normal survival world.\n\n                      Biome ID #'s can be found here: https://minecraft.gamepedia.com/Biome#Biome_IDs\n                  ")

    
    # Attribute forceReset uses Python identifier forceReset
    __forceReset = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'forceReset'), 'forceReset', '__httpProjectMalmo_microsoft_com_CTD_ANON_14_forceReset', pyxb.binding.datatypes.boolean, unicode_default='false')
    __forceReset._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 197, 10)
    __forceReset._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 197, 10)
    
    forceReset = property(__forceReset.value, __forceReset.set, None, '\n                      Set this to true to force the world to be reloaded, otherwise the current world will be used (provided it matches the requested seed).\n                      Force reloading is slow, but will guarantee that no world changes will carry over between missions.\n                  ')

    
    # Attribute destroyAfterUse uses Python identifier destroyAfterUse
    __destroyAfterUse = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'destroyAfterUse'), 'destroyAfterUse', '__httpProjectMalmo_microsoft_com_CTD_ANON_14_destroyAfterUse', pyxb.binding.datatypes.boolean, unicode_default='true')
    __destroyAfterUse._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 205, 10)
    __destroyAfterUse._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 205, 10)
    
    destroyAfterUse = property(__destroyAfterUse.value, __destroyAfterUse.set, None, '\n                      Set this to true to force the world data files to be deleted after the mission is done.\n                      Enabling this setting prevents the disk being filled with old worlds.\n                  ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __biome.name() : __biome,
        __forceReset.name() : __forceReset,
        __destroyAfterUse.name() : __destroyAfterUse
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """
        Creates a moving two-block target which takes random moves within a specified arena. Can be linked to the turn scheduler.
        This can be made more general in the future, but is currently tailored specifically for the Malmo collaborative challenge.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 269, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ArenaBounds uses Python identifier ArenaBounds
    __ArenaBounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArenaBounds'), 'ArenaBounds', '__httpProjectMalmo_microsoft_com_CTD_ANON_15_httpProjectMalmo_microsoft_comArenaBounds', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 271, 8), )

    
    ArenaBounds = property(__ArenaBounds.value, __ArenaBounds.set, None, '\n              Define the bounds of the arena within which the target can move.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}StartPos uses Python identifier StartPos
    __StartPos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPos'), 'StartPos', '__httpProjectMalmo_microsoft_com_CTD_ANON_15_httpProjectMalmo_microsoft_comStartPos', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 278, 8), )

    
    StartPos = property(__StartPos.value, __StartPos.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}Seed uses Python identifier Seed
    __Seed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Seed'), 'Seed', '__httpProjectMalmo_microsoft_com_CTD_ANON_15_httpProjectMalmo_microsoft_comSeed', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 279, 8), )

    
    Seed = property(__Seed.value, __Seed.set, None, '\n              The master seed for the random number generator used to move the target.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}UpdateSpeed uses Python identifier UpdateSpeed
    __UpdateSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpdateSpeed'), 'UpdateSpeed', '__httpProjectMalmo_microsoft_com_CTD_ANON_15_httpProjectMalmo_microsoft_comUpdateSpeed', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 296, 8), )

    
    UpdateSpeed = property(__UpdateSpeed.value, __UpdateSpeed.set, None, '\n              The length, in ticks, between each update, or the string "turnbased" to use the turn scheduler.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}PermeableBlocks uses Python identifier PermeableBlocks
    __PermeableBlocks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PermeableBlocks'), 'PermeableBlocks', '__httpProjectMalmo_microsoft_com_CTD_ANON_15_httpProjectMalmo_microsoft_comPermeableBlocks', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 313, 8), )

    
    PermeableBlocks = property(__PermeableBlocks.value, __PermeableBlocks.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}BlockType uses Python identifier BlockType
    __BlockType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BlockType'), 'BlockType', '__httpProjectMalmo_microsoft_com_CTD_ANON_15_httpProjectMalmo_microsoft_comBlockType', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 314, 8), )

    
    BlockType = property(__BlockType.value, __BlockType.set, None, None)

    
    # Attribute requiresAirAbove uses Python identifier requiresAirAbove
    __requiresAirAbove = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'requiresAirAbove'), 'requiresAirAbove', '__httpProjectMalmo_microsoft_com_CTD_ANON_15_requiresAirAbove', pyxb.binding.datatypes.boolean, unicode_default='true')
    __requiresAirAbove._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 316, 6)
    __requiresAirAbove._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 316, 6)
    
    requiresAirAbove = property(__requiresAirAbove.value, __requiresAirAbove.set, None, None)

    _ElementMap.update({
        __ArenaBounds.name() : __ArenaBounds,
        __StartPos.name() : __StartPos,
        __Seed.name() : __Seed,
        __UpdateSpeed.name() : __UpdateSpeed,
        __PermeableBlocks.name() : __PermeableBlocks,
        __BlockType.name() : __BlockType
    })
    _AttributeMap.update({
        __requiresAirAbove.name() : __requiresAirAbove
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """
        Adds a snake made of blocks, that grows at one end and shrinks at the other.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 326, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Seed uses Python identifier Seed
    __Seed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Seed'), 'Seed', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comSeed', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 328, 8), )

    
    Seed = property(__Seed.value, __Seed.set, None, '\n              The master seed for the random number generator used to make the snake.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}MaterialSeed uses Python identifier MaterialSeed
    __MaterialSeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MaterialSeed'), 'MaterialSeed', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comMaterialSeed', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 345, 8), )

    
    MaterialSeed = property(__MaterialSeed.value, __MaterialSeed.set, None, '\n              Optional seed for determining block types.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}FreshBlock uses Python identifier FreshBlock
    __FreshBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FreshBlock'), 'FreshBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comFreshBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 362, 8), )

    
    FreshBlock = property(__FreshBlock.value, __FreshBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}StaleBlock uses Python identifier StaleBlock
    __StaleBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StaleBlock'), 'StaleBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comStaleBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 363, 8), )

    
    StaleBlock = property(__StaleBlock.value, __StaleBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}GapProbability uses Python identifier GapProbability
    __GapProbability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GapProbability'), 'GapProbability', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comGapProbability', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 364, 8), )

    
    GapProbability = property(__GapProbability.value, __GapProbability.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}StairsProbability uses Python identifier StairsProbability
    __StairsProbability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StairsProbability'), 'StairsProbability', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comStairsProbability', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 373, 8), )

    
    StairsProbability = property(__StairsProbability.value, __StairsProbability.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}TurnProbability uses Python identifier TurnProbability
    __TurnProbability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TurnProbability'), 'TurnProbability', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comTurnProbability', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 382, 8), )

    
    TurnProbability = property(__TurnProbability.value, __TurnProbability.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}SizeAndPosition uses Python identifier SizeAndPosition
    __SizeAndPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SizeAndPosition'), 'SizeAndPosition', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comSizeAndPosition', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 391, 8), )

    
    SizeAndPosition = property(__SizeAndPosition.value, __SizeAndPosition.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}SpeedInTicks uses Python identifier SpeedInTicks
    __SpeedInTicks = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpeedInTicks'), 'SpeedInTicks', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comSpeedInTicks', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 400, 8), )

    
    SpeedInTicks = property(__SpeedInTicks.value, __SpeedInTicks.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}MaxLength uses Python identifier MaxLength
    __MaxLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MaxLength'), 'MaxLength', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comMaxLength', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 401, 8), )

    
    MaxLength = property(__MaxLength.value, __MaxLength.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}MaxStairLength uses Python identifier MaxStairLength
    __MaxStairLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MaxStairLength'), 'MaxStairLength', '__httpProjectMalmo_microsoft_com_CTD_ANON_16_httpProjectMalmo_microsoft_comMaxStairLength', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 402, 8), )

    
    MaxStairLength = property(__MaxStairLength.value, __MaxStairLength.set, None, None)

    _ElementMap.update({
        __Seed.name() : __Seed,
        __MaterialSeed.name() : __MaterialSeed,
        __FreshBlock.name() : __FreshBlock,
        __StaleBlock.name() : __StaleBlock,
        __GapProbability.name() : __GapProbability,
        __StairsProbability.name() : __StairsProbability,
        __TurnProbability.name() : __TurnProbability,
        __SizeAndPosition.name() : __SizeAndPosition,
        __SpeedInTicks.name() : __SpeedInTicks,
        __MaxLength.name() : __MaxLength,
        __MaxStairLength.name() : __MaxStairLength
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 365, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute variance uses Python identifier variance
    __variance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variance'), 'variance', '__httpProjectMalmo_microsoft_com_CTD_ANON_17_variance', pyxb.binding.datatypes.decimal, unicode_default='0')
    __variance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 368, 16)
    __variance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 368, 16)
    
    variance = property(__variance.value, __variance.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __variance.name() : __variance
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 374, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute variance uses Python identifier variance
    __variance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variance'), 'variance', '__httpProjectMalmo_microsoft_com_CTD_ANON_18_variance', pyxb.binding.datatypes.decimal, unicode_default='0')
    __variance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 377, 16)
    __variance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 377, 16)
    
    variance = property(__variance.value, __variance.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __variance.name() : __variance
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 383, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute variance uses Python identifier variance
    __variance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variance'), 'variance', '__httpProjectMalmo_microsoft_com_CTD_ANON_19_variance', pyxb.binding.datatypes.decimal, unicode_default='0')
    __variance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 386, 16)
    __variance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 386, 16)
    
    variance = property(__variance.value, __variance.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __variance.name() : __variance
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 392, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute xOrigin uses Python identifier xOrigin
    __xOrigin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'xOrigin'), 'xOrigin', '__httpProjectMalmo_microsoft_com_CTD_ANON_20_xOrigin', pyxb.binding.datatypes.int, unicode_default='0')
    __xOrigin._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 393, 12)
    __xOrigin._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 393, 12)
    
    xOrigin = property(__xOrigin.value, __xOrigin.set, None, None)

    
    # Attribute yOrigin uses Python identifier yOrigin
    __yOrigin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yOrigin'), 'yOrigin', '__httpProjectMalmo_microsoft_com_CTD_ANON_20_yOrigin', pyxb.binding.datatypes.int, unicode_default='55')
    __yOrigin._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 394, 12)
    __yOrigin._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 394, 12)
    
    yOrigin = property(__yOrigin.value, __yOrigin.set, None, None)

    
    # Attribute zOrigin uses Python identifier zOrigin
    __zOrigin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'zOrigin'), 'zOrigin', '__httpProjectMalmo_microsoft_com_CTD_ANON_20_zOrigin', pyxb.binding.datatypes.int, unicode_default='0')
    __zOrigin._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 395, 12)
    __zOrigin._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 395, 12)
    
    zOrigin = property(__zOrigin.value, __zOrigin.set, None, None)

    
    # Attribute yMin uses Python identifier yMin
    __yMin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yMin'), 'yMin', '__httpProjectMalmo_microsoft_com_CTD_ANON_20_yMin', pyxb.binding.datatypes.int, unicode_default='32')
    __yMin._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 396, 12)
    __yMin._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 396, 12)
    
    yMin = property(__yMin.value, __yMin.set, None, None)

    
    # Attribute yMax uses Python identifier yMax
    __yMax = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yMax'), 'yMax', '__httpProjectMalmo_microsoft_com_CTD_ANON_20_yMax', pyxb.binding.datatypes.int, unicode_default='250')
    __yMax._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 397, 12)
    __yMax._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 397, 12)
    
    yMax = property(__yMax.value, __yMax.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __xOrigin.name() : __xOrigin,
        __yOrigin.name() : __yOrigin,
        __zOrigin.name() : __zOrigin,
        __yMin.name() : __yMin,
        __yMax.name() : __yMax
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """
        Adds a maze into the world.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 413, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Seed uses Python identifier Seed
    __Seed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Seed'), 'Seed', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comSeed', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 415, 8), )

    
    Seed = property(__Seed.value, __Seed.set, None, '\n              The master seed for the random number generator used to make the maze.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}MaterialSeed uses Python identifier MaterialSeed
    __MaterialSeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MaterialSeed'), 'MaterialSeed', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comMaterialSeed', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 432, 8), )

    
    MaterialSeed = property(__MaterialSeed.value, __MaterialSeed.set, None, '\n              Seed for the random number generator for determining block types - omit to allow master seed to control block types.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}AllowDiagonalMovement uses Python identifier AllowDiagonalMovement
    __AllowDiagonalMovement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AllowDiagonalMovement'), 'AllowDiagonalMovement', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comAllowDiagonalMovement', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 449, 8), )

    
    AllowDiagonalMovement = property(__AllowDiagonalMovement.value, __AllowDiagonalMovement.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}SizeAndPosition uses Python identifier SizeAndPosition
    __SizeAndPosition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SizeAndPosition'), 'SizeAndPosition', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comSizeAndPosition', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 450, 8), )

    
    SizeAndPosition = property(__SizeAndPosition.value, __SizeAndPosition.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}StartBlock uses Python identifier StartBlock
    __StartBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartBlock'), 'StartBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comStartBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 461, 8), )

    
    StartBlock = property(__StartBlock.value, __StartBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}EndBlock uses Python identifier EndBlock
    __EndBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndBlock'), 'EndBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comEndBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 462, 8), )

    
    EndBlock = property(__EndBlock.value, __EndBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}PathBlock uses Python identifier PathBlock
    __PathBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PathBlock'), 'PathBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comPathBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 463, 8), )

    
    PathBlock = property(__PathBlock.value, __PathBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}FloorBlock uses Python identifier FloorBlock
    __FloorBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FloorBlock'), 'FloorBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comFloorBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 464, 8), )

    
    FloorBlock = property(__FloorBlock.value, __FloorBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}GapBlock uses Python identifier GapBlock
    __GapBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GapBlock'), 'GapBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comGapBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 465, 8), )

    
    GapBlock = property(__GapBlock.value, __GapBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}OptimalPathBlock uses Python identifier OptimalPathBlock
    __OptimalPathBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OptimalPathBlock'), 'OptimalPathBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comOptimalPathBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 466, 8), )

    
    OptimalPathBlock = property(__OptimalPathBlock.value, __OptimalPathBlock.set, None, '\n              Omit this element if you want the optimal path to be unmarked.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}SubgoalBlock uses Python identifier SubgoalBlock
    __SubgoalBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubgoalBlock'), 'SubgoalBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comSubgoalBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 473, 8), )

    
    SubgoalBlock = property(__SubgoalBlock.value, __SubgoalBlock.set, None, '\n              Omit this element if you want the subgoal points to be unmarked.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}Waypoints uses Python identifier Waypoints
    __Waypoints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Waypoints'), 'Waypoints', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comWaypoints', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 480, 8), )

    
    Waypoints = property(__Waypoints.value, __Waypoints.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}GapProbability uses Python identifier GapProbability
    __GapProbability = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GapProbability'), 'GapProbability', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comGapProbability', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 489, 8), )

    
    GapProbability = property(__GapProbability.value, __GapProbability.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}AddQuitProducer uses Python identifier AddQuitProducer
    __AddQuitProducer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AddQuitProducer'), 'AddQuitProducer', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comAddQuitProducer', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 498, 8), )

    
    AddQuitProducer = property(__AddQuitProducer.value, __AddQuitProducer.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}AddNavigationObservations uses Python identifier AddNavigationObservations
    __AddNavigationObservations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AddNavigationObservations'), 'AddNavigationObservations', '__httpProjectMalmo_microsoft_com_CTD_ANON_21_httpProjectMalmo_microsoft_comAddNavigationObservations', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 503, 8), )

    
    AddNavigationObservations = property(__AddNavigationObservations.value, __AddNavigationObservations.set, None, None)

    _ElementMap.update({
        __Seed.name() : __Seed,
        __MaterialSeed.name() : __MaterialSeed,
        __AllowDiagonalMovement.name() : __AllowDiagonalMovement,
        __SizeAndPosition.name() : __SizeAndPosition,
        __StartBlock.name() : __StartBlock,
        __EndBlock.name() : __EndBlock,
        __PathBlock.name() : __PathBlock,
        __FloorBlock.name() : __FloorBlock,
        __GapBlock.name() : __GapBlock,
        __OptimalPathBlock.name() : __OptimalPathBlock,
        __SubgoalBlock.name() : __SubgoalBlock,
        __Waypoints.name() : __Waypoints,
        __GapProbability.name() : __GapProbability,
        __AddQuitProducer.name() : __AddQuitProducer,
        __AddNavigationObservations.name() : __AddNavigationObservations
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 451, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute width uses Python identifier width
    __width = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'width'), 'width', '__httpProjectMalmo_microsoft_com_CTD_ANON_22_width', pyxb.binding.datatypes.int, unicode_default='10')
    __width._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 452, 12)
    __width._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 452, 12)
    
    width = property(__width.value, __width.set, None, None)

    
    # Attribute length uses Python identifier length
    __length = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'length'), 'length', '__httpProjectMalmo_microsoft_com_CTD_ANON_22_length', pyxb.binding.datatypes.int, unicode_default='10')
    __length._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 453, 12)
    __length._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 453, 12)
    
    length = property(__length.value, __length.set, None, None)

    
    # Attribute height uses Python identifier height
    __height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'height'), 'height', '__httpProjectMalmo_microsoft_com_CTD_ANON_22_height', pyxb.binding.datatypes.int, unicode_default='100')
    __height._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 454, 12)
    __height._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 454, 12)
    
    height = property(__height.value, __height.set, None, None)

    
    # Attribute scale uses Python identifier scale
    __scale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'scale'), 'scale', '__httpProjectMalmo_microsoft_com_CTD_ANON_22_scale', pyxb.binding.datatypes.int, unicode_default='1')
    __scale._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 455, 12)
    __scale._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 455, 12)
    
    scale = property(__scale.value, __scale.set, None, None)

    
    # Attribute xOrigin uses Python identifier xOrigin
    __xOrigin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'xOrigin'), 'xOrigin', '__httpProjectMalmo_microsoft_com_CTD_ANON_22_xOrigin', pyxb.binding.datatypes.int, unicode_default='0')
    __xOrigin._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 456, 12)
    __xOrigin._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 456, 12)
    
    xOrigin = property(__xOrigin.value, __xOrigin.set, None, None)

    
    # Attribute yOrigin uses Python identifier yOrigin
    __yOrigin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yOrigin'), 'yOrigin', '__httpProjectMalmo_microsoft_com_CTD_ANON_22_yOrigin', pyxb.binding.datatypes.int, unicode_default='55')
    __yOrigin._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 457, 12)
    __yOrigin._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 457, 12)
    
    yOrigin = property(__yOrigin.value, __yOrigin.set, None, None)

    
    # Attribute zOrigin uses Python identifier zOrigin
    __zOrigin = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'zOrigin'), 'zOrigin', '__httpProjectMalmo_microsoft_com_CTD_ANON_22_zOrigin', pyxb.binding.datatypes.int, unicode_default='0')
    __zOrigin._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 458, 12)
    __zOrigin._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 458, 12)
    
    zOrigin = property(__zOrigin.value, __zOrigin.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __width.name() : __width,
        __length.name() : __length,
        __height.name() : __height,
        __scale.name() : __scale,
        __xOrigin.name() : __xOrigin,
        __yOrigin.name() : __yOrigin,
        __zOrigin.name() : __zOrigin
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 481, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}WaypointBlock uses Python identifier WaypointBlock
    __WaypointBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WaypointBlock'), 'WaypointBlock', '__httpProjectMalmo_microsoft_com_CTD_ANON_23_httpProjectMalmo_microsoft_comWaypointBlock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 483, 14), )

    
    WaypointBlock = property(__WaypointBlock.value, __WaypointBlock.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}WaypointItem uses Python identifier WaypointItem
    __WaypointItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WaypointItem'), 'WaypointItem', '__httpProjectMalmo_microsoft_com_CTD_ANON_23_httpProjectMalmo_microsoft_comWaypointItem', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 484, 14), )

    
    WaypointItem = property(__WaypointItem.value, __WaypointItem.set, None, None)

    
    # Attribute quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'quantity'), 'quantity', '__httpProjectMalmo_microsoft_com_CTD_ANON_23_quantity', pyxb.binding.datatypes.int, required=True)
    __quantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 486, 12)
    __quantity._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 486, 12)
    
    quantity = property(__quantity.value, __quantity.set, None, None)

    _ElementMap.update({
        __WaypointBlock.name() : __WaypointBlock,
        __WaypointItem.name() : __WaypointItem
    })
    _AttributeMap.update({
        __quantity.name() : __quantity
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 490, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute variance uses Python identifier variance
    __variance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variance'), 'variance', '__httpProjectMalmo_microsoft_com_CTD_ANON_24_variance', pyxb.binding.datatypes.decimal, unicode_default='0')
    __variance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 493, 16)
    __variance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 493, 16)
    
    variance = property(__variance.value, __variance.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __variance.name() : __variance
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 499, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_CTD_ANON_25_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 500, 12)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 500, 12)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __description.name() : __description
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 504, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type {http://ProjectMalmo.microsoft.com}DrawObjectType with content type EMPTY
class DrawObjectType_ (pyxb.binding.basis.complexTypeDefinition):
    """
        Base class for all draw objects.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawObjectType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 510, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DrawObjectType_ = DrawObjectType_
Namespace.addCategoryObject('typeBinding', 'DrawObjectType', DrawObjectType_)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """
        Draws structures into the world.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 540, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}DrawObjectType uses Python identifier DrawObjectType
    __DrawObjectType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DrawObjectType'), 'DrawObjectType', '__httpProjectMalmo_microsoft_com_CTD_ANON_27_httpProjectMalmo_microsoft_comDrawObjectType', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 708, 2), )

    
    DrawObjectType = property(__DrawObjectType.value, __DrawObjectType.set, None, None)

    _ElementMap.update({
        __DrawObjectType.name() : __DrawObjectType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 727, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}building uses Python identifier building
    __building = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'building'), 'building', '__httpProjectMalmo_microsoft_com_CTD_ANON_28_httpProjectMalmo_microsoft_combuilding', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 729, 14), )

    
    building = property(__building.value, __building.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}path uses Python identifier path
    __path = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'path'), 'path', '__httpProjectMalmo_microsoft_com_CTD_ANON_28_httpProjectMalmo_microsoft_compath', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 730, 14), )

    
    path = property(__path.value, __path.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}division uses Python identifier division
    __division = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'division'), 'division', '__httpProjectMalmo_microsoft_com_CTD_ANON_28_httpProjectMalmo_microsoft_comdivision', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 731, 14), )

    
    division = property(__division.value, __division.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}obstacle uses Python identifier obstacle
    __obstacle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'obstacle'), 'obstacle', '__httpProjectMalmo_microsoft_com_CTD_ANON_28_httpProjectMalmo_microsoft_comobstacle', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 732, 14), )

    
    obstacle = property(__obstacle.value, __obstacle.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}hint uses Python identifier hint
    __hint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hint'), 'hint', '__httpProjectMalmo_microsoft_com_CTD_ANON_28_httpProjectMalmo_microsoft_comhint', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 733, 14), )

    
    hint = property(__hint.value, __hint.set, None, None)

    _ElementMap.update({
        __building.name() : __building,
        __path.name() : __path,
        __division.name() : __division,
        __obstacle.name() : __obstacle,
        __hint.name() : __hint
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 738, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_comwidth', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 740, 14), )

    
    width = property(__width.value, __width.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}height uses Python identifier height
    __height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'height'), 'height', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_comheight', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 741, 14), )

    
    height = property(__height.value, __height.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}length uses Python identifier length
    __length = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'length'), 'length', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_comlength', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 742, 14), )

    
    length = property(__length.value, __length.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}pathLength uses Python identifier pathLength
    __pathLength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pathLength'), 'pathLength', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_compathLength', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 743, 14), )

    
    pathLength = property(__pathLength.value, __pathLength.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}divisions uses Python identifier divisions
    __divisions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'divisions'), 'divisions', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_comdivisions', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 744, 14), )

    
    divisions = property(__divisions.value, __divisions.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}horizontalObstacles uses Python identifier horizontalObstacles
    __horizontalObstacles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'horizontalObstacles'), 'horizontalObstacles', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_comhorizontalObstacles', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 753, 14), )

    
    horizontalObstacles = property(__horizontalObstacles.value, __horizontalObstacles.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}verticalObstacles uses Python identifier verticalObstacles
    __verticalObstacles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'verticalObstacles'), 'verticalObstacles', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_comverticalObstacles', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 754, 14), )

    
    verticalObstacles = property(__verticalObstacles.value, __verticalObstacles.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}hintLikelihood uses Python identifier hintLikelihood
    __hintLikelihood = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hintLikelihood'), 'hintLikelihood', '__httpProjectMalmo_microsoft_com_CTD_ANON_29_httpProjectMalmo_microsoft_comhintLikelihood', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 755, 14), )

    
    hintLikelihood = property(__hintLikelihood.value, __hintLikelihood.set, None, None)

    _ElementMap.update({
        __width.name() : __width,
        __height.name() : __height,
        __length.name() : __length,
        __pathLength.name() : __pathLength,
        __divisions.name() : __divisions,
        __horizontalObstacles.name() : __horizontalObstacles,
        __verticalObstacles.name() : __verticalObstacles,
        __hintLikelihood.name() : __hintLikelihood
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 745, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}southNorth uses Python identifier southNorth
    __southNorth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'southNorth'), 'southNorth', '__httpProjectMalmo_microsoft_com_CTD_ANON_30_httpProjectMalmo_microsoft_comsouthNorth', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 747, 20), )

    
    southNorth = property(__southNorth.value, __southNorth.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}eastWest uses Python identifier eastWest
    __eastWest = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'eastWest'), 'eastWest', '__httpProjectMalmo_microsoft_com_CTD_ANON_30_httpProjectMalmo_microsoft_comeastWest', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 748, 20), )

    
    eastWest = property(__eastWest.value, __eastWest.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}aboveBelow uses Python identifier aboveBelow
    __aboveBelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'aboveBelow'), 'aboveBelow', '__httpProjectMalmo_microsoft_com_CTD_ANON_30_httpProjectMalmo_microsoft_comaboveBelow', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 749, 20), )

    
    aboveBelow = property(__aboveBelow.value, __aboveBelow.set, None, None)

    _ElementMap.update({
        __southNorth.name() : __southNorth,
        __eastWest.name() : __eastWest,
        __aboveBelow.name() : __aboveBelow
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type {http://ProjectMalmo.microsoft.com}HorizontalObstacles with content type ELEMENT_ONLY
class HorizontalObstacles (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}HorizontalObstacles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HorizontalObstacles')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 775, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}gap uses Python identifier gap
    __gap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'gap'), 'gap', '__httpProjectMalmo_microsoft_com_HorizontalObstacles_httpProjectMalmo_microsoft_comgap', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 777, 6), )

    
    gap = property(__gap.value, __gap.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}bridge uses Python identifier bridge
    __bridge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bridge'), 'bridge', '__httpProjectMalmo_microsoft_com_HorizontalObstacles_httpProjectMalmo_microsoft_combridge', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 778, 6), )

    
    bridge = property(__bridge.value, __bridge.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}door uses Python identifier door
    __door = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'door'), 'door', '__httpProjectMalmo_microsoft_com_HorizontalObstacles_httpProjectMalmo_microsoft_comdoor', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 779, 6), )

    
    door = property(__door.value, __door.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}puzzle uses Python identifier puzzle
    __puzzle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'puzzle'), 'puzzle', '__httpProjectMalmo_microsoft_com_HorizontalObstacles_httpProjectMalmo_microsoft_compuzzle', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 780, 6), )

    
    puzzle = property(__puzzle.value, __puzzle.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}jump uses Python identifier jump
    __jump = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'jump'), 'jump', '__httpProjectMalmo_microsoft_com_HorizontalObstacles_httpProjectMalmo_microsoft_comjump', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 781, 6), )

    
    jump = property(__jump.value, __jump.set, None, None)

    _ElementMap.update({
        __gap.name() : __gap,
        __bridge.name() : __bridge,
        __door.name() : __door,
        __puzzle.name() : __puzzle,
        __jump.name() : __jump
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HorizontalObstacles = HorizontalObstacles
Namespace.addCategoryObject('typeBinding', 'HorizontalObstacles', HorizontalObstacles)


# Complex type {http://ProjectMalmo.microsoft.com}VerticalObstacles with content type ELEMENT_ONLY
class VerticalObstacles (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}VerticalObstacles with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VerticalObstacles')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 785, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}stairs uses Python identifier stairs
    __stairs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'stairs'), 'stairs', '__httpProjectMalmo_microsoft_com_VerticalObstacles_httpProjectMalmo_microsoft_comstairs', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 787, 6), )

    
    stairs = property(__stairs.value, __stairs.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}ladder uses Python identifier ladder
    __ladder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ladder'), 'ladder', '__httpProjectMalmo_microsoft_com_VerticalObstacles_httpProjectMalmo_microsoft_comladder', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 788, 6), )

    
    ladder = property(__ladder.value, __ladder.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}jump uses Python identifier jump
    __jump = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'jump'), 'jump', '__httpProjectMalmo_microsoft_com_VerticalObstacles_httpProjectMalmo_microsoft_comjump', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 789, 6), )

    
    jump = property(__jump.value, __jump.set, None, None)

    _ElementMap.update({
        __stairs.name() : __stairs,
        __ladder.name() : __ladder,
        __jump.name() : __jump
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VerticalObstacles = VerticalObstacles
Namespace.addCategoryObject('typeBinding', 'VerticalObstacles', VerticalObstacles)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """
          Basic animation created by repeatedly applying a DrawingDecorator at different positions.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 819, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}DrawingDecorator uses Python identifier DrawingDecorator
    __DrawingDecorator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DrawingDecorator'), 'DrawingDecorator', '__httpProjectMalmo_microsoft_com_CTD_ANON_31_httpProjectMalmo_microsoft_comDrawingDecorator', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 534, 2), )

    
    DrawingDecorator = property(__DrawingDecorator.value, __DrawingDecorator.set, None, '\n        Draws structures into the world.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}Parametric uses Python identifier Parametric
    __Parametric = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Parametric'), 'Parametric', '__httpProjectMalmo_microsoft_com_CTD_ANON_31_httpProjectMalmo_microsoft_comParametric', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 822, 10), )

    
    Parametric = property(__Parametric.value, __Parametric.set, None, '\n                Create an animation where the (x,y,z) position are determined by parametric equations. Recognised tokens are:\n\n                * basic arithmetic operations: +, -, /, *, % (modulo), ^ (to the power of)\n                * basic trig: sin, cos, tan, asin, acos, atan\n                * abs (absolute value)\n                * rand - replaces with a random float between 0 and 1\n                * t - the integer time variable, incremented with each time interval\n\n                For example, to create a structure which orbits in the x-z plane about the point (100,100,100) at a radius of 20, use:\n                "100+20*cos(t)" and "100+20*sin(t)" for the x and z strings.\n\n                The parser is not robust to mismatched brackets, typos, unrecognised tokens etc, and will fail silently.\n              ')

    
    # Element {http://ProjectMalmo.microsoft.com}Linear uses Python identifier Linear
    __Linear = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Linear'), 'Linear', '__httpProjectMalmo_microsoft_com_CTD_ANON_31_httpProjectMalmo_microsoft_comLinear', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 864, 10), )

    
    Linear = property(__Linear.value, __Linear.set, None, "\n                Create an animation where the (x,y,z) position is determined by the starting position, a constant velocity, and a bounding box.\n\n                Each time step, the position is updated by adding the velocity values. If the object goes outside of the bounding box in one dimension, that dimension's velocity will be flipped to reverse the direction.\n              ")

    
    # Attribute ticksPerUpdate uses Python identifier ticksPerUpdate
    __ticksPerUpdate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ticksPerUpdate'), 'ticksPerUpdate', '__httpProjectMalmo_microsoft_com_CTD_ANON_31_ticksPerUpdate', pyxb.binding.datatypes.int, unicode_default='1')
    __ticksPerUpdate._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 907, 6)
    __ticksPerUpdate._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 907, 6)
    
    ticksPerUpdate = property(__ticksPerUpdate.value, __ticksPerUpdate.set, None, '\n            The number of server ticks between each update of the animation.\n          ')

    _ElementMap.update({
        __DrawingDecorator.name() : __DrawingDecorator,
        __Parametric.name() : __Parametric,
        __Linear.name() : __Linear
    })
    _AttributeMap.update({
        __ticksPerUpdate.name() : __ticksPerUpdate
    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """
                Create an animation where the (x,y,z) position is determined by the starting position, a constant velocity, and a bounding box.

                Each time step, the position is updated by adding the velocity values. If the object goes outside of the bounding box in one dimension, that dimension's velocity will be flipped to reverse the direction.
              """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 872, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}CanvasBounds uses Python identifier CanvasBounds
    __CanvasBounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CanvasBounds'), 'CanvasBounds', '__httpProjectMalmo_microsoft_com_CTD_ANON_32_httpProjectMalmo_microsoft_comCanvasBounds', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 874, 16), )

    
    CanvasBounds = property(__CanvasBounds.value, __CanvasBounds.set, None, '\n                        Define the bounds of the canvas within which to move the object.\n                    ')

    
    # Element {http://ProjectMalmo.microsoft.com}InitialPos uses Python identifier InitialPos
    __InitialPos = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialPos'), 'InitialPos', '__httpProjectMalmo_microsoft_com_CTD_ANON_32_httpProjectMalmo_microsoft_comInitialPos', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 881, 16), )

    
    InitialPos = property(__InitialPos.value, __InitialPos.set, None, "\n                        Define the starting position of the drawing's origin.\n                    ")

    
    # Element {http://ProjectMalmo.microsoft.com}InitialVelocity uses Python identifier InitialVelocity
    __InitialVelocity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialVelocity'), 'InitialVelocity', '__httpProjectMalmo_microsoft_com_CTD_ANON_32_httpProjectMalmo_microsoft_comInitialVelocity', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 888, 16), )

    
    InitialVelocity = property(__InitialVelocity.value, __InitialVelocity.set, None, "\n                        Define the initial velocity of the drawing's origin.\n                    ")

    _ElementMap.update({
        __CanvasBounds.name() : __CanvasBounds,
        __InitialPos.name() : __InitialPos,
        __InitialVelocity.name() : __InitialVelocity
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sets up a build battle area, with a source structure that can't be edited, and a goal structure, with optional recolouring of blocks to indicate correct/incorrect placement.
        
        NOTE: Make sure to add a {{{RewardForStructureCopying}}} handler to the AgentHandlers if you want your agent to be rewarded for contributing to the build.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 925, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}GoalStructureBounds uses Python identifier GoalStructureBounds
    __GoalStructureBounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GoalStructureBounds'), 'GoalStructureBounds', '__httpProjectMalmo_microsoft_com_CTD_ANON_33_httpProjectMalmo_microsoft_comGoalStructureBounds', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 927, 8), )

    
    GoalStructureBounds = property(__GoalStructureBounds.value, __GoalStructureBounds.set, None, '\n              Define the bounds of the structure to be copied. Anything in this volume when the mission starts will be used as the blueprint - eg anything drawn here using the {{{DrawingDecorator}}}, etc.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}PlayerStructureBounds uses Python identifier PlayerStructureBounds
    __PlayerStructureBounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlayerStructureBounds'), 'PlayerStructureBounds', '__httpProjectMalmo_microsoft_com_CTD_ANON_33_httpProjectMalmo_microsoft_comPlayerStructureBounds', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 934, 8), )

    
    PlayerStructureBounds = property(__PlayerStructureBounds.value, __PlayerStructureBounds.set, None, '\n              Define the bounds in which the agent should build their copy.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}BlockTypeOnCorrectPlacement uses Python identifier BlockTypeOnCorrectPlacement
    __BlockTypeOnCorrectPlacement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BlockTypeOnCorrectPlacement'), 'BlockTypeOnCorrectPlacement', '__httpProjectMalmo_microsoft_com_CTD_ANON_33_httpProjectMalmo_microsoft_comBlockTypeOnCorrectPlacement', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 941, 8), )

    
    BlockTypeOnCorrectPlacement = property(__BlockTypeOnCorrectPlacement.value, __BlockTypeOnCorrectPlacement.set, None, '\n              If present, correctly placed blocks (in the source and the copy) will be changed to this block type.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}BlockTypeOnIncorrectPlacement uses Python identifier BlockTypeOnIncorrectPlacement
    __BlockTypeOnIncorrectPlacement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BlockTypeOnIncorrectPlacement'), 'BlockTypeOnIncorrectPlacement', '__httpProjectMalmo_microsoft_com_CTD_ANON_33_httpProjectMalmo_microsoft_comBlockTypeOnIncorrectPlacement', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 948, 8), )

    
    BlockTypeOnIncorrectPlacement = property(__BlockTypeOnIncorrectPlacement.value, __BlockTypeOnIncorrectPlacement.set, None, '\n              If present, incorrectly placed blocks (in the copy only) will be changed to this block type.\n            ')

    _ElementMap.update({
        __GoalStructureBounds.name() : __GoalStructureBounds,
        __PlayerStructureBounds.name() : __PlayerStructureBounds,
        __BlockTypeOnCorrectPlacement.name() : __BlockTypeOnCorrectPlacement,
        __BlockTypeOnIncorrectPlacement.name() : __BlockTypeOnIncorrectPlacement
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type {http://ProjectMalmo.microsoft.com}RandomPlacement with content type ELEMENT_ONLY
class RandomPlacement (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}RandomPlacement with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RandomPlacement')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 959, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}origin uses Python identifier origin
    __origin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'origin'), 'origin', '__httpProjectMalmo_microsoft_com_RandomPlacement_httpProjectMalmo_microsoft_comorigin', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 966, 10), )

    
    origin = property(__origin.value, __origin.set, None, '\n                      Specifies the origin point or spawn point in the Minecraft world.\n                      \n                      If omitted, set to the world spawn point.\n                  ')

    
    # Element {http://ProjectMalmo.microsoft.com}radius uses Python identifier radius
    __radius = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'radius'), 'radius', '__httpProjectMalmo_microsoft_com_RandomPlacement_httpProjectMalmo_microsoft_comradius', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 975, 10), )

    
    radius = property(__radius.value, __radius.set, None, '\n                      Specifies the radius of the circle around which the block may be randomly placed.\n                  ')

    
    # Element {http://ProjectMalmo.microsoft.com}block uses Python identifier block
    __block = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'block'), 'block', '__httpProjectMalmo_microsoft_com_RandomPlacement_httpProjectMalmo_microsoft_comblock', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 982, 10), )

    
    block = property(__block.value, __block.set, None, '\n                      Specifies the block type of the block to be randomly placed.\n                  ')

    
    # Element {http://ProjectMalmo.microsoft.com}placement uses Python identifier placement
    __placement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'placement'), 'placement', '__httpProjectMalmo_microsoft_com_RandomPlacement_httpProjectMalmo_microsoft_complacement', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 989, 10), )

    
    placement = property(__placement.value, __placement.set, None, None)

    _ElementMap.update({
        __origin.name() : __origin,
        __radius.name() : __radius,
        __block.name() : __block,
        __placement.name() : __placement
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RandomPlacement = RandomPlacement
Namespace.addCategoryObject('typeBinding', 'RandomPlacement', RandomPlacement)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """
              Adds a specified block to the world and sets compass to that block.

              Block is placed randomly along a radius around the origin specified.

              Can force the block to appear at the highest available y-value.
           """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1022, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}randomPlacementProperties uses Python identifier randomPlacementProperties
    __randomPlacementProperties = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'randomPlacementProperties'), 'randomPlacementProperties', '__httpProjectMalmo_microsoft_com_CTD_ANON_34_httpProjectMalmo_microsoft_comrandomPlacementProperties', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1024, 14), )

    
    randomPlacementProperties = property(__randomPlacementProperties.value, __randomPlacementProperties.set, None, '\n                          Properties for placing a block in the world randomly.\n                      ')

    
    # Element {http://ProjectMalmo.microsoft.com}randomizeCompassLocation uses Python identifier randomizeCompassLocation
    __randomizeCompassLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'randomizeCompassLocation'), 'randomizeCompassLocation', '__httpProjectMalmo_microsoft_com_CTD_ANON_34_httpProjectMalmo_microsoft_comrandomizeCompassLocation', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1031, 14), )

    
    randomizeCompassLocation = property(__randomizeCompassLocation.value, __randomizeCompassLocation.set, None, '\n                          Sets whether or not the compass location should be randomized within a certain radius.\n\n                          If false, will set the compass location to the block that was randomly placed.\n\n                          If true, will set the compass location to a random spot within the radius specified below.\n                      ')

    
    # Element {http://ProjectMalmo.microsoft.com}minRandomizedDistance uses Python identifier minRandomizedDistance
    __minRandomizedDistance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'minRandomizedDistance'), 'minRandomizedDistance', '__httpProjectMalmo_microsoft_com_CTD_ANON_34_httpProjectMalmo_microsoft_comminRandomizedDistance', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1042, 14), )

    
    minRandomizedDistance = property(__minRandomizedDistance.value, __minRandomizedDistance.set, None, '\n                          The minimum distance a randomized compass location must be from the block that was randomly placed.\n                          \n                          If omitted, set to 0 blocks.\n                      ')

    
    # Element {http://ProjectMalmo.microsoft.com}maxRandomizedDistance uses Python identifier maxRandomizedDistance
    __maxRandomizedDistance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxRandomizedDistance'), 'maxRandomizedDistance', '__httpProjectMalmo_microsoft_com_CTD_ANON_34_httpProjectMalmo_microsoft_commaxRandomizedDistance', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1051, 14), )

    
    maxRandomizedDistance = property(__maxRandomizedDistance.value, __maxRandomizedDistance.set, None, '\n                          The maximum distance a randomized compass location must be from the block that was randomly placed.\n                          \n                          If omitted, set to 8 blocks.\n                      ')

    _ElementMap.update({
        __randomPlacementProperties.name() : __randomPlacementProperties,
        __randomizeCompassLocation.name() : __randomizeCompassLocation,
        __minRandomizedDistance.name() : __minRandomizedDistance,
        __maxRandomizedDistance.name() : __maxRandomizedDistance
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """
        Specifies a time limit that applies to all agents.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1072, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute timeLimitMs uses Python identifier timeLimitMs
    __timeLimitMs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'timeLimitMs'), 'timeLimitMs', '__httpProjectMalmo_microsoft_com_CTD_ANON_35_timeLimitMs', pyxb.binding.datatypes.decimal, required=True)
    __timeLimitMs._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1073, 6)
    __timeLimitMs._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1073, 6)
    
    timeLimitMs = property(__timeLimitMs.value, __timeLimitMs.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_CTD_ANON_35_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1074, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1074, 6)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __timeLimitMs.name() : __timeLimitMs,
        __description.name() : __description
    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """
        Specifies that the mission ends when any of the agents finish.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1084, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_CTD_ANON_36_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1085, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1085, 6)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __description.name() : __description
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """
        Requests that 32bpp depth frames be sent.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1101, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Width uses Python identifier Width
    __Width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Width'), 'Width', '__httpProjectMalmo_microsoft_com_CTD_ANON_37_httpProjectMalmo_microsoft_comWidth', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1103, 8), )

    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}Height uses Python identifier Height
    __Height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Height'), 'Height', '__httpProjectMalmo_microsoft_com_CTD_ANON_37_httpProjectMalmo_microsoft_comHeight', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1104, 8), )

    
    Height = property(__Height.value, __Height.set, None, None)

    _ElementMap.update({
        __Width.name() : __Width,
        __Height.name() : __Height
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """
        Requests an 8bpp grayscale image.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1115, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Width uses Python identifier Width
    __Width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Width'), 'Width', '__httpProjectMalmo_microsoft_com_CTD_ANON_38_httpProjectMalmo_microsoft_comWidth', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1117, 8), )

    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}Height uses Python identifier Height
    __Height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Height'), 'Height', '__httpProjectMalmo_microsoft_com_CTD_ANON_38_httpProjectMalmo_microsoft_comHeight', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1118, 8), )

    
    Height = property(__Height.value, __Height.set, None, None)

    _ElementMap.update({
        __Width.name() : __Width,
        __Height.name() : __Height
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept commands that control smooth movement.

        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards with normal speed.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1532, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_39_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1534, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    
    # Attribute turnSpeedDegs uses Python identifier turnSpeedDegs
    __turnSpeedDegs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'turnSpeedDegs'), 'turnSpeedDegs', '__httpProjectMalmo_microsoft_com_CTD_ANON_39_turnSpeedDegs', pyxb.binding.datatypes.decimal, unicode_default='180')
    __turnSpeedDegs._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1546, 6)
    __turnSpeedDegs._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1546, 6)
    
    turnSpeedDegs = property(__turnSpeedDegs.value, __turnSpeedDegs.set, None, '\n            This sets the maximum speed for both turning the agent and adjusting the camera pitch, in degrees per second.\n            \n            The turn and pitch command values are both scaled by this - eg "{{{turn -0.5}}}" to turn left (anti-clockwise) at half this maximum speed.\n          ')

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        __turnSpeedDegs.name() : __turnSpeedDegs
    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept commands to set the player's position and orientation directly.

        Commands take the form of "verb <value>" e.g. "{{{tpx 13}}}" to set the x-coordinate to 13.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1566, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_40_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1568, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept commands that control movement in discrete jumps.

        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards one square.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1591, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_41_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1593, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    
    # Attribute autoFall uses Python identifier autoFall
    __autoFall = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'autoFall'), 'autoFall', '__httpProjectMalmo_microsoft_com_CTD_ANON_41_autoFall', pyxb.binding.datatypes.boolean, unicode_default='false')
    __autoFall._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1605, 6)
    __autoFall._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1605, 6)
    
    autoFall = property(__autoFall.value, __autoFall.set, None, None)

    
    # Attribute autoJump uses Python identifier autoJump
    __autoJump = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'autoJump'), 'autoJump', '__httpProjectMalmo_microsoft_com_CTD_ANON_41_autoJump', pyxb.binding.datatypes.boolean, unicode_default='false')
    __autoJump._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1606, 6)
    __autoJump._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1606, 6)
    
    autoJump = property(__autoJump.value, __autoJump.set, None, None)

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        __autoFall.name() : __autoFall,
        __autoJump.name() : __autoJump
    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept commands that control the player's inventory.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1616, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_42_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1618, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept simple commands that implement a basic form of crafting.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1639, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_43_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1641, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept commands that send chat messages to the other players.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1662, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_44_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1664, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept a command that quits the mission.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1685, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_45_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1687, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    
    # Attribute quitDescription uses Python identifier quitDescription
    __quitDescription = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'quitDescription'), 'quitDescription', '__httpProjectMalmo_microsoft_com_CTD_ANON_45_quitDescription', pyxb.binding.datatypes.string, unicode_default='')
    __quitDescription._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1699, 6)
    __quitDescription._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1699, 6)
    
    quitDescription = property(__quitDescription.value, __quitDescription.set, None, None)

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        __quitDescription.name() : __quitDescription
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will accept commands on the level of mouse and keyboard events.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1727, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ModifierList uses Python identifier ModifierList
    __ModifierList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), 'ModifierList', '__httpProjectMalmo_microsoft_com_CTD_ANON_46_httpProjectMalmo_microsoft_comModifierList', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1729, 8), )

    
    ModifierList = property(__ModifierList.value, __ModifierList.set, None, None)

    _ElementMap.update({
        __ModifierList.name() : __ModifierList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return observations that say what commands have been acted on since the last report, in the JSON element {{{CommandsSinceLastObservation}}}.

        Note that the commands returned might not yet have taken effect, depending on the command and the way in which Minecraft responds to it -
        but they will have been processed by the command handling chain.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1755, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """
        Automatically addd by Malmo when the user specifies the {{{TurnBasedCommands}}} handler. This provides vital observations back to the agent to allow them to make use of the turn scheduler. When it is the agent's turn, the JSON will contain {{{turn_number}}} - an integer which tracks the number of turns the agent has taken, and {{{turn_key}}} - a one-shot key which must be passed back to Malmo as a parameter in {{{sendCommand}}} in order for the command to be accepted.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1764, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return observations that indicate the direction to follow to the next subgoal.
        The value to turn by is returned in the JSON element {{{yawDelta}}}.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1774, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Point'), 'Point', '__httpProjectMalmo_microsoft_com_CTD_ANON_49_httpProjectMalmo_microsoft_comPoint', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1776, 8), )

    
    Point = property(__Point.value, __Point.set, None, None)

    _ElementMap.update({
        __Point.name() : __Point
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return observations that say what is in the hotbar.

        Up to four values are returned for each slot, if not empty: e.g. {{{Hotbar_1_size}}} and {{{Hotbar_1_item}}} containing the number and
        type of the item(s) in the slot, respectively, and {{{Hotbar_1_colour}}} and  {{{Hotbar_1_variant}}} if the item has a colour/variation. Hotbar slots are numbered 0 to 8 inclusive.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1790, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return several observations:

        * Achievement statistics: {{{DistanceTravelled}}}, {{{TimeAlive}}}, {{{MobsKilled}}}, {{{PlayersKilled}}}, {{{DamageTaken}}}, {{{DamageDealt}}}
        * Life statistics: {{{Life}}}, {{{Score}}}, {{{Food}}}, {{{Air}}}, {{{XP}}}, {{{IsAlive}}}, {{{Name}}}
        * Position statistics: {{{XPos}}}, {{{YPos}}}, {{{ZPos}}}, {{{Pitch}}}, {{{Yaw}}}
        * Environment statistics: {{{WorldTime}}} - current time in ticks, {{{TotalTime}}} - total world time, unaffected by ServerInitialConditions
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1804, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return low-level keyboard and mouse events.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1813, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return information on the current performance of the Minecraft system - eg tick speeds, etc.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1822, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return a JSON object called "LineOfSight", containing observations about the block or entity which is currently in the centre of the screen:

        * Hit details: {{{hitType}}} - will be "block" for a block, "entity" for an entity (eg spider, rabbit etc) or "item" for a free-floating item that can be picked up. {{{inRange}}} will be true if the block/entity is within the agent's reach - ie attacking or using will have an effect on the object. {{{distance}}} gives the straight-line distance from the agent.
        * Position: {{{x}}}, {{{y}}}, {{{z}}} - in the case of block hits, will be the precise point when the ray intercepts the block. {{{yaw}}}, {{{pitch}}} are also added for entities.
        * Type information: {{{type}}}, {{{colour}}}, {{{variant}}}, {{{facing}}}
        * Extra properties: in the case of block types, any extra properties will be returned by their minecraft name, prefixed with "prop_" (eg, for leaves, "prop_decayable" and "prop_check_decay") - this is the same data as can be seen by exploring Minecraft with the F3 debug information displayed. For floating items, the stack size is returned in {{{stackSize}}}
        * NBTTagCompound: for tile entity blocks, optionally returns a json object called "NBTTagCompound" which contains the entity's entire NBTTagCompound - eg useful for reading the text off signs, etc. Set {{{includeNBT}}} to true to receive this data.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1837, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute includeNBT uses Python identifier includeNBT
    __includeNBT = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'includeNBT'), 'includeNBT', '__httpProjectMalmo_microsoft_com_CTD_ANON_54_includeNBT', pyxb.binding.datatypes.boolean, unicode_default='false')
    __includeNBT._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1838, 6)
    __includeNBT._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1838, 6)
    
    includeNBT = property(__includeNBT.value, __includeNBT.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __includeNBT.name() : __includeNBT
    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return observations that describe the contents of the player's inventory.
        There are two modes - "flat" (the default) is provided for backwards compatibility, and behaves like this:

        The inventory contents are returned in a flat format in the root of the json observations.
        Up to four values are returned for each slot, if not empty: e.g. {{{InventorySlot_0_size}}} and {{{InventorySlot_0_item}}} containing the number and
        type of the item(s) in the slot, respectively, and {{{InventorySlot_0_colour}}} and {{{InventorySlot_0_variant}}} if the item has a colour/variation.
        Inventory slots are numbered 0 to 39 inclusive.
        If there is a container item available (eg the player is pointed at a chest), this will be returned in the same way, but "InventorySlot"
        will be replaced by "ContainerNameSlot" - eg {{{ShulkerBoxSlot_0_item}}} etc.
        
        If {{{flat}}} is false (recommended), the data is returned as an array of objects, one for each item in the inventory/inventories.
        The JSON array is called "inventory", and each item in the array will contain:
        * {{{type}}} - the type of the object in that ItemStack
        * {{{colour}}} - the colour, if relevant
        * {{{variant}}} - the variant, if relevant
        * {{{quantity}}} - the number of objects in the ItemStack
        * {{{index}}} - the slot number
        * {{{inventory}}} - the name of the inventory - will be "Inventory" for the player, or, for example, "ShulkerBox", "Chest" etc, if a container is available.
        This index and inventory information can be used to specify the item in the {{{InventoryCommands}}} - items are specified as inventory:index -
        eg "ShulkerBox:12"
        
        In addition to this information, whether {{{flat}}} is true or false, an array called "inventoriesAvailable" will also be returned.
        This will contain a list of all the inventories available (usually just the player's, but if the player is pointed at a container, this
        will also be available.)
        For each inventory, an object will be returned that specifies:
        * {{{name}}} - the inventory name (same as will be returned in the {{{inventory}}} field for any items in that inventory)
        * {{{size}}} - the number of slots the inventory provides.
        
        For a working example please see inventory_test.py in the Python samples folder.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1876, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute flat uses Python identifier flat
    __flat = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'flat'), 'flat', '__httpProjectMalmo_microsoft_com_CTD_ANON_55_flat', pyxb.binding.datatypes.boolean, unicode_default='true')
    __flat._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1877, 6)
    __flat._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1877, 6)
    
    flat = property(__flat.value, __flat.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __flat.name() : __flat
    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return an observation of the player's position that is unique for every cell on the x/z plane.
        This is useful for discrete-movement missions where we need to uniquely identify their location but don't mind how.

        The observation will contain the JSON element {{{cell}}} containing e.g. {{{(2,4)}}} if the player is standing at any location where
        x = 2 and z = 4.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1891, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return an observation that specifies the distance to a named location.

        A JSON element {{{distanceFromNAME}}} will be returned (where {{{NAME}}} is replaced with the name of the NamedPoint),
        with a value that is the distance.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1912, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Marker uses Python identifier Marker
    __Marker = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Marker'), 'Marker', '__httpProjectMalmo_microsoft_com_CTD_ANON_57_httpProjectMalmo_microsoft_comMarker', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1914, 8), )

    
    Marker = property(__Marker.value, __Marker.set, None, None)

    _ElementMap.update({
        __Marker.name() : __Marker
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type {http://ProjectMalmo.microsoft.com}GridDefinition with content type ELEMENT_ONLY
class GridDefinition (pyxb.binding.basis.complexTypeDefinition):
    """
        {{{name}}} - Each grid has a text label to identify it.
        
        {{{absoluteCoords}}} - If true, the min and max coordinates of the grid are interpreted as world coordinates. If false (the default)
        then the coordinates are relative to the player.
        
        {{{min}}}, {{{max}}} - The corners of the grid.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GridDefinition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1919, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}min uses Python identifier min
    __min = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'min'), 'min', '__httpProjectMalmo_microsoft_com_GridDefinition_httpProjectMalmo_microsoft_commin', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1931, 6), )

    
    min = property(__min.value, __min.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}max uses Python identifier max
    __max = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'max'), 'max', '__httpProjectMalmo_microsoft_com_GridDefinition_httpProjectMalmo_microsoft_commax', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1932, 6), )

    
    max = property(__max.value, __max.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpProjectMalmo_microsoft_com_GridDefinition_name', pyxb.binding.datatypes.Name, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1934, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1934, 4)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute absoluteCoords uses Python identifier absoluteCoords
    __absoluteCoords = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'absoluteCoords'), 'absoluteCoords', '__httpProjectMalmo_microsoft_com_GridDefinition_absoluteCoords', pyxb.binding.datatypes.boolean, unicode_default='false')
    __absoluteCoords._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1935, 4)
    __absoluteCoords._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1935, 4)
    
    absoluteCoords = property(__absoluteCoords.value, __absoluteCoords.set, None, None)

    _ElementMap.update({
        __min.name() : __min,
        __max.name() : __max
    })
    _AttributeMap.update({
        __name.name() : __name,
        __absoluteCoords.name() : __absoluteCoords
    })
_module_typeBindings.GridDefinition = GridDefinition
Namespace.addCategoryObject('typeBinding', 'GridDefinition', GridDefinition)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return observations that say what the nearby blocks are.

        For each {{{Grid}}} entry, a named JSON element will be returned with a 1D array of block types, in order along the x, then z, then y axes.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1946, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Grid uses Python identifier Grid
    __Grid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Grid'), 'Grid', '__httpProjectMalmo_microsoft_com_CTD_ANON_58_httpProjectMalmo_microsoft_comGrid', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1948, 8), )

    
    Grid = property(__Grid.value, __Grid.set, None, None)

    _ElementMap.update({
        __Grid.name() : __Grid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type {http://ProjectMalmo.microsoft.com}RangeDefinition with content type EMPTY
class RangeDefinition (pyxb.binding.basis.complexTypeDefinition):
    """
        Used by {{{ObservationFromNearbyEntities}}}. Defines the range within which entities will be returned. Eg a range of 10,1,10 will return all entities within +/-10 blocks of the agent in the x and z axes, and within +/-1 block vertically.
        
        {{{update_frequency}}} is measured in Minecraft world ticks, and allows the user to specify how often they would like to receive each observation. A value of 20, under normal Minecraft running conditions, for example, would return the entity list once per second.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RangeDefinition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1953, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpProjectMalmo_microsoft_com_RangeDefinition_name', pyxb.binding.datatypes.Name, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1961, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1961, 4)
    
    name = property(__name.value, __name.set, None, None)

    
    # Attribute xrange uses Python identifier xrange
    __xrange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'xrange'), 'xrange', '__httpProjectMalmo_microsoft_com_RangeDefinition_xrange', pyxb.binding.datatypes.decimal, required=True)
    __xrange._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1962, 4)
    __xrange._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1962, 4)
    
    xrange = property(__xrange.value, __xrange.set, None, None)

    
    # Attribute yrange uses Python identifier yrange
    __yrange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yrange'), 'yrange', '__httpProjectMalmo_microsoft_com_RangeDefinition_yrange', pyxb.binding.datatypes.decimal, required=True)
    __yrange._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1963, 4)
    __yrange._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1963, 4)
    
    yrange = property(__yrange.value, __yrange.set, None, None)

    
    # Attribute zrange uses Python identifier zrange
    __zrange = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'zrange'), 'zrange', '__httpProjectMalmo_microsoft_com_RangeDefinition_zrange', pyxb.binding.datatypes.decimal, required=True)
    __zrange._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1964, 4)
    __zrange._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1964, 4)
    
    zrange = property(__zrange.value, __zrange.set, None, None)

    
    # Attribute update_frequency uses Python identifier update_frequency
    __update_frequency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'update_frequency'), 'update_frequency', '__httpProjectMalmo_microsoft_com_RangeDefinition_update_frequency', pyxb.binding.datatypes.int, unicode_default='1')
    __update_frequency._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1965, 4)
    __update_frequency._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1965, 4)
    
    update_frequency = property(__update_frequency.value, __update_frequency.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name,
        __xrange.name() : __xrange,
        __yrange.name() : __yrange,
        __zrange.name() : __zrange,
        __update_frequency.name() : __update_frequency
    })
_module_typeBindings.RangeDefinition = RangeDefinition
Namespace.addCategoryObject('typeBinding', 'RangeDefinition', RangeDefinition)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return observations that list the positions of all entities that fall within the given ranges of the agent.

        A JSON array will be returned for each range requested, named using the {{{name}}} attribute of the range. Within the array will be a series of elements, one for each entity, containing the following:
        
        - name: a string describing the entity (eg from Types.xsd)
        
        - x: the x position of the entity
        
        - y: the y position of the entity
        
        - z: the z position of the entity
        
        - quantity: if items have been grouped together by Minecraft, this indicates the number in the stack
        
        - colour: if the item is a tile entity, with a colour, this will be present to describe the colour
        
        - variation: optional string to describe the variation - eg the type of egg, or brick, etc (see Types.xsd)
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1990, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Range uses Python identifier Range
    __Range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Range'), 'Range', '__httpProjectMalmo_microsoft_com_CTD_ANON_59_httpProjectMalmo_microsoft_comRange', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1992, 8), )

    
    Range = property(__Range.value, __Range.set, None, None)

    _ElementMap.update({
        __Range.name() : __Range
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """
        When present, the Mod will return observations that say what chat messages have occurred and from which player.
        It will also return messages for any title or subtitle change (eg via Minecraft's title command)

        A JSON element {{{Chat}}} will be returned, with a list of chat strings.
        In the same way, title changes and subtitle changes will be returned in {{{Title}}} and {{{Subtitle}}} respectively.
        
        Note that unless the AgentHost ObservationsPolicy is set to KEEP_ALL_OBSERVATIONS it is likely that chat messages will be missed.
        The default policy is LATEST_OBSERVATION_ONLY.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2010, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """
             When present, the Mod will return observations that detail how the agent is facing and what position the agent is in with respect to a compass.

             A JSON element will be returned for the compass in the agent's inventory. The JSON will contain the following

             - set: boolean on whether the compass is set

             - compass-x: the x coordinate value of the set compass, null if not set

             - compass-y: the y coordinate value of the set compass, null if not set

             - compass-z: the z coordinate value of the set compass, null if not set

             - relative-x: the relative x coordinate value of the player to the compass, null if not set

             - relative-y: the relative y coordinate value of the player to the compass, null if not set

             - relative-z: the relative z coordinate value of the player to the compass, null if not set

             - offset: the number of degrees the agent is facing away from the direction the compass is pointing
                
             - normalized-offset: the number of degrees the agent is facing away, with the agent considered 0 degrees

             - distance: the distance from the agent's location to the compass's location
         """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2041, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type {http://ProjectMalmo.microsoft.com}ChatMatchSpec with content type EMPTY
class ChatMatchSpec (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}ChatMatchSpec with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChatMatchSpec')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2175, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_ChatMatchSpec_description', pyxb.binding.datatypes.string, required=True)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2176, 4)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2176, 4)
    
    description = property(__description.value, __description.set, None, None)

    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_ChatMatchSpec_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2177, 4)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2177, 4)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_ChatMatchSpec_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2178, 4)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2178, 4)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    
    # Attribute regex uses Python identifier regex
    __regex = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'regex'), 'regex', '__httpProjectMalmo_microsoft_com_ChatMatchSpec_regex', pyxb.binding.datatypes.string, required=True)
    __regex._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2179, 3)
    __regex._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2179, 3)
    
    regex = property(__regex.value, __regex.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __description.name() : __description,
        __reward.name() : __reward,
        __distribution.name() : __distribution,
        __regex.name() : __regex
    })
_module_typeBindings.ChatMatchSpec = ChatMatchSpec
Namespace.addCategoryObject('typeBinding', 'ChatMatchSpec', ChatMatchSpec)


# Complex type {http://ProjectMalmo.microsoft.com}MissionEndRewardCase with content type EMPTY
class MissionEndRewardCase (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}MissionEndRewardCase with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MissionEndRewardCase')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2230, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_MissionEndRewardCase_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2231, 4)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2231, 4)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_MissionEndRewardCase_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2232, 4)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2232, 4)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_MissionEndRewardCase_description', pyxb.binding.datatypes.string, required=True)
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2233, 4)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2233, 4)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reward.name() : __reward,
        __distribution.name() : __distribution,
        __description.name() : __description
    })
_module_typeBindings.MissionEndRewardCase = MissionEndRewardCase
Namespace.addCategoryObject('typeBinding', 'MissionEndRewardCase', MissionEndRewardCase)


# Complex type {http://ProjectMalmo.microsoft.com}UnnamedGridDefinition with content type ELEMENT_ONLY
class UnnamedGridDefinition (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}UnnamedGridDefinition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UnnamedGridDefinition')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2268, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}min uses Python identifier min
    __min = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'min'), 'min', '__httpProjectMalmo_microsoft_com_UnnamedGridDefinition_httpProjectMalmo_microsoft_commin', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2270, 6), )

    
    min = property(__min.value, __min.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}max uses Python identifier max
    __max = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'max'), 'max', '__httpProjectMalmo_microsoft_com_UnnamedGridDefinition_httpProjectMalmo_microsoft_commax', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2277, 6), )

    
    max = property(__max.value, __max.set, None, None)

    _ElementMap.update({
        __min.name() : __min,
        __max.name() : __max
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.UnnamedGridDefinition = UnnamedGridDefinition
Namespace.addCategoryObject('typeBinding', 'UnnamedGridDefinition', UnnamedGridDefinition)


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2271, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_CTD_ANON_62_x', pyxb.binding.datatypes.int, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2272, 10)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2272, 10)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_CTD_ANON_62_y', pyxb.binding.datatypes.int, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2273, 10)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2273, 10)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_CTD_ANON_62_z', pyxb.binding.datatypes.int, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2274, 10)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2274, 10)
    
    z = property(__z.value, __z.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z
    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2278, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_CTD_ANON_63_x', pyxb.binding.datatypes.int, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2279, 10)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2279, 10)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_CTD_ANON_63_y', pyxb.binding.datatypes.int, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2280, 10)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2280, 10)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_CTD_ANON_63_z', pyxb.binding.datatypes.int, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2281, 10)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2281, 10)
    
    z = property(__z.value, __z.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """
              If present, the mission will end when the copy exactly matches the original. Set {{{description}}} to the quit code you'd like to receive when this happens. (See {{{RewardForMissionEnd}}}.)
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2304, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_CTD_ANON_64_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2305, 12)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2305, 12)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __description.name() : __description
    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """
        When this is included the agent's mission will end when they reach a specified position.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2430, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Marker uses Python identifier Marker
    __Marker = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Marker'), 'Marker', '__httpProjectMalmo_microsoft_com_CTD_ANON_65_httpProjectMalmo_microsoft_comMarker', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2432, 8), )

    
    Marker = property(__Marker.value, __Marker.set, None, None)

    _ElementMap.update({
        __Marker.name() : __Marker
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """
        When this is included the agent's mission will end when a certain amount of time has elapsed.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2443, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute timeLimitMs uses Python identifier timeLimitMs
    __timeLimitMs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'timeLimitMs'), 'timeLimitMs', '__httpProjectMalmo_microsoft_com_CTD_ANON_66_timeLimitMs', pyxb.binding.datatypes.decimal, required=True)
    __timeLimitMs._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2444, 6)
    __timeLimitMs._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2444, 6)
    
    timeLimitMs = property(__timeLimitMs.value, __timeLimitMs.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_CTD_ANON_66_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2445, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2445, 6)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __timeLimitMs.name() : __timeLimitMs,
        __description.name() : __description
    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """
        When this is included the agent's mission will end when they come in contact with a specified block type.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2455, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Block uses Python identifier Block
    __Block = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Block'), 'Block', '__httpProjectMalmo_microsoft_com_CTD_ANON_67_httpProjectMalmo_microsoft_comBlock', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2457, 8), )

    
    Block = property(__Block.value, __Block.set, None, None)

    _ElementMap.update({
        __Block.name() : __Block
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """
        When this is included the agent's mission will end when they collect (or craft) a specified item.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2468, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Item uses Python identifier Item
    __Item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Item'), 'Item', '__httpProjectMalmo_microsoft_com_CTD_ANON_68_httpProjectMalmo_microsoft_comItem', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2470, 8), )

    
    Item = property(__Item.value, __Item.set, None, None)

    _ElementMap.update({
        __Item.name() : __Item
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """
        Agent's mission will end when they corner a mob. If {{{global}}} is true then the agent doesn't have to be involved in catching the mob; otherwise they must be adjacent to the mob.
        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft's definition of caught, in which mobs can escape by jumping or passing through agents.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2492, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Mob uses Python identifier Mob
    __Mob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Mob'), 'Mob', '__httpProjectMalmo_microsoft_com_CTD_ANON_69_httpProjectMalmo_microsoft_comMob', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2494, 8), )

    
    Mob = property(__Mob.value, __Mob.set, None, None)

    _ElementMap.update({
        __Mob.name() : __Mob
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """
          Count the commands acted on by the Mod, and signal the end of the mission when the defined quota of commands has been reached.

          A total number of commands can be specified, and/or groups of commands can be given their own quota.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2538, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Quota uses Python identifier Quota
    __Quota = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Quota'), 'Quota', '__httpProjectMalmo_microsoft_com_CTD_ANON_70_httpProjectMalmo_microsoft_comQuota', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2540, 8), )

    
    Quota = property(__Quota.value, __Quota.set, None, None)

    
    # Attribute total uses Python identifier total
    __total = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'total'), 'total', '__httpProjectMalmo_microsoft_com_CTD_ANON_70_total', pyxb.binding.datatypes.int)
    __total._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2542, 6)
    __total._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2542, 6)
    
    total = property(__total.value, __total.set, None, "\n            Total number of commands allowed before the mission ends. (Note that a command must be acted on to be counted - sending malformed commands won't affect the total.)\n            \n            The check for total command use takes precedence over the individual group quotas, if used.\n          ")

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_CTD_ANON_70_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2551, 6)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2551, 6)
    
    description = property(__description.value, __description.set, None, '\n              String that will be returned from the {{{AgentQuitFromReachingCommandQuota}}} if the total allowed command usage is reached. This can be used in {{{RewardForMissionEnd}}}, and is also returned in the {{{MissionEnded}}} message.\n          ')

    _ElementMap.update({
        __Quota.name() : __Quota
    })
    _AttributeMap.update({
        __total.name() : __total,
        __description.name() : __description
    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """
              Each agent is specified in one of these sections, detailing the way they experience the world and the actions they can perform to interact with it.
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 90, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name'), 'Name', '__httpProjectMalmo_microsoft_com_CTD_ANON_71_httpProjectMalmo_microsoft_comName', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 92, 16), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}AgentStart uses Python identifier AgentStart
    __AgentStart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentStart'), 'AgentStart', '__httpProjectMalmo_microsoft_com_CTD_ANON_71_httpProjectMalmo_microsoft_comAgentStart', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 114, 4), )

    
    AgentStart = property(__AgentStart.value, __AgentStart.set, None, '\n              Defines the initial conditions of the player. This includes the location and the contents of their inventory.\n            ')

    
    # Element {http://ProjectMalmo.microsoft.com}AgentHandlers uses Python identifier AgentHandlers
    __AgentHandlers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgentHandlers'), 'AgentHandlers', '__httpProjectMalmo_microsoft_com_CTD_ANON_71_httpProjectMalmo_microsoft_comAgentHandlers', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 403, 4), )

    
    AgentHandlers = property(__AgentHandlers.value, __AgentHandlers.set, None, '\n              Defines the Mission Handlers block for an individual agent.\n            ')

    
    # Attribute mode uses Python identifier mode
    __mode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'mode'), 'mode', '__httpProjectMalmo_microsoft_com_CTD_ANON_71_mode', _module_typeBindings.GameMode, unicode_default='Survival')
    __mode._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 96, 12)
    __mode._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 96, 12)
    
    mode = property(__mode.value, __mode.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __AgentStart.name() : __AgentStart,
        __AgentHandlers.name() : __AgentHandlers
    })
    _AttributeMap.update({
        __mode.name() : __mode
    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type {http://ProjectMalmo.microsoft.com}PosAndDirection with content type EMPTY
class PosAndDirection (Pos):
    """
        An absolute position in the 3D Minecraft world that includes yaw and pitch.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PosAndDirection')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 25, 2)
    _ElementMap = Pos._ElementMap.copy()
    _AttributeMap = Pos._AttributeMap.copy()
    # Base type is Pos
    
    # Attribute x inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute y inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute z inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute yaw uses Python identifier yaw
    __yaw = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yaw'), 'yaw', '__httpProjectMalmo_microsoft_com_PosAndDirection_yaw', _module_typeBindings.STD_ANON_5, unicode_default='0')
    __yaw._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 33, 8)
    __yaw._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 33, 8)
    
    yaw = property(__yaw.value, __yaw.set, None, '\n              Defaults to facing South (0). North is 180.\n            ')

    
    # Attribute pitch uses Python identifier pitch
    __pitch = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'pitch'), 'pitch', '__httpProjectMalmo_microsoft_com_PosAndDirection_pitch', _module_typeBindings.STD_ANON_6, unicode_default='0')
    __pitch._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 46, 8)
    __pitch._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 46, 8)
    
    pitch = property(__pitch.value, __pitch.set, None, '\n              Defaults to looking straight ahead (0). +90 = look down. -90 = look up.\n            ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __yaw.name() : __yaw,
        __pitch.name() : __pitch
    })
_module_typeBindings.PosAndDirection = PosAndDirection
Namespace.addCategoryObject('typeBinding', 'PosAndDirection', PosAndDirection)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """
        Adds a series of joined rooms into the world.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 724, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}complexity uses Python identifier complexity
    __complexity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'complexity'), 'complexity', '__httpProjectMalmo_microsoft_com_CTD_ANON_72_httpProjectMalmo_microsoft_comcomplexity', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 726, 8), )

    
    complexity = property(__complexity.value, __complexity.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}specification uses Python identifier specification
    __specification = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'specification'), 'specification', '__httpProjectMalmo_microsoft_com_CTD_ANON_72_httpProjectMalmo_microsoft_comspecification', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 737, 8), )

    
    specification = property(__specification.value, __specification.set, None, None)

    
    # Attribute seed uses Python identifier seed
    __seed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'seed'), 'seed', '__httpProjectMalmo_microsoft_com_CTD_ANON_72_seed', pyxb.binding.datatypes.string)
    __seed._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 760, 6)
    __seed._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 760, 6)
    
    seed = property(__seed.value, __seed.set, None, None)

    
    # Attribute palette uses Python identifier palette
    __palette = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'palette'), 'palette', '__httpProjectMalmo_microsoft_com_CTD_ANON_72_palette', _module_typeBindings.PaletteEnum)
    __palette._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 761, 6)
    __palette._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 761, 6)
    
    palette = property(__palette.value, __palette.set, None, None)

    _ElementMap.update({
        __complexity.name() : __complexity,
        __specification.name() : __specification
    })
    _AttributeMap.update({
        __seed.name() : __seed,
        __palette.name() : __palette
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """
                Create an animation where the (x,y,z) position are determined by parametric equations. Recognised tokens are:

                * basic arithmetic operations: +, -, /, *, % (modulo), ^ (to the power of)
                * basic trig: sin, cos, tan, asin, acos, atan
                * abs (absolute value)
                * rand - replaces with a random float between 0 and 1
                * t - the integer time variable, incremented with each time interval

                For example, to create a structure which orbits in the x-z plane about the point (100,100,100) at a radius of 20, use:
                "100+20*cos(t)" and "100+20*sin(t)" for the x and z strings.

                The parser is not robust to mismatched brackets, typos, unrecognised tokens etc, and will fail silently.
              """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 839, 12)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}x uses Python identifier x
    __x = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'x'), 'x', '__httpProjectMalmo_microsoft_com_CTD_ANON_73_httpProjectMalmo_microsoft_comx', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 841, 16), )

    
    x = property(__x.value, __x.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}y uses Python identifier y
    __y = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'y'), 'y', '__httpProjectMalmo_microsoft_com_CTD_ANON_73_httpProjectMalmo_microsoft_comy', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 842, 16), )

    
    y = property(__y.value, __y.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}z uses Python identifier z
    __z = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'z'), 'z', '__httpProjectMalmo_microsoft_com_CTD_ANON_73_httpProjectMalmo_microsoft_comz', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 843, 16), )

    
    z = property(__z.value, __z.set, None, None)

    
    # Attribute seed uses Python identifier seed
    __seed = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'seed'), 'seed', '__httpProjectMalmo_microsoft_com_CTD_ANON_73_seed', _module_typeBindings.STD_ANON_13)
    __seed._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 845, 14)
    __seed._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 845, 14)
    
    seed = property(__seed.value, __seed.set, None, '\n                    The master seed for the random number generator used for any stochastic elements.\n                  ')

    _ElementMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z
    })
    _AttributeMap.update({
        __seed.name() : __seed
    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """
        Requests a 24bpp colour map - each object/entity represented by a solid block of colour.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1140, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Width uses Python identifier Width
    __Width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Width'), 'Width', '__httpProjectMalmo_microsoft_com_CTD_ANON_74_httpProjectMalmo_microsoft_comWidth', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1142, 8), )

    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}Height uses Python identifier Height
    __Height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Height'), 'Height', '__httpProjectMalmo_microsoft_com_CTD_ANON_74_httpProjectMalmo_microsoft_comHeight', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1143, 8), )

    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}ColourSpec uses Python identifier ColourSpec
    __ColourSpec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ColourSpec'), 'ColourSpec', '__httpProjectMalmo_microsoft_com_CTD_ANON_74_httpProjectMalmo_microsoft_comColourSpec', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1145, 10), )

    
    ColourSpec = property(__ColourSpec.value, __ColourSpec.set, None, None)

    
    # Attribute skyColour uses Python identifier skyColour
    __skyColour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'skyColour'), 'skyColour', '__httpProjectMalmo_microsoft_com_CTD_ANON_74_skyColour', _module_typeBindings.HexColour, unicode_default='fbceb1')
    __skyColour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1148, 6)
    __skyColour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1148, 6)
    
    skyColour = property(__skyColour.value, __skyColour.set, None, None)

    _ElementMap.update({
        __Width.name() : __Width,
        __Height.name() : __Height,
        __ColourSpec.name() : __ColourSpec
    })
    _AttributeMap.update({
        __skyColour.name() : __skyColour
    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """
        Requests that video frames be sent.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1158, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Width uses Python identifier Width
    __Width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Width'), 'Width', '__httpProjectMalmo_microsoft_com_CTD_ANON_75_httpProjectMalmo_microsoft_comWidth', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1160, 8), )

    
    Width = property(__Width.value, __Width.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}Height uses Python identifier Height
    __Height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Height'), 'Height', '__httpProjectMalmo_microsoft_com_CTD_ANON_75_httpProjectMalmo_microsoft_comHeight', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1161, 8), )

    
    Height = property(__Height.value, __Height.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}DepthScaling uses Python identifier DepthScaling
    __DepthScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DepthScaling'), 'DepthScaling', '__httpProjectMalmo_microsoft_com_CTD_ANON_75_httpProjectMalmo_microsoft_comDepthScaling', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1162, 8), )

    
    DepthScaling = property(__DepthScaling.value, __DepthScaling.set, None, None)

    
    # Attribute want_depth uses Python identifier want_depth
    __want_depth = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'want_depth'), 'want_depth', '__httpProjectMalmo_microsoft_com_CTD_ANON_75_want_depth', pyxb.binding.datatypes.boolean, unicode_default='false')
    __want_depth._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1190, 6)
    __want_depth._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1190, 6)
    
    want_depth = property(__want_depth.value, __want_depth.set, None, '\n            If true, returns depth in the fourth channel as RGBDRGBD.... Else as RGBRGB...\n          ')

    
    # Attribute viewpoint uses Python identifier viewpoint
    __viewpoint = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'viewpoint'), 'viewpoint', '__httpProjectMalmo_microsoft_com_CTD_ANON_75_viewpoint', _module_typeBindings.STD_ANON_17, unicode_default='0')
    __viewpoint._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1197, 6)
    __viewpoint._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1197, 6)
    
    viewpoint = property(__viewpoint.value, __viewpoint.set, None, '\n            Sets the camera viewpoint. 0 = first-person, 1 = behind, 2 = facing.\n          ')

    _ElementMap.update({
        __Width.name() : __Width,
        __Height.name() : __Height,
        __DepthScaling.name() : __DepthScaling
    })
    _AttributeMap.update({
        __want_depth.name() : __want_depth,
        __viewpoint.name() : __viewpoint
    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1163, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute min uses Python identifier min
    __min = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'min'), 'min', '__httpProjectMalmo_microsoft_com_CTD_ANON_76_min', _module_typeBindings.STD_ANON_15, unicode_default='0')
    __min._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1164, 12)
    __min._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1164, 12)
    
    min = property(__min.value, __min.set, None, None)

    
    # Attribute max uses Python identifier max
    __max = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'max'), 'max', '__httpProjectMalmo_microsoft_com_CTD_ANON_76_max', _module_typeBindings.STD_ANON_16, unicode_default='1')
    __max._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1172, 12)
    __max._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1172, 12)
    
    max = property(__max.value, __max.set, None, None)

    
    # Attribute autoscale uses Python identifier autoscale
    __autoscale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'autoscale'), 'autoscale', '__httpProjectMalmo_microsoft_com_CTD_ANON_76_autoscale', pyxb.binding.datatypes.boolean, unicode_default='true')
    __autoscale._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1180, 12)
    __autoscale._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1180, 12)
    
    autoscale = property(__autoscale.value, __autoscale.set, None, '\n                  Set to false to specify the min and max depths manually. Default is true, where uses the min and max depths in the scene.\n                ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __min.name() : __min,
        __max.name() : __max,
        __autoscale.name() : __autoscale
    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type {http://ProjectMalmo.microsoft.com}CommandListModifier with content type ELEMENT_ONLY
class CommandListModifier (pyxb.binding.basis.complexTypeDefinition):
    """
        Allow-list/deny-list base class - restricted by each command handler to only allow that handler's commands.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CommandListModifier')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1503, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CommandListModifier_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1510, 6), )

    
    command = property(__command.value, __command.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_CommandListModifier_type', _module_typeBindings.STD_ANON_18, unicode_default='deny-list')
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1512, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1512, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __command.name() : __command
    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.CommandListModifier = CommandListModifier
Namespace.addCategoryObject('typeBinding', 'CommandListModifier', CommandListModifier)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """
        Allows a user to specify that certain commands must be sent on a turn-by-turn basis - ie, in a multi-agent mission, placing the {{{DiscreteMovementCommand}}} handler inside the TurnBasedCommands section will mean that each agent must take it in turns to send a discrete movement command. See turn_based_test.py in the Python Samples for a demonstration/explanation of this.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1709, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}AbsoluteMovementCommands uses Python identifier AbsoluteMovementCommands
    __AbsoluteMovementCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommands'), 'AbsoluteMovementCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_77_httpProjectMalmo_microsoft_comAbsoluteMovementCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1558, 2), )

    
    AbsoluteMovementCommands = property(__AbsoluteMovementCommands.value, __AbsoluteMovementCommands.set, None, '\n        When present, the Mod will accept commands to set the player\'s position and orientation directly.\n\n        Commands take the form of "verb <value>" e.g. "{{{tpx 13}}}" to set the x-coordinate to 13.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}DiscreteMovementCommands uses Python identifier DiscreteMovementCommands
    __DiscreteMovementCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommands'), 'DiscreteMovementCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_77_httpProjectMalmo_microsoft_comDiscreteMovementCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1583, 2), )

    
    DiscreteMovementCommands = property(__DiscreteMovementCommands.value, __DiscreteMovementCommands.set, None, '\n        When present, the Mod will accept commands that control movement in discrete jumps.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards one square.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}InventoryCommands uses Python identifier InventoryCommands
    __InventoryCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InventoryCommands'), 'InventoryCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_77_httpProjectMalmo_microsoft_comInventoryCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1610, 2), )

    
    InventoryCommands = property(__InventoryCommands.value, __InventoryCommands.set, None, "\n        When present, the Mod will accept commands that control the player's inventory.\n      ")

    
    # Element {http://ProjectMalmo.microsoft.com}SimpleCraftCommands uses Python identifier SimpleCraftCommands
    __SimpleCraftCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommands'), 'SimpleCraftCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_77_httpProjectMalmo_microsoft_comSimpleCraftCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1633, 2), )

    
    SimpleCraftCommands = property(__SimpleCraftCommands.value, __SimpleCraftCommands.set, None, '\n        When present, the Mod will accept simple commands that implement a basic form of crafting.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}ChatCommands uses Python identifier ChatCommands
    __ChatCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChatCommands'), 'ChatCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_77_httpProjectMalmo_microsoft_comChatCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1656, 2), )

    
    ChatCommands = property(__ChatCommands.value, __ChatCommands.set, None, '\n        When present, the Mod will accept commands that send chat messages to the other players.\n      ')

    
    # Element {http://ProjectMalmo.microsoft.com}MissionQuitCommands uses Python identifier MissionQuitCommands
    __MissionQuitCommands = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommands'), 'MissionQuitCommands', '__httpProjectMalmo_microsoft_com_CTD_ANON_77_httpProjectMalmo_microsoft_comMissionQuitCommands', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1679, 2), )

    
    MissionQuitCommands = property(__MissionQuitCommands.value, __MissionQuitCommands.set, None, '\n        When present, the Mod will accept a command that quits the mission.\n      ')

    
    # Attribute requestedPosition uses Python identifier requestedPosition
    __requestedPosition = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'requestedPosition'), 'requestedPosition', '__httpProjectMalmo_microsoft_com_CTD_ANON_77_requestedPosition', _module_typeBindings.STD_ANON_19)
    __requestedPosition._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1711, 6)
    __requestedPosition._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1711, 6)
    
    requestedPosition = property(__requestedPosition.value, __requestedPosition.set, None, None)

    _ElementMap.update({
        __AbsoluteMovementCommands.name() : __AbsoluteMovementCommands,
        __DiscreteMovementCommands.name() : __DiscreteMovementCommands,
        __InventoryCommands.name() : __InventoryCommands,
        __SimpleCraftCommands.name() : __SimpleCraftCommands,
        __ChatCommands.name() : __ChatCommands,
        __MissionQuitCommands.name() : __MissionQuitCommands
    })
    _AttributeMap.update({
        __requestedPosition.name() : __requestedPosition
    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type {http://ProjectMalmo.microsoft.com}NamedPoint with content type EMPTY
class NamedPoint (Pos):
    """Complex type {http://ProjectMalmo.microsoft.com}NamedPoint with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NamedPoint')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1894, 2)
    _ElementMap = Pos._ElementMap.copy()
    _AttributeMap = Pos._AttributeMap.copy()
    # Base type is Pos
    
    # Attribute x inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute y inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute z inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__httpProjectMalmo_microsoft_com_NamedPoint_name', pyxb.binding.datatypes.Name, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1897, 8)
    __name._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1897, 8)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.NamedPoint = NamedPoint
Namespace.addCategoryObject('typeBinding', 'NamedPoint', NamedPoint)


# Complex type {http://ProjectMalmo.microsoft.com}PointWithReward with content type EMPTY
class PointWithReward (Pos):
    """Complex type {http://ProjectMalmo.microsoft.com}PointWithReward with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PointWithReward')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2062, 2)
    _ElementMap = Pos._ElementMap.copy()
    _AttributeMap = Pos._AttributeMap.copy()
    # Base type is Pos
    
    # Attribute x inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute y inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute z inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_PointWithReward_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2065, 8)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2065, 8)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute tolerance uses Python identifier tolerance
    __tolerance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'tolerance'), 'tolerance', '__httpProjectMalmo_microsoft_com_PointWithReward_tolerance', pyxb.binding.datatypes.decimal, required=True)
    __tolerance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2066, 8)
    __tolerance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2066, 8)
    
    tolerance = property(__tolerance.value, __tolerance.set, None, None)

    
    # Attribute oneshot uses Python identifier oneshot
    __oneshot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'oneshot'), 'oneshot', '__httpProjectMalmo_microsoft_com_PointWithReward_oneshot', pyxb.binding.datatypes.boolean, unicode_default='true')
    __oneshot._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2067, 8)
    __oneshot._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2067, 8)
    
    oneshot = property(__oneshot.value, __oneshot.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_PointWithReward_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2068, 8)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2068, 8)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reward.name() : __reward,
        __tolerance.name() : __tolerance,
        __oneshot.name() : __oneshot,
        __distribution.name() : __distribution
    })
_module_typeBindings.PointWithReward = PointWithReward
Namespace.addCategoryObject('typeBinding', 'PointWithReward', PointWithReward)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when an entity is damaged.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2085, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Mob uses Python identifier Mob
    __Mob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Mob'), 'Mob', '__httpProjectMalmo_microsoft_com_CTD_ANON_78_httpProjectMalmo_microsoft_comMob', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2087, 8), )

    
    Mob = property(__Mob.value, __Mob.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_78_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __Mob.name() : __Mob
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when a specified position is reached by the agent.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2099, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Marker uses Python identifier Marker
    __Marker = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Marker'), 'Marker', '__httpProjectMalmo_microsoft_com_CTD_ANON_79_httpProjectMalmo_microsoft_comMarker', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2101, 8), )

    
    Marker = property(__Marker.value, __Marker.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_79_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __Marker.name() : __Marker
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a rewards when an agent comes in contact with a specific block type.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2154, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Block uses Python identifier Block
    __Block = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Block'), 'Block', '__httpProjectMalmo_microsoft_com_CTD_ANON_80_httpProjectMalmo_microsoft_comBlock', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2156, 8), )

    
    Block = property(__Block.value, __Block.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_80_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __Block.name() : __Block
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when the agent issues a command.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2168, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_81_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_CTD_ANON_81_reward', pyxb.binding.datatypes.decimal, unicode_default='-1.0')
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2169, 6)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2169, 6)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_CTD_ANON_81_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2170, 6)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2170, 6)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __dimension.name() : __dimension,
        __reward.name() : __reward,
        __distribution.name() : __distribution
    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when the agent sends a chat message that matches a given regular expression (supports Java regex syntax).
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2188, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}ChatMatch uses Python identifier ChatMatch
    __ChatMatch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChatMatch'), 'ChatMatch', '__httpProjectMalmo_microsoft_com_CTD_ANON_82_httpProjectMalmo_microsoft_comChatMatch', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2190, 8), )

    
    ChatMatch = property(__ChatMatch.value, __ChatMatch.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_82_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __ChatMatch.name() : __ChatMatch
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when the agent collects a specific item.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2208, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Item uses Python identifier Item
    __Item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Item'), 'Item', '__httpProjectMalmo_microsoft_com_CTD_ANON_83_httpProjectMalmo_microsoft_comItem', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2210, 8), )

    
    Item = property(__Item.value, __Item.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_83_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __Item.name() : __Item
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when an agent discards a specific item.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2222, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Item uses Python identifier Item
    __Item = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Item'), 'Item', '__httpProjectMalmo_microsoft_com_CTD_ANON_84_httpProjectMalmo_microsoft_comItem', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2224, 8), )

    
    Item = property(__Item.value, __Item.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_84_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __Item.name() : __Item
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.CTD_ANON_84 = CTD_ANON_84


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when the mission ends for a specified reason.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2242, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Reward uses Python identifier Reward
    __Reward = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Reward'), 'Reward', '__httpProjectMalmo_microsoft_com_CTD_ANON_85_httpProjectMalmo_microsoft_comReward', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2244, 8), )

    
    Reward = property(__Reward.value, __Reward.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_85_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    
    # Attribute rewardForDeath uses Python identifier rewardForDeath
    __rewardForDeath = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'rewardForDeath'), 'rewardForDeath', '__httpProjectMalmo_microsoft_com_CTD_ANON_85_rewardForDeath', pyxb.binding.datatypes.decimal, unicode_default='0.0')
    __rewardForDeath._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2246, 6)
    __rewardForDeath._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2246, 6)
    
    rewardForDeath = property(__rewardForDeath.value, __rewardForDeath.set, None, None)

    
    # Attribute rewardForDeathDistribution uses Python identifier rewardForDeathDistribution
    __rewardForDeathDistribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'rewardForDeathDistribution'), 'rewardForDeathDistribution', '__httpProjectMalmo_microsoft_com_CTD_ANON_85_rewardForDeathDistribution', pyxb.binding.datatypes.string, unicode_default='')
    __rewardForDeathDistribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2247, 6)
    __rewardForDeathDistribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2247, 6)
    
    rewardForDeathDistribution = property(__rewardForDeathDistribution.value, __rewardForDeathDistribution.set, None, None)

    _ElementMap.update({
        __Reward.name() : __Reward
    })
    _AttributeMap.update({
        __dimension.name() : __dimension,
        __rewardForDeath.name() : __rewardForDeath,
        __rewardForDeathDistribution.name() : __rewardForDeathDistribution
    })
_module_typeBindings.CTD_ANON_85 = CTD_ANON_85


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """
        Sends a reward when the agent copies blocks from a given structure.
        
        NOTE: This will do nothing unless you have set up a {{{BuildBattleDecorator}}} on the server.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2295, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}RewardDensity uses Python identifier RewardDensity
    __RewardDensity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RewardDensity'), 'RewardDensity', '__httpProjectMalmo_microsoft_com_CTD_ANON_86_httpProjectMalmo_microsoft_comRewardDensity', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2297, 8), )

    
    RewardDensity = property(__RewardDensity.value, __RewardDensity.set, None, None)

    
    # Element {http://ProjectMalmo.microsoft.com}AddQuitProducer uses Python identifier AddQuitProducer
    __AddQuitProducer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AddQuitProducer'), 'AddQuitProducer', '__httpProjectMalmo_microsoft_com_CTD_ANON_86_httpProjectMalmo_microsoft_comAddQuitProducer', False, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2298, 8), )

    
    AddQuitProducer = property(__AddQuitProducer.value, __AddQuitProducer.set, None, "\n              If present, the mission will end when the copy exactly matches the original. Set {{{description}}} to the quit code you'd like to receive when this happens. (See {{{RewardForMissionEnd}}}.)\n            ")

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_86_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    
    # Attribute rewardScale uses Python identifier rewardScale
    __rewardScale = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'rewardScale'), 'rewardScale', '__httpProjectMalmo_microsoft_com_CTD_ANON_86_rewardScale', pyxb.binding.datatypes.decimal, unicode_default='5.0')
    __rewardScale._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2310, 6)
    __rewardScale._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2310, 6)
    
    rewardScale = property(__rewardScale.value, __rewardScale.set, None, "\n              This is the reward to be added or deducted for each block event.\n              \n              The rewards are calculated as follows:\n              - For destroying a correct block: -1 * rewardScale\n              - For destroying an incorrect block: +1 * rewardScale\n              - For placing a correct block: +1 * rewardScale\n              - For placing an incorrect block: -1 * rewardScale\n\n              If {{{RewardDensity}}} is set to {{{{PER_BLOCK}}}, this reward will arrive after each block transaction. If it's set to {{{MISSION_END}}}, the individual rewards will not be sent, but will be summed throughout the course of the mission, and the resulting total will be sent as the final reward.\n            ")

    
    # Attribute rewardDistribution uses Python identifier rewardDistribution
    __rewardDistribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'rewardDistribution'), 'rewardDistribution', '__httpProjectMalmo_microsoft_com_CTD_ANON_86_rewardDistribution', pyxb.binding.datatypes.string, unicode_default='')
    __rewardDistribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2325, 8)
    __rewardDistribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2325, 8)
    
    rewardDistribution = property(__rewardDistribution.value, __rewardDistribution.set, None, None)

    
    # Attribute rewardForCompletion uses Python identifier rewardForCompletion
    __rewardForCompletion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'rewardForCompletion'), 'rewardForCompletion', '__httpProjectMalmo_microsoft_com_CTD_ANON_86_rewardForCompletion', pyxb.binding.datatypes.decimal, unicode_default='200.0')
    __rewardForCompletion._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2326, 8)
    __rewardForCompletion._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2326, 8)
    
    rewardForCompletion = property(__rewardForCompletion.value, __rewardForCompletion.set, None, '\n              This is the extra reward to be added when the copy exactly matches the original. (Will only be applied once.)\n            ')

    _ElementMap.update({
        __RewardDensity.name() : __RewardDensity,
        __AddQuitProducer.name() : __AddQuitProducer
    })
    _AttributeMap.update({
        __dimension.name() : __dimension,
        __rewardScale.name() : __rewardScale,
        __rewardDistribution.name() : __rewardDistribution,
        __rewardForCompletion.name() : __rewardForCompletion
    })
_module_typeBindings.CTD_ANON_86 = CTD_ANON_86


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """
        Reward that is dependent on time. Can be received per tick, or just once at the end.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2361, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_87_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    
    # Attribute initialReward uses Python identifier initialReward
    __initialReward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'initialReward'), 'initialReward', '__httpProjectMalmo_microsoft_com_CTD_ANON_87_initialReward', pyxb.binding.datatypes.decimal, required=True)
    __initialReward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2363, 6)
    __initialReward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2363, 6)
    
    initialReward = property(__initialReward.value, __initialReward.set, None, None)

    
    # Attribute delta uses Python identifier delta
    __delta = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'delta'), 'delta', '__httpProjectMalmo_microsoft_com_CTD_ANON_87_delta', pyxb.binding.datatypes.decimal, required=True)
    __delta._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2364, 6)
    __delta._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2364, 6)
    
    delta = property(__delta.value, __delta.set, None, None)

    
    # Attribute density uses Python identifier density
    __density = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'density'), 'density', '__httpProjectMalmo_microsoft_com_CTD_ANON_87_density', _module_typeBindings.RewardDensityForTimeTaken, required=True)
    __density._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2365, 6)
    __density._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2365, 6)
    
    density = property(__density.value, __density.set, None, None)

    
    # Attribute rewardDistribution uses Python identifier rewardDistribution
    __rewardDistribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'rewardDistribution'), 'rewardDistribution', '__httpProjectMalmo_microsoft_com_CTD_ANON_87_rewardDistribution', pyxb.binding.datatypes.string, unicode_default='')
    __rewardDistribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2366, 6)
    __rewardDistribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2366, 6)
    
    rewardDistribution = property(__rewardDistribution.value, __rewardDistribution.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __dimension.name() : __dimension,
        __initialReward.name() : __initialReward,
        __delta.name() : __delta,
        __density.name() : __density,
        __rewardDistribution.name() : __rewardDistribution
    })
_module_typeBindings.CTD_ANON_87 = CTD_ANON_87


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """
        Reward for cornering a mob, such that it cannot move from its current square without passing through an agent.
        If {{{global}}} is true then the agent doesn't have to be involved in catching the mob; otherwise they must be adjacent to the mob.
        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft's definition of caught, in which mobs can escape by jumping or passing through agents.
        If {{{oneshot}}} is true, the reward will only be counted once per entity.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2389, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://ProjectMalmo.microsoft.com}Mob uses Python identifier Mob
    __Mob = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Mob'), 'Mob', '__httpProjectMalmo_microsoft_com_CTD_ANON_88_httpProjectMalmo_microsoft_comMob', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2391, 8), )

    
    Mob = property(__Mob.value, __Mob.set, None, None)

    
    # Attribute dimension uses Python identifier dimension
    __dimension = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'dimension'), 'dimension', '__httpProjectMalmo_microsoft_com_CTD_ANON_88_dimension', _module_typeBindings.Dimension, unicode_default='0')
    __dimension._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    __dimension._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2059, 4)
    
    dimension = property(__dimension.value, __dimension.set, None, None)

    _ElementMap.update({
        __Mob.name() : __Mob
    })
    _AttributeMap.update({
        __dimension.name() : __dimension
    })
_module_typeBindings.CTD_ANON_88 = CTD_ANON_88


# Complex type {http://ProjectMalmo.microsoft.com}PointWithToleranceAndDescription with content type EMPTY
class PointWithToleranceAndDescription (Pos):
    """Complex type {http://ProjectMalmo.microsoft.com}PointWithToleranceAndDescription with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PointWithToleranceAndDescription')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2399, 2)
    _ElementMap = Pos._ElementMap.copy()
    _AttributeMap = Pos._AttributeMap.copy()
    # Base type is Pos
    
    # Attribute x inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute y inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute z inherited from {http://ProjectMalmo.microsoft.com}Pos
    
    # Attribute tolerance uses Python identifier tolerance
    __tolerance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'tolerance'), 'tolerance', '__httpProjectMalmo_microsoft_com_PointWithToleranceAndDescription_tolerance', pyxb.binding.datatypes.decimal, unicode_default='0.5')
    __tolerance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2402, 8)
    __tolerance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2402, 8)
    
    tolerance = property(__tolerance.value, __tolerance.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_PointWithToleranceAndDescription_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2403, 8)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2403, 8)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __tolerance.name() : __tolerance,
        __description.name() : __description
    })
_module_typeBindings.PointWithToleranceAndDescription = PointWithToleranceAndDescription
Namespace.addCategoryObject('typeBinding', 'PointWithToleranceAndDescription', PointWithToleranceAndDescription)


# Complex type {http://ProjectMalmo.microsoft.com}InventoryObjectType with content type EMPTY
class InventoryObjectType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}InventoryObjectType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InventoryObjectType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 244, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute slot uses Python identifier slot
    __slot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'slot'), 'slot', '__httpProjectMalmo_microsoft_com_InventoryObjectType_slot', _module_typeBindings.STD_ANON_3, required=True)
    __slot._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 245, 8)
    __slot._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 245, 8)
    
    slot = property(__slot.value, __slot.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_InventoryObjectType_type', _module_typeBindings.BlockOrItem, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 253, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 253, 8)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_InventoryObjectType_variant', _module_typeBindings.Variation)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 254, 8)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 254, 8)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_InventoryObjectType_colour', _module_typeBindings.Colour)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 255, 8)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 255, 8)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'quantity'), 'quantity', '__httpProjectMalmo_microsoft_com_InventoryObjectType_quantity', _module_typeBindings.STD_ANON_4, unicode_default='1')
    __quantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 256, 8)
    __quantity._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 256, 8)
    
    quantity = property(__quantity.value, __quantity.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __slot.name() : __slot,
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __quantity.name() : __quantity
    })
_module_typeBindings.InventoryObjectType = InventoryObjectType
Namespace.addCategoryObject('typeBinding', 'InventoryObjectType', InventoryObjectType)


# Complex type {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType with content type EMPTY
class DrawBlockBasedObjectType (DrawObjectType_):
    """
        Base class for all block-based draw objects.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawBlockBasedObjectType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 518, 2)
    _ElementMap = DrawObjectType_._ElementMap.copy()
    _AttributeMap = DrawObjectType_._AttributeMap.copy()
    # Base type is DrawObjectType_
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_DrawBlockBasedObjectType_type', _module_typeBindings.BlockType, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 526, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 526, 8)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_DrawBlockBasedObjectType_variant', _module_typeBindings.Variation)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 527, 8)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 527, 8)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_DrawBlockBasedObjectType_colour', _module_typeBindings.Colour)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 528, 8)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 528, 8)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute face uses Python identifier face
    __face = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'face'), 'face', '__httpProjectMalmo_microsoft_com_DrawBlockBasedObjectType_face', _module_typeBindings.Facing)
    __face._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 529, 8)
    __face._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 529, 8)
    
    face = property(__face.value, __face.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __face.name() : __face
    })
_module_typeBindings.DrawBlockBasedObjectType = DrawBlockBasedObjectType
Namespace.addCategoryObject('typeBinding', 'DrawBlockBasedObjectType', DrawBlockBasedObjectType)


# Complex type {http://ProjectMalmo.microsoft.com}DrawItem with content type EMPTY
class DrawItem_ (DrawObjectType_):
    """
        Specify an item by location and type.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawItem')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 562, 2)
    _ElementMap = DrawObjectType_._ElementMap.copy()
    _AttributeMap = DrawObjectType_._AttributeMap.copy()
    # Base type is DrawObjectType_
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_DrawItem__x', pyxb.binding.datatypes.int, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 570, 8)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 570, 8)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_DrawItem__y', pyxb.binding.datatypes.int, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 571, 8)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 571, 8)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_DrawItem__z', pyxb.binding.datatypes.int, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 572, 8)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 572, 8)
    
    z = property(__z.value, __z.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_DrawItem__type', _module_typeBindings.BlockOrItem, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 573, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 573, 8)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_DrawItem__variant', _module_typeBindings.Variation)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 574, 8)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 574, 8)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_DrawItem__colour', _module_typeBindings.Colour)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 575, 8)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 575, 8)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute face uses Python identifier face
    __face = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'face'), 'face', '__httpProjectMalmo_microsoft_com_DrawItem__face', _module_typeBindings.Facing)
    __face._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 576, 8)
    __face._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 576, 8)
    
    face = property(__face.value, __face.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z,
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __face.name() : __face
    })
_module_typeBindings.DrawItem_ = DrawItem_
Namespace.addCategoryObject('typeBinding', 'DrawItem', DrawItem_)


# Complex type {http://ProjectMalmo.microsoft.com}ContainedObjectType with content type EMPTY
class ContainedObjectType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}ContainedObjectType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContainedObjectType')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 581, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_ContainedObjectType_type', _module_typeBindings.BlockOrItem, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 582, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 582, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_ContainedObjectType_variant', _module_typeBindings.Variation)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 583, 4)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 583, 4)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_ContainedObjectType_colour', _module_typeBindings.Colour)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 584, 4)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 584, 4)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'quantity'), 'quantity', '__httpProjectMalmo_microsoft_com_ContainedObjectType_quantity', pyxb.binding.datatypes.int, unicode_default='1')
    __quantity._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 585, 4)
    __quantity._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 585, 4)
    
    quantity = property(__quantity.value, __quantity.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __quantity.name() : __quantity
    })
_module_typeBindings.ContainedObjectType = ContainedObjectType
Namespace.addCategoryObject('typeBinding', 'ContainedObjectType', ContainedObjectType)


# Complex type {http://ProjectMalmo.microsoft.com}DrawContainer with content type ELEMENT_ONLY
class DrawContainer_ (DrawObjectType_):
    """
        Specify a container item by location and type and contents.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawContainer')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 588, 2)
    _ElementMap = DrawObjectType_._ElementMap.copy()
    _AttributeMap = DrawObjectType_._AttributeMap.copy()
    # Base type is DrawObjectType_
    
    # Element {http://ProjectMalmo.microsoft.com}Object uses Python identifier Object
    __Object = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object'), 'Object', '__httpProjectMalmo_microsoft_com_DrawContainer__httpProjectMalmo_microsoft_comObject', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 597, 10), )

    
    Object = property(__Object.value, __Object.set, None, None)

    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_DrawContainer__x', pyxb.binding.datatypes.int, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 599, 8)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 599, 8)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_DrawContainer__y', pyxb.binding.datatypes.int, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 600, 8)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 600, 8)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_DrawContainer__z', pyxb.binding.datatypes.int, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 601, 8)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 601, 8)
    
    z = property(__z.value, __z.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_DrawContainer__type', _module_typeBindings.ContainerType, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 602, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 602, 8)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_DrawContainer__variant', _module_typeBindings.Variation)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 603, 8)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 603, 8)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_DrawContainer__colour', _module_typeBindings.Colour)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 604, 8)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 604, 8)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute face uses Python identifier face
    __face = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'face'), 'face', '__httpProjectMalmo_microsoft_com_DrawContainer__face', _module_typeBindings.Facing)
    __face._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 605, 8)
    __face._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 605, 8)
    
    face = property(__face.value, __face.set, None, None)

    _ElementMap.update({
        __Object.name() : __Object
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z,
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __face.name() : __face
    })
_module_typeBindings.DrawContainer_ = DrawContainer_
Namespace.addCategoryObject('typeBinding', 'DrawContainer', DrawContainer_)


# Complex type {http://ProjectMalmo.microsoft.com}DrawSign with content type EMPTY
class DrawSign_ (DrawObjectType_):
    """
        Draw a sign at the required location with the specified text.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawSign')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 610, 2)
    _ElementMap = DrawObjectType_._ElementMap.copy()
    _AttributeMap = DrawObjectType_._AttributeMap.copy()
    # Base type is DrawObjectType_
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_DrawSign__x', pyxb.binding.datatypes.int, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 618, 8)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 618, 8)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_DrawSign__y', pyxb.binding.datatypes.int, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 619, 8)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 619, 8)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_DrawSign__z', pyxb.binding.datatypes.int, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 620, 8)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 620, 8)
    
    z = property(__z.value, __z.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_DrawSign__type', _module_typeBindings.SignType, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 621, 8)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 621, 8)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_DrawSign__variant', _module_typeBindings.Variation)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 622, 8)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 622, 8)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_DrawSign__colour', _module_typeBindings.Colour)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 623, 8)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 623, 8)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute face uses Python identifier face
    __face = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'face'), 'face', '__httpProjectMalmo_microsoft_com_DrawSign__face', _module_typeBindings.Facing)
    __face._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 624, 8)
    __face._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 624, 8)
    
    face = property(__face.value, __face.set, None, None)

    
    # Attribute line1 uses Python identifier line1
    __line1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'line1'), 'line1', '__httpProjectMalmo_microsoft_com_DrawSign__line1', pyxb.binding.datatypes.string)
    __line1._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 625, 8)
    __line1._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 625, 8)
    
    line1 = property(__line1.value, __line1.set, None, None)

    
    # Attribute line2 uses Python identifier line2
    __line2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'line2'), 'line2', '__httpProjectMalmo_microsoft_com_DrawSign__line2', pyxb.binding.datatypes.string)
    __line2._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 626, 8)
    __line2._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 626, 8)
    
    line2 = property(__line2.value, __line2.set, None, None)

    
    # Attribute line3 uses Python identifier line3
    __line3 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'line3'), 'line3', '__httpProjectMalmo_microsoft_com_DrawSign__line3', pyxb.binding.datatypes.string)
    __line3._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 627, 8)
    __line3._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 627, 8)
    
    line3 = property(__line3.value, __line3.set, None, None)

    
    # Attribute line4 uses Python identifier line4
    __line4 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'line4'), 'line4', '__httpProjectMalmo_microsoft_com_DrawSign__line4', pyxb.binding.datatypes.string)
    __line4._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 628, 8)
    __line4._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 628, 8)
    
    line4 = property(__line4.value, __line4.set, None, None)

    
    # Attribute rotation uses Python identifier rotation
    __rotation = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'rotation'), 'rotation', '__httpProjectMalmo_microsoft_com_DrawSign__rotation', pyxb.binding.datatypes.int)
    __rotation._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 629, 8)
    __rotation._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 629, 8)
    
    rotation = property(__rotation.value, __rotation.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z,
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __face.name() : __face,
        __line1.name() : __line1,
        __line2.name() : __line2,
        __line3.name() : __line3,
        __line4.name() : __line4,
        __rotation.name() : __rotation
    })
_module_typeBindings.DrawSign_ = DrawSign_
Namespace.addCategoryObject('typeBinding', 'DrawSign', DrawSign_)


# Complex type {http://ProjectMalmo.microsoft.com}DrawEntity with content type EMPTY
class DrawEntity_ (DrawObjectType_):
    """
            Specify an entity by location and type.
        """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawEntity')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 634, 2)
    _ElementMap = DrawObjectType_._ElementMap.copy()
    _AttributeMap = DrawObjectType_._AttributeMap.copy()
    # Base type is DrawObjectType_
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_DrawEntity__x', pyxb.binding.datatypes.decimal, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 642, 12)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 642, 12)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_DrawEntity__y', pyxb.binding.datatypes.decimal, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 643, 12)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 643, 12)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_DrawEntity__z', pyxb.binding.datatypes.decimal, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 644, 12)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 644, 12)
    
    z = property(__z.value, __z.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_DrawEntity__type', _module_typeBindings.SpawnableTypes, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 645, 12)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 645, 12)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute yaw uses Python identifier yaw
    __yaw = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yaw'), 'yaw', '__httpProjectMalmo_microsoft_com_DrawEntity__yaw', pyxb.binding.datatypes.decimal, unicode_default='0')
    __yaw._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 646, 12)
    __yaw._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 646, 12)
    
    yaw = property(__yaw.value, __yaw.set, None, None)

    
    # Attribute pitch uses Python identifier pitch
    __pitch = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'pitch'), 'pitch', '__httpProjectMalmo_microsoft_com_DrawEntity__pitch', pyxb.binding.datatypes.decimal, unicode_default='0')
    __pitch._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 647, 12)
    __pitch._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 647, 12)
    
    pitch = property(__pitch.value, __pitch.set, None, None)

    
    # Attribute xVel uses Python identifier xVel
    __xVel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'xVel'), 'xVel', '__httpProjectMalmo_microsoft_com_DrawEntity__xVel', pyxb.binding.datatypes.decimal, unicode_default='0')
    __xVel._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 648, 12)
    __xVel._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 648, 12)
    
    xVel = property(__xVel.value, __xVel.set, None, None)

    
    # Attribute yVel uses Python identifier yVel
    __yVel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'yVel'), 'yVel', '__httpProjectMalmo_microsoft_com_DrawEntity__yVel', pyxb.binding.datatypes.decimal, unicode_default='0')
    __yVel._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 649, 12)
    __yVel._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 649, 12)
    
    yVel = property(__yVel.value, __yVel.set, None, None)

    
    # Attribute zVel uses Python identifier zVel
    __zVel = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'zVel'), 'zVel', '__httpProjectMalmo_microsoft_com_DrawEntity__zVel', pyxb.binding.datatypes.decimal, unicode_default='0')
    __zVel._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 650, 12)
    __zVel._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 650, 12)
    
    zVel = property(__zVel.value, __zVel.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z,
        __type.name() : __type,
        __yaw.name() : __yaw,
        __pitch.name() : __pitch,
        __xVel.name() : __xVel,
        __yVel.name() : __yVel,
        __zVel.name() : __zVel
    })
_module_typeBindings.DrawEntity_ = DrawEntity_
Namespace.addCategoryObject('typeBinding', 'DrawEntity', DrawEntity_)


# Complex type {http://ProjectMalmo.microsoft.com}MobWithColour with content type EMPTY
class MobWithColour (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}MobWithColour with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobWithColour')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1129, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_MobWithColour_type', _module_typeBindings.MobList, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1130, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1130, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_MobWithColour_colour', _module_typeBindings.HexColour, required=True)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1131, 4)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1131, 4)
    
    colour = property(__colour.value, __colour.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __colour.name() : __colour
    })
_module_typeBindings.MobWithColour = MobWithColour
Namespace.addCategoryObject('typeBinding', 'MobWithColour', MobWithColour)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1535, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_89_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1539, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_89 = CTD_ANON_89


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1569, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_90_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1573, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_90 = CTD_ANON_90


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1594, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_91_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1598, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_91 = CTD_ANON_91


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1619, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_92_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1623, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_92 = CTD_ANON_92


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1642, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_93_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1646, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_93 = CTD_ANON_93


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1665, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_94_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1669, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_94 = CTD_ANON_94


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1688, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_95_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1692, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_95 = CTD_ANON_95


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (CommandListModifier):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1730, 10)
    _ElementMap = CommandListModifier._ElementMap.copy()
    _AttributeMap = CommandListModifier._AttributeMap.copy()
    # Base type is CommandListModifier
    
    # Element {http://ProjectMalmo.microsoft.com}command uses Python identifier command
    __command_ = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpProjectMalmo_microsoft_com_CTD_ANON_96_httpProjectMalmo_microsoft_comcommand', True, pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1734, 18), )

    
    command = property(__command_.value, __command_.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}CommandListModifier
    _ElementMap.update({
        __command_.name() : __command_
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_96 = CTD_ANON_96


# Complex type {http://ProjectMalmo.microsoft.com}MobWithReward with content type EMPTY
class MobWithReward (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}MobWithReward with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobWithReward')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2073, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_MobWithReward_type', _module_typeBindings.MobList, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2074, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2074, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_MobWithReward_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2075, 4)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2075, 4)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_MobWithReward_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2076, 4)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2076, 4)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __reward.name() : __reward,
        __distribution.name() : __distribution
    })
_module_typeBindings.MobWithReward = MobWithReward
Namespace.addCategoryObject('typeBinding', 'MobWithReward', MobWithReward)


# Complex type {http://ProjectMalmo.microsoft.com}MobWithDescription with content type EMPTY
class MobWithDescription (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}MobWithDescription with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobWithDescription')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2479, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_MobWithDescription_type', _module_typeBindings.MobList, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2480, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2480, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_MobWithDescription_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2481, 4)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2481, 4)
    
    description = property(__description.value, __description.set, None, None)

    
    # Attribute global uses Python identifier global_
    __global = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'global'), 'global_', '__httpProjectMalmo_microsoft_com_MobWithDescription_global', pyxb.binding.datatypes.boolean, unicode_default='false')
    __global._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2482, 4)
    __global._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2482, 4)
    
    global_ = property(__global.value, __global.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __description.name() : __description,
        __global.name() : __global
    })
_module_typeBindings.MobWithDescription = MobWithDescription
Namespace.addCategoryObject('typeBinding', 'MobWithDescription', MobWithDescription)


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_97 (InventoryObjectType):
    """
              Defines an item in the inventory - deprecated, use InventoryObject instead
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 280, 8)
    _ElementMap = InventoryObjectType._ElementMap.copy()
    _AttributeMap = InventoryObjectType._AttributeMap.copy()
    # Base type is InventoryObjectType
    
    # Attribute slot inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute quantity inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_97 = CTD_ANON_97


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_98 (InventoryObjectType):
    """
              Defines a block in the inventory - deprecated, use InventoryObject instead
            """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 293, 8)
    _ElementMap = InventoryObjectType._ElementMap.copy()
    _AttributeMap = InventoryObjectType._AttributeMap.copy()
    # Base type is InventoryObjectType
    
    # Attribute slot inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    
    # Attribute quantity inherited from {http://ProjectMalmo.microsoft.com}InventoryObjectType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_98 = CTD_ANON_98


# Complex type {http://ProjectMalmo.microsoft.com}MazeBlock with content type EMPTY
class MazeBlock (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}MazeBlock with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MazeBlock')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 238, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_MazeBlock_type', _module_typeBindings.BlockList)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 239, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 239, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_MazeBlock_variant', _module_typeBindings.VariantList)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 240, 4)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 240, 4)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_MazeBlock_colour', _module_typeBindings.ColourList)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 241, 4)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 241, 4)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute height uses Python identifier height
    __height = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'height'), 'height', '__httpProjectMalmo_microsoft_com_MazeBlock_height', pyxb.binding.datatypes.int, unicode_default='1')
    __height._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 242, 4)
    __height._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 242, 4)
    
    height = property(__height.value, __height.set, None, None)

    
    # Attribute heightVariance uses Python identifier heightVariance
    __heightVariance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'heightVariance'), 'heightVariance', '__httpProjectMalmo_microsoft_com_MazeBlock_heightVariance', pyxb.binding.datatypes.int, unicode_default='0')
    __heightVariance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 243, 4)
    __heightVariance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 243, 4)
    
    heightVariance = property(__heightVariance.value, __heightVariance.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __height.name() : __height,
        __heightVariance.name() : __heightVariance
    })
_module_typeBindings.MazeBlock = MazeBlock
Namespace.addCategoryObject('typeBinding', 'MazeBlock', MazeBlock)


# Complex type {http://ProjectMalmo.microsoft.com}SnakeBlock with content type EMPTY
class SnakeBlock (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}SnakeBlock with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SnakeBlock')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 254, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_SnakeBlock_type', _module_typeBindings.BlockList)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 255, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 255, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_SnakeBlock_variant', _module_typeBindings.VariantList)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 256, 4)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 256, 4)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_SnakeBlock_colour', _module_typeBindings.ColourList)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 257, 4)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 257, 4)
    
    colour = property(__colour.value, __colour.set, None, None)

    
    # Attribute lifetime uses Python identifier lifetime
    __lifetime = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'lifetime'), 'lifetime', '__httpProjectMalmo_microsoft_com_SnakeBlock_lifetime', pyxb.binding.datatypes.int, unicode_default='1')
    __lifetime._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 258, 4)
    __lifetime._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 258, 4)
    
    lifetime = property(__lifetime.value, __lifetime.set, None, None)

    
    # Attribute lifetimeVariance uses Python identifier lifetimeVariance
    __lifetimeVariance = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'lifetimeVariance'), 'lifetimeVariance', '__httpProjectMalmo_microsoft_com_SnakeBlock_lifetimeVariance', pyxb.binding.datatypes.int, unicode_default='0')
    __lifetimeVariance._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 259, 4)
    __lifetimeVariance._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 259, 4)
    
    lifetimeVariance = property(__lifetimeVariance.value, __lifetimeVariance.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour,
        __lifetime.name() : __lifetime,
        __lifetimeVariance.name() : __lifetimeVariance
    })
_module_typeBindings.SnakeBlock = SnakeBlock
Namespace.addCategoryObject('typeBinding', 'SnakeBlock', SnakeBlock)


# Complex type {http://ProjectMalmo.microsoft.com}DrawBlock with content type EMPTY
class DrawBlock_ (DrawBlockBasedObjectType):
    """
        Specify a block by location and type.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawBlock')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 547, 2)
    _ElementMap = DrawBlockBasedObjectType._ElementMap.copy()
    _AttributeMap = DrawBlockBasedObjectType._AttributeMap.copy()
    # Base type is DrawBlockBasedObjectType
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute face inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_DrawBlock__x', pyxb.binding.datatypes.int, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 555, 8)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 555, 8)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_DrawBlock__y', pyxb.binding.datatypes.int, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 556, 8)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 556, 8)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_DrawBlock__z', pyxb.binding.datatypes.int, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 557, 8)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 557, 8)
    
    z = property(__z.value, __z.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z
    })
_module_typeBindings.DrawBlock_ = DrawBlock_
Namespace.addCategoryObject('typeBinding', 'DrawBlock', DrawBlock_)


# Complex type {http://ProjectMalmo.microsoft.com}DrawCuboid with content type EMPTY
class DrawCuboid_ (DrawBlockBasedObjectType):
    """
        Specify a filled cuboid by inclusive coordinates and block type.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawCuboid')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 655, 2)
    _ElementMap = DrawBlockBasedObjectType._ElementMap.copy()
    _AttributeMap = DrawBlockBasedObjectType._AttributeMap.copy()
    # Base type is DrawBlockBasedObjectType
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute face inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute x1 uses Python identifier x1
    __x1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x1'), 'x1', '__httpProjectMalmo_microsoft_com_DrawCuboid__x1', pyxb.binding.datatypes.int, required=True)
    __x1._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 663, 8)
    __x1._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 663, 8)
    
    x1 = property(__x1.value, __x1.set, None, None)

    
    # Attribute y1 uses Python identifier y1
    __y1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y1'), 'y1', '__httpProjectMalmo_microsoft_com_DrawCuboid__y1', pyxb.binding.datatypes.int, required=True)
    __y1._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 664, 8)
    __y1._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 664, 8)
    
    y1 = property(__y1.value, __y1.set, None, None)

    
    # Attribute z1 uses Python identifier z1
    __z1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z1'), 'z1', '__httpProjectMalmo_microsoft_com_DrawCuboid__z1', pyxb.binding.datatypes.int, required=True)
    __z1._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 665, 8)
    __z1._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 665, 8)
    
    z1 = property(__z1.value, __z1.set, None, None)

    
    # Attribute x2 uses Python identifier x2
    __x2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x2'), 'x2', '__httpProjectMalmo_microsoft_com_DrawCuboid__x2', pyxb.binding.datatypes.int, required=True)
    __x2._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 666, 8)
    __x2._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 666, 8)
    
    x2 = property(__x2.value, __x2.set, None, None)

    
    # Attribute y2 uses Python identifier y2
    __y2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y2'), 'y2', '__httpProjectMalmo_microsoft_com_DrawCuboid__y2', pyxb.binding.datatypes.int, required=True)
    __y2._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 667, 8)
    __y2._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 667, 8)
    
    y2 = property(__y2.value, __y2.set, None, None)

    
    # Attribute z2 uses Python identifier z2
    __z2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z2'), 'z2', '__httpProjectMalmo_microsoft_com_DrawCuboid__z2', pyxb.binding.datatypes.int, required=True)
    __z2._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 668, 8)
    __z2._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 668, 8)
    
    z2 = property(__z2.value, __z2.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x1.name() : __x1,
        __y1.name() : __y1,
        __z1.name() : __z1,
        __x2.name() : __x2,
        __y2.name() : __y2,
        __z2.name() : __z2
    })
_module_typeBindings.DrawCuboid_ = DrawCuboid_
Namespace.addCategoryObject('typeBinding', 'DrawCuboid', DrawCuboid_)


# Complex type {http://ProjectMalmo.microsoft.com}DrawSphere with content type EMPTY
class DrawSphere_ (DrawBlockBasedObjectType):
    """
        Specify a filled sphere by centre coordinates and inclusive radius.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawSphere')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 673, 2)
    _ElementMap = DrawBlockBasedObjectType._ElementMap.copy()
    _AttributeMap = DrawBlockBasedObjectType._AttributeMap.copy()
    # Base type is DrawBlockBasedObjectType
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute face inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute x uses Python identifier x
    __x = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x'), 'x', '__httpProjectMalmo_microsoft_com_DrawSphere__x', pyxb.binding.datatypes.int, required=True)
    __x._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 681, 8)
    __x._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 681, 8)
    
    x = property(__x.value, __x.set, None, None)

    
    # Attribute y uses Python identifier y
    __y = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y'), 'y', '__httpProjectMalmo_microsoft_com_DrawSphere__y', pyxb.binding.datatypes.int, required=True)
    __y._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 682, 8)
    __y._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 682, 8)
    
    y = property(__y.value, __y.set, None, None)

    
    # Attribute z uses Python identifier z
    __z = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z'), 'z', '__httpProjectMalmo_microsoft_com_DrawSphere__z', pyxb.binding.datatypes.int, required=True)
    __z._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 683, 8)
    __z._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 683, 8)
    
    z = property(__z.value, __z.set, None, None)

    
    # Attribute radius uses Python identifier radius
    __radius = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'radius'), 'radius', '__httpProjectMalmo_microsoft_com_DrawSphere__radius', pyxb.binding.datatypes.int, required=True)
    __radius._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 684, 8)
    __radius._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 684, 8)
    
    radius = property(__radius.value, __radius.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x.name() : __x,
        __y.name() : __y,
        __z.name() : __z,
        __radius.name() : __radius
    })
_module_typeBindings.DrawSphere_ = DrawSphere_
Namespace.addCategoryObject('typeBinding', 'DrawSphere', DrawSphere_)


# Complex type {http://ProjectMalmo.microsoft.com}DrawLine with content type EMPTY
class DrawLine_ (DrawBlockBasedObjectType):
    """
        Specify a line by start and end coordinates and thickness.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrawLine')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 689, 2)
    _ElementMap = DrawBlockBasedObjectType._ElementMap.copy()
    _AttributeMap = DrawBlockBasedObjectType._AttributeMap.copy()
    # Base type is DrawBlockBasedObjectType
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute face inherited from {http://ProjectMalmo.microsoft.com}DrawBlockBasedObjectType
    
    # Attribute x1 uses Python identifier x1
    __x1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x1'), 'x1', '__httpProjectMalmo_microsoft_com_DrawLine__x1', pyxb.binding.datatypes.int, required=True)
    __x1._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 697, 8)
    __x1._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 697, 8)
    
    x1 = property(__x1.value, __x1.set, None, None)

    
    # Attribute y1 uses Python identifier y1
    __y1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y1'), 'y1', '__httpProjectMalmo_microsoft_com_DrawLine__y1', pyxb.binding.datatypes.int, required=True)
    __y1._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 698, 8)
    __y1._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 698, 8)
    
    y1 = property(__y1.value, __y1.set, None, None)

    
    # Attribute z1 uses Python identifier z1
    __z1 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z1'), 'z1', '__httpProjectMalmo_microsoft_com_DrawLine__z1', pyxb.binding.datatypes.int, required=True)
    __z1._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 699, 8)
    __z1._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 699, 8)
    
    z1 = property(__z1.value, __z1.set, None, None)

    
    # Attribute x2 uses Python identifier x2
    __x2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'x2'), 'x2', '__httpProjectMalmo_microsoft_com_DrawLine__x2', pyxb.binding.datatypes.int, required=True)
    __x2._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 700, 8)
    __x2._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 700, 8)
    
    x2 = property(__x2.value, __x2.set, None, None)

    
    # Attribute y2 uses Python identifier y2
    __y2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'y2'), 'y2', '__httpProjectMalmo_microsoft_com_DrawLine__y2', pyxb.binding.datatypes.int, required=True)
    __y2._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 701, 8)
    __y2._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 701, 8)
    
    y2 = property(__y2.value, __y2.set, None, None)

    
    # Attribute z2 uses Python identifier z2
    __z2 = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'z2'), 'z2', '__httpProjectMalmo_microsoft_com_DrawLine__z2', pyxb.binding.datatypes.int, required=True)
    __z2._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 702, 8)
    __z2._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 702, 8)
    
    z2 = property(__z2.value, __z2.set, None, None)

    
    # Attribute steptype uses Python identifier steptype
    __steptype = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'steptype'), 'steptype', '__httpProjectMalmo_microsoft_com_DrawLine__steptype', _module_typeBindings.BlockType)
    __steptype._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 703, 8)
    __steptype._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 703, 8)
    
    steptype = property(__steptype.value, __steptype.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __x1.name() : __x1,
        __y1.name() : __y1,
        __z1.name() : __z1,
        __x2.name() : __x2,
        __y2.name() : __y2,
        __z2.name() : __z2,
        __steptype.name() : __steptype
    })
_module_typeBindings.DrawLine_ = DrawLine_
Namespace.addCategoryObject('typeBinding', 'DrawLine', DrawLine_)


# Complex type {http://ProjectMalmo.microsoft.com}BlockSpec with content type EMPTY
class BlockSpec (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}BlockSpec with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockSpec')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2107, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_BlockSpec_type', _module_typeBindings.BlockList, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2108, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2108, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_BlockSpec_variant', _module_typeBindings.VariantList)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2109, 4)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2109, 4)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_BlockSpec_colour', _module_typeBindings.ColourList)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2110, 4)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2110, 4)
    
    colour = property(__colour.value, __colour.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour
    })
_module_typeBindings.BlockSpec = BlockSpec
Namespace.addCategoryObject('typeBinding', 'BlockSpec', BlockSpec)


# Complex type {http://ProjectMalmo.microsoft.com}BlockOrItemSpec with content type EMPTY
class BlockOrItemSpec (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}BlockOrItemSpec with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockOrItemSpec')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2113, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_BlockOrItemSpec_type', _module_typeBindings.BlockOrItemList, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2114, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2114, 4)
    
    type = property(__type.value, __type.set, None, None)

    
    # Attribute variant uses Python identifier variant
    __variant = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'variant'), 'variant', '__httpProjectMalmo_microsoft_com_BlockOrItemSpec_variant', _module_typeBindings.VariantList)
    __variant._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2115, 4)
    __variant._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2115, 4)
    
    variant = property(__variant.value, __variant.set, None, None)

    
    # Attribute colour uses Python identifier colour
    __colour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'colour'), 'colour', '__httpProjectMalmo_microsoft_com_BlockOrItemSpec_colour', _module_typeBindings.ColourList)
    __colour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2116, 4)
    __colour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2116, 4)
    
    colour = property(__colour.value, __colour.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __type.name() : __type,
        __variant.name() : __variant,
        __colour.name() : __colour
    })
_module_typeBindings.BlockOrItemSpec = BlockOrItemSpec
Namespace.addCategoryObject('typeBinding', 'BlockOrItemSpec', BlockOrItemSpec)


# Complex type {http://ProjectMalmo.microsoft.com}ItemSpec with content type EMPTY
class ItemSpec (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://ProjectMalmo.microsoft.com}ItemSpec with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ItemSpec')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2196, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_ItemSpec_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2197, 4)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2197, 4)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_ItemSpec_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2198, 4)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2198, 4)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    
    # Attribute type uses Python identifier type
    __type = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__httpProjectMalmo_microsoft_com_ItemSpec_type', _module_typeBindings.BlockOrItemList, required=True)
    __type._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2199, 4)
    __type._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2199, 4)
    
    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reward.name() : __reward,
        __distribution.name() : __distribution,
        __type.name() : __type
    })
_module_typeBindings.ItemSpec = ItemSpec
Namespace.addCategoryObject('typeBinding', 'ItemSpec', ItemSpec)


# Complex type {http://ProjectMalmo.microsoft.com}MobWithDescriptionAndReward with content type EMPTY
class MobWithDescriptionAndReward (MobWithDescription):
    """Complex type {http://ProjectMalmo.microsoft.com}MobWithDescriptionAndReward with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MobWithDescriptionAndReward')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2370, 2)
    _ElementMap = MobWithDescription._ElementMap.copy()
    _AttributeMap = MobWithDescription._AttributeMap.copy()
    # Base type is MobWithDescription
    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_MobWithDescriptionAndReward_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2373, 8)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2373, 8)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_MobWithDescriptionAndReward_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2374, 8)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2374, 8)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    
    # Attribute oneshot uses Python identifier oneshot
    __oneshot = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'oneshot'), 'oneshot', '__httpProjectMalmo_microsoft_com_MobWithDescriptionAndReward_oneshot', pyxb.binding.datatypes.boolean, unicode_default='true')
    __oneshot._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2375, 8)
    __oneshot._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2375, 8)
    
    oneshot = property(__oneshot.value, __oneshot.set, None, None)

    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}MobWithDescription
    
    # Attribute description inherited from {http://ProjectMalmo.microsoft.com}MobWithDescription
    
    # Attribute global_ inherited from {http://ProjectMalmo.microsoft.com}MobWithDescription
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reward.name() : __reward,
        __distribution.name() : __distribution,
        __oneshot.name() : __oneshot
    })
_module_typeBindings.MobWithDescriptionAndReward = MobWithDescriptionAndReward
Namespace.addCategoryObject('typeBinding', 'MobWithDescriptionAndReward', MobWithDescriptionAndReward)


# Complex type {http://ProjectMalmo.microsoft.com}CommandQuota with content type EMPTY
class CommandQuota (pyxb.binding.basis.complexTypeDefinition):
    """
        Set up a quota for a group of commands. {{{AgentQuitFromReachingCommandQuota}}} will fire once the quota is exceeded.
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CommandQuota')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2499, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute commands uses Python identifier commands
    __commands = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'commands'), 'commands', '__httpProjectMalmo_microsoft_com_CommandQuota_commands', _module_typeBindings.CommandList, required=True)
    __commands._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2505, 4)
    __commands._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2505, 4)
    
    commands = property(__commands.value, __commands.set, None, '\n          List of commands, separated by spaces, that will share this quota. Commands must be valid members of {{{ContinuousMovementCommand}}}, {{{AbsoluteMovementCommand}}}, {{{DiscreteMovementCommand}}}, {{{InventoryCommand}}}, or {{{ChatCommand}}}.\n          \n          For instance, if the command list contains {{{moveeast}}}, {{{movenorth}}}, {{{movesouth}}} and {{{movewest}}}, then the mission will end once the summed total usage of all four commands reaches the quota - even if the agent never used {{{movesouth}}}.\n        ')

    
    # Attribute quota uses Python identifier quota
    __quota = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'quota'), 'quota', '__httpProjectMalmo_microsoft_com_CommandQuota_quota', pyxb.binding.datatypes.int, required=True)
    __quota._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2514, 4)
    __quota._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2514, 4)
    
    quota = property(__quota.value, __quota.set, None, '\n          Total number of usages allocated for this command group.\n        ')

    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_CommandQuota_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2521, 4)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2521, 4)
    
    description = property(__description.value, __description.set, None, '\n          String that will be returned from the {{{AgentQuitFromReachingCommandQuota}}} if this quota is reached. This can be used in {{{RewardForMissionEnd}}}, and is also returned in the {{{MissionEnded}}} message.\n        ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __commands.name() : __commands,
        __quota.name() : __quota,
        __description.name() : __description
    })
_module_typeBindings.CommandQuota = CommandQuota
Namespace.addCategoryObject('typeBinding', 'CommandQuota', CommandQuota)


# Complex type {http://ProjectMalmo.microsoft.com}MazeTerminus with content type EMPTY
class MazeTerminus (MazeBlock):
    """Complex type {http://ProjectMalmo.microsoft.com}MazeTerminus with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MazeTerminus')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 246, 2)
    _ElementMap = MazeBlock._ElementMap.copy()
    _AttributeMap = MazeBlock._AttributeMap.copy()
    # Base type is MazeBlock
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}MazeBlock
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}MazeBlock
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}MazeBlock
    
    # Attribute height inherited from {http://ProjectMalmo.microsoft.com}MazeBlock
    
    # Attribute heightVariance inherited from {http://ProjectMalmo.microsoft.com}MazeBlock
    
    # Attribute fixedToEdge uses Python identifier fixedToEdge
    __fixedToEdge = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'fixedToEdge'), 'fixedToEdge', '__httpProjectMalmo_microsoft_com_MazeTerminus_fixedToEdge', pyxb.binding.datatypes.boolean, unicode_default='false')
    __fixedToEdge._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 249, 8)
    __fixedToEdge._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 249, 8)
    
    fixedToEdge = property(__fixedToEdge.value, __fixedToEdge.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __fixedToEdge.name() : __fixedToEdge
    })
_module_typeBindings.MazeTerminus = MazeTerminus
Namespace.addCategoryObject('typeBinding', 'MazeTerminus', MazeTerminus)


# Complex type {http://ProjectMalmo.microsoft.com}BlockSpecWithRewardAndBehaviour with content type EMPTY
class BlockSpecWithRewardAndBehaviour (BlockSpec):
    """Complex type {http://ProjectMalmo.microsoft.com}BlockSpecWithRewardAndBehaviour with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockSpecWithRewardAndBehaviour')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2119, 2)
    _ElementMap = BlockSpec._ElementMap.copy()
    _AttributeMap = BlockSpec._AttributeMap.copy()
    # Base type is BlockSpec
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}BlockSpec
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}BlockSpec
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}BlockSpec
    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_BlockSpecWithRewardAndBehaviour_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2122, 8)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2122, 8)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_BlockSpecWithRewardAndBehaviour_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2123, 8)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2123, 8)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    
    # Attribute behaviour uses Python identifier behaviour
    __behaviour = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'behaviour'), 'behaviour', '__httpProjectMalmo_microsoft_com_BlockSpecWithRewardAndBehaviour_behaviour', _module_typeBindings.Behaviour, unicode_default='oncePerBlock')
    __behaviour._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2124, 8)
    __behaviour._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2124, 8)
    
    behaviour = property(__behaviour.value, __behaviour.set, None, None)

    
    # Attribute cooldownInMs uses Python identifier cooldownInMs
    __cooldownInMs = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'cooldownInMs'), 'cooldownInMs', '__httpProjectMalmo_microsoft_com_BlockSpecWithRewardAndBehaviour_cooldownInMs', pyxb.binding.datatypes.decimal, unicode_default='1000')
    __cooldownInMs._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2125, 8)
    __cooldownInMs._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2125, 8)
    
    cooldownInMs = property(__cooldownInMs.value, __cooldownInMs.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reward.name() : __reward,
        __distribution.name() : __distribution,
        __behaviour.name() : __behaviour,
        __cooldownInMs.name() : __cooldownInMs
    })
_module_typeBindings.BlockSpecWithRewardAndBehaviour = BlockSpecWithRewardAndBehaviour
Namespace.addCategoryObject('typeBinding', 'BlockSpecWithRewardAndBehaviour', BlockSpecWithRewardAndBehaviour)


# Complex type {http://ProjectMalmo.microsoft.com}BlockOrItemSpecWithReward with content type EMPTY
class BlockOrItemSpecWithReward (BlockOrItemSpec):
    """Complex type {http://ProjectMalmo.microsoft.com}BlockOrItemSpecWithReward with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockOrItemSpecWithReward')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2130, 2)
    _ElementMap = BlockOrItemSpec._ElementMap.copy()
    _AttributeMap = BlockOrItemSpec._AttributeMap.copy()
    # Base type is BlockOrItemSpec
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}BlockOrItemSpec
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}BlockOrItemSpec
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}BlockOrItemSpec
    
    # Attribute reward uses Python identifier reward
    __reward = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'reward'), 'reward', '__httpProjectMalmo_microsoft_com_BlockOrItemSpecWithReward_reward', pyxb.binding.datatypes.decimal, required=True)
    __reward._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2133, 8)
    __reward._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2133, 8)
    
    reward = property(__reward.value, __reward.set, None, None)

    
    # Attribute distribution uses Python identifier distribution
    __distribution = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'distribution'), 'distribution', '__httpProjectMalmo_microsoft_com_BlockOrItemSpecWithReward_distribution', pyxb.binding.datatypes.string, unicode_default='')
    __distribution._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2134, 8)
    __distribution._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2134, 8)
    
    distribution = property(__distribution.value, __distribution.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __reward.name() : __reward,
        __distribution.name() : __distribution
    })
_module_typeBindings.BlockOrItemSpecWithReward = BlockOrItemSpecWithReward
Namespace.addCategoryObject('typeBinding', 'BlockOrItemSpecWithReward', BlockOrItemSpecWithReward)


# Complex type {http://ProjectMalmo.microsoft.com}BlockSpecWithDescription with content type EMPTY
class BlockSpecWithDescription (BlockSpec):
    """Complex type {http://ProjectMalmo.microsoft.com}BlockSpecWithDescription with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockSpecWithDescription')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2408, 2)
    _ElementMap = BlockSpec._ElementMap.copy()
    _AttributeMap = BlockSpec._AttributeMap.copy()
    # Base type is BlockSpec
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}BlockSpec
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}BlockSpec
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}BlockSpec
    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_BlockSpecWithDescription_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2411, 8)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2411, 8)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __description.name() : __description
    })
_module_typeBindings.BlockSpecWithDescription = BlockSpecWithDescription
Namespace.addCategoryObject('typeBinding', 'BlockSpecWithDescription', BlockSpecWithDescription)


# Complex type {http://ProjectMalmo.microsoft.com}BlockOrItemSpecWithDescription with content type EMPTY
class BlockOrItemSpecWithDescription (BlockOrItemSpec):
    """Complex type {http://ProjectMalmo.microsoft.com}BlockOrItemSpecWithDescription with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BlockOrItemSpecWithDescription')
    _XSDLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2416, 2)
    _ElementMap = BlockOrItemSpec._ElementMap.copy()
    _AttributeMap = BlockOrItemSpec._AttributeMap.copy()
    # Base type is BlockOrItemSpec
    
    # Attribute type inherited from {http://ProjectMalmo.microsoft.com}BlockOrItemSpec
    
    # Attribute variant inherited from {http://ProjectMalmo.microsoft.com}BlockOrItemSpec
    
    # Attribute colour inherited from {http://ProjectMalmo.microsoft.com}BlockOrItemSpec
    
    # Attribute description uses Python identifier description
    __description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__httpProjectMalmo_microsoft_com_BlockOrItemSpecWithDescription_description', pyxb.binding.datatypes.string, unicode_default='')
    __description._DeclarationLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2419, 8)
    __description._UseLocation = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2419, 8)
    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __description.name() : __description
    })
_module_typeBindings.BlockOrItemSpecWithDescription = BlockOrItemSpecWithDescription
Namespace.addCategoryObject('typeBinding', 'BlockOrItemSpecWithDescription', BlockOrItemSpecWithDescription)


Mission = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Mission'), CTD_ANON, documentation='\n              A mission definition has a description, a starting point and some kind of scoring system. It also defines the agents and roles involved.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 14, 4))
Namespace.addCategoryObject('elementBinding', Mission.name().localName(), Mission)

ModSettings = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModSettings'), CTD_ANON_, documentation='\n              Settings here are independent of the mission but affect how it is run. \n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 31, 4))
Namespace.addCategoryObject('elementBinding', ModSettings.name().localName(), ModSettings)

ServerSection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerSection'), CTD_ANON_2, documentation='\n              The Minecraft server stores the world and keeps track of the blocks that have changed. Each Minecraft client connects to the server when it needs to\n              change blocks or ask what blocks are present, for example. With multi-agent missions there may be many clients, all connected to a single server.\n              \n              Settings here affect the shared world that the clients experience.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 67, 4))
Namespace.addCategoryObject('elementBinding', ServerSection.name().localName(), ServerSection)

About = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'About'), CTD_ANON_3, documentation='\n              Description of the mission.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 100, 4))
Namespace.addCategoryObject('elementBinding', About.name().localName(), About)

AgentStart = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentStart'), CTD_ANON_4, documentation='\n              Defines the initial conditions of the player. This includes the location and the contents of their inventory.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 114, 4))
Namespace.addCategoryObject('elementBinding', AgentStart.name().localName(), AgentStart)

ServerInitialConditions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerInitialConditions'), CTD_ANON_7, documentation='\n              Defines the initial conditions of the world.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 147, 4))
Namespace.addCategoryObject('elementBinding', ServerInitialConditions.name().localName(), ServerInitialConditions)

Time = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Time'), CTD_ANON_8, documentation='\n            Minecraft has a day-night cycle that affects the light levels and the appearance of hostile mobs.\n          ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 178, 4))
Namespace.addCategoryObject('elementBinding', Time.name().localName(), Time)

StartTime = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartTime'), STD_ANON_, documentation='\n          Specifies the time of day at the start of the mission, in thousandths of an hour.\n          \n          0 = dawn\n          \n          6000 = noon\n          \n          18000 = midnight\n          \n          Time in Minecraft travels (by default) 72 times faster than real-time. Thus a Minecraft day lasts 20 minutes.\n        ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 198, 4))
Namespace.addCategoryObject('elementBinding', StartTime.name().localName(), StartTime)

Weather = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Weather'), STD_ANON_2, documentation='\n              Specifies the type of weather at the start of the mission.\n\n              "normal" = let Minecraft do what it normally does\n              \n              "clear" = start with clear weather\n              \n              "rain" = start with rain (or snow, in a cold biome)\n              \n              "thunder" = start with thundery weather\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 220, 4), unicode_default='normal')
Namespace.addCategoryObject('elementBinding', Weather.name().localName(), Weather)

AgentHandlers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentHandlers'), CTD_ANON_9, documentation='\n              Defines the Mission Handlers block for an individual agent.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 403, 4))
Namespace.addCategoryObject('elementBinding', AgentHandlers.name().localName(), AgentHandlers)

ServerHandlers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerHandlers'), CTD_ANON_10, documentation='\n              Defines the Mission Handlers block for the server.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 414, 4))
Namespace.addCategoryObject('elementBinding', ServerHandlers.name().localName(), ServerHandlers)

FlatWorldGenerator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FlatWorldGenerator'), CTD_ANON_11, documentation='\n        Generates a superflat world with a specified preset string - see e.g. [[http://www.minecraft101.net/superflat/]]\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 69, 2))
Namespace.addCategoryObject('elementBinding', FlatWorldGenerator.name().localName(), FlatWorldGenerator)

DefaultWorldGenerator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DefaultWorldGenerator'), CTD_ANON_12, documentation='\n        Generates the default terrain.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 109, 2))
Namespace.addCategoryObject('elementBinding', DefaultWorldGenerator.name().localName(), DefaultWorldGenerator)

FileWorldGenerator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileWorldGenerator'), CTD_ANON_13, documentation='\n        Loads a saved world from disk. You can find the saved worlds in "{{{Minecraft\\run\\saves}}}". Use the full path to one of those folders.\n        \n        If Minecraft is running on a different machine then copy the folder to a readable network location and update the path accordingly. Example:\n        \n        {{{<FileWorldGenerator src="\\\\\\\\machine-id\\\\shared\\\\ProjectMalmo\\\\saved_maps\\\\arena" />}}}\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 142, 2))
Namespace.addCategoryObject('elementBinding', FileWorldGenerator.name().localName(), FileWorldGenerator)

BiomeGenerator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BiomeGenerator'), CTD_ANON_14, documentation='\n              Generates a survival world with the specified biome.\n          ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 179, 2))
Namespace.addCategoryObject('elementBinding', BiomeGenerator.name().localName(), BiomeGenerator)

MovingTargetDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MovingTargetDecorator'), CTD_ANON_15, documentation='\n        Creates a moving two-block target which takes random moves within a specified arena. Can be linked to the turn scheduler.\n        This can be made more general in the future, but is currently tailored specifically for the Malmo collaborative challenge.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 262, 2))
Namespace.addCategoryObject('elementBinding', MovingTargetDecorator.name().localName(), MovingTargetDecorator)

SnakeDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SnakeDecorator'), CTD_ANON_16, documentation='\n        Adds a snake made of blocks, that grows at one end and shrinks at the other.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 320, 2))
Namespace.addCategoryObject('elementBinding', SnakeDecorator.name().localName(), SnakeDecorator)

MazeDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MazeDecorator'), CTD_ANON_21, documentation='\n        Adds a maze into the world.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 407, 2))
Namespace.addCategoryObject('elementBinding', MazeDecorator.name().localName(), MazeDecorator)

DrawingDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawingDecorator'), CTD_ANON_27, documentation='\n        Draws structures into the world.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 534, 2))
Namespace.addCategoryObject('elementBinding', DrawingDecorator.name().localName(), DrawingDecorator)

DrawObjectType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawObjectType'), DrawObjectType_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 708, 2))
Namespace.addCategoryObject('elementBinding', DrawObjectType.name().localName(), DrawObjectType)

AnimationDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AnimationDecorator'), CTD_ANON_31, documentation='\n          Basic animation created by repeatedly applying a DrawingDecorator at different positions.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 813, 2))
Namespace.addCategoryObject('elementBinding', AnimationDecorator.name().localName(), AnimationDecorator)

BuildBattleDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BuildBattleDecorator'), CTD_ANON_33, documentation="\n        Sets up a build battle area, with a source structure that can't be edited, and a goal structure, with optional recolouring of blocks to indicate correct/incorrect placement.\n        \n        NOTE: Make sure to add a {{{RewardForStructureCopying}}} handler to the AgentHandlers if you want your agent to be rewarded for contributing to the build.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 917, 2))
Namespace.addCategoryObject('elementBinding', BuildBattleDecorator.name().localName(), BuildBattleDecorator)

NavigationDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavigationDecorator'), CTD_ANON_34, documentation='\n              Adds a specified block to the world and sets compass to that block.\n\n              Block is placed randomly along a radius around the origin specified.\n\n              Can force the block to appear at the highest available y-value.\n           ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1012, 2))
Namespace.addCategoryObject('elementBinding', NavigationDecorator.name().localName(), NavigationDecorator)

ServerQuitFromTimeUp = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitFromTimeUp'), CTD_ANON_35, documentation='\n        Specifies a time limit that applies to all agents.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1066, 2))
Namespace.addCategoryObject('elementBinding', ServerQuitFromTimeUp.name().localName(), ServerQuitFromTimeUp)

ServerQuitWhenAnyAgentFinishes = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitWhenAnyAgentFinishes'), CTD_ANON_36, documentation='\n        Specifies that the mission ends when any of the agents finish.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1078, 2))
Namespace.addCategoryObject('elementBinding', ServerQuitWhenAnyAgentFinishes.name().localName(), ServerQuitWhenAnyAgentFinishes)

DepthProducer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DepthProducer'), CTD_ANON_37, documentation='\n        Requests that 32bpp depth frames be sent.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1095, 2))
Namespace.addCategoryObject('elementBinding', DepthProducer.name().localName(), DepthProducer)

LuminanceProducer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LuminanceProducer'), CTD_ANON_38, documentation='\n        Requests an 8bpp grayscale image.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1109, 2))
Namespace.addCategoryObject('elementBinding', LuminanceProducer.name().localName(), LuminanceProducer)

ContinuousMovementCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContinuousMovementCommands'), CTD_ANON_39, documentation='\n        When present, the Mod will accept commands that control smooth movement.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards with normal speed.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1524, 2))
Namespace.addCategoryObject('elementBinding', ContinuousMovementCommands.name().localName(), ContinuousMovementCommands)

AbsoluteMovementCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommands'), CTD_ANON_40, documentation='\n        When present, the Mod will accept commands to set the player\'s position and orientation directly.\n\n        Commands take the form of "verb <value>" e.g. "{{{tpx 13}}}" to set the x-coordinate to 13.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1558, 2))
Namespace.addCategoryObject('elementBinding', AbsoluteMovementCommands.name().localName(), AbsoluteMovementCommands)

DiscreteMovementCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommands'), CTD_ANON_41, documentation='\n        When present, the Mod will accept commands that control movement in discrete jumps.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards one square.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1583, 2))
Namespace.addCategoryObject('elementBinding', DiscreteMovementCommands.name().localName(), DiscreteMovementCommands)

InventoryCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryCommands'), CTD_ANON_42, documentation="\n        When present, the Mod will accept commands that control the player's inventory.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1610, 2))
Namespace.addCategoryObject('elementBinding', InventoryCommands.name().localName(), InventoryCommands)

SimpleCraftCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommands'), CTD_ANON_43, documentation='\n        When present, the Mod will accept simple commands that implement a basic form of crafting.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1633, 2))
Namespace.addCategoryObject('elementBinding', SimpleCraftCommands.name().localName(), SimpleCraftCommands)

ChatCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChatCommands'), CTD_ANON_44, documentation='\n        When present, the Mod will accept commands that send chat messages to the other players.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1656, 2))
Namespace.addCategoryObject('elementBinding', ChatCommands.name().localName(), ChatCommands)

MissionQuitCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommands'), CTD_ANON_45, documentation='\n        When present, the Mod will accept a command that quits the mission.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1679, 2))
Namespace.addCategoryObject('elementBinding', MissionQuitCommands.name().localName(), MissionQuitCommands)

HumanLevelCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HumanLevelCommands'), CTD_ANON_46, documentation='\n        When present, the Mod will accept commands on the level of mouse and keyboard events.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1721, 2))
Namespace.addCategoryObject('elementBinding', HumanLevelCommands.name().localName(), HumanLevelCommands)

ObservationFromRecentCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRecentCommands'), CTD_ANON_47, documentation='\n        When present, the Mod will return observations that say what commands have been acted on since the last report, in the JSON element {{{CommandsSinceLastObservation}}}.\n\n        Note that the commands returned might not yet have taken effect, depending on the command and the way in which Minecraft responds to it -\n        but they will have been processed by the command handling chain.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1746, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromRecentCommands.name().localName(), ObservationFromRecentCommands)

ObservationFromTurnScheduler = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromTurnScheduler'), CTD_ANON_48, documentation="\n        Automatically addd by Malmo when the user specifies the {{{TurnBasedCommands}}} handler. This provides vital observations back to the agent to allow them to make use of the turn scheduler. When it is the agent's turn, the JSON will contain {{{turn_number}}} - an integer which tracks the number of turns the agent has taken, and {{{turn_key}}} - a one-shot key which must be passed back to Malmo as a parameter in {{{sendCommand}}} in order for the command to be accepted.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1758, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromTurnScheduler.name().localName(), ObservationFromTurnScheduler)

ObservationFromSubgoalPositionList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSubgoalPositionList'), CTD_ANON_49, documentation='\n        When present, the Mod will return observations that indicate the direction to follow to the next subgoal.\n        The value to turn by is returned in the JSON element {{{yawDelta}}}.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1767, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromSubgoalPositionList.name().localName(), ObservationFromSubgoalPositionList)

ObservationFromHotBar = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHotBar'), CTD_ANON_50, documentation='\n        When present, the Mod will return observations that say what is in the hotbar.\n\n        Up to four values are returned for each slot, if not empty: e.g. {{{Hotbar_1_size}}} and {{{Hotbar_1_item}}} containing the number and\n        type of the item(s) in the slot, respectively, and {{{Hotbar_1_colour}}} and  {{{Hotbar_1_variant}}} if the item has a colour/variation. Hotbar slots are numbered 0 to 8 inclusive.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1781, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromHotBar.name().localName(), ObservationFromHotBar)

ObservationFromFullStats = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullStats'), CTD_ANON_51, documentation='\n        When present, the Mod will return several observations:\n\n        * Achievement statistics: {{{DistanceTravelled}}}, {{{TimeAlive}}}, {{{MobsKilled}}}, {{{PlayersKilled}}}, {{{DamageTaken}}}, {{{DamageDealt}}}\n        * Life statistics: {{{Life}}}, {{{Score}}}, {{{Food}}}, {{{Air}}}, {{{XP}}}, {{{IsAlive}}}, {{{Name}}}\n        * Position statistics: {{{XPos}}}, {{{YPos}}}, {{{ZPos}}}, {{{Pitch}}}, {{{Yaw}}}\n        * Environment statistics: {{{WorldTime}}} - current time in ticks, {{{TotalTime}}} - total world time, unaffected by ServerInitialConditions\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1793, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromFullStats.name().localName(), ObservationFromFullStats)

ObservationFromHuman = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHuman'), CTD_ANON_52, documentation='\n        When present, the Mod will return low-level keyboard and mouse events.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1807, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromHuman.name().localName(), ObservationFromHuman)

ObservationFromSystem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSystem'), CTD_ANON_53, documentation='\n        When present, the Mod will return information on the current performance of the Minecraft system - eg tick speeds, etc.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1816, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromSystem.name().localName(), ObservationFromSystem)

ObservationFromRay = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRay'), CTD_ANON_54, documentation='\n        When present, the Mod will return a JSON object called "LineOfSight", containing observations about the block or entity which is currently in the centre of the screen:\n\n        * Hit details: {{{hitType}}} - will be "block" for a block, "entity" for an entity (eg spider, rabbit etc) or "item" for a free-floating item that can be picked up. {{{inRange}}} will be true if the block/entity is within the agent\'s reach - ie attacking or using will have an effect on the object. {{{distance}}} gives the straight-line distance from the agent.\n        * Position: {{{x}}}, {{{y}}}, {{{z}}} - in the case of block hits, will be the precise point when the ray intercepts the block. {{{yaw}}}, {{{pitch}}} are also added for entities.\n        * Type information: {{{type}}}, {{{colour}}}, {{{variant}}}, {{{facing}}}\n        * Extra properties: in the case of block types, any extra properties will be returned by their minecraft name, prefixed with "prop_" (eg, for leaves, "prop_decayable" and "prop_check_decay") - this is the same data as can be seen by exploring Minecraft with the F3 debug information displayed. For floating items, the stack size is returned in {{{stackSize}}}\n        * NBTTagCompound: for tile entity blocks, optionally returns a json object called "NBTTagCompound" which contains the entity\'s entire NBTTagCompound - eg useful for reading the text off signs, etc. Set {{{includeNBT}}} to true to receive this data.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1825, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromRay.name().localName(), ObservationFromRay)

ObservationFromFullInventory = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullInventory'), CTD_ANON_55, documentation='\n        When present, the Mod will return observations that describe the contents of the player\'s inventory.\n        There are two modes - "flat" (the default) is provided for backwards compatibility, and behaves like this:\n\n        The inventory contents are returned in a flat format in the root of the json observations.\n        Up to four values are returned for each slot, if not empty: e.g. {{{InventorySlot_0_size}}} and {{{InventorySlot_0_item}}} containing the number and\n        type of the item(s) in the slot, respectively, and {{{InventorySlot_0_colour}}} and {{{InventorySlot_0_variant}}} if the item has a colour/variation.\n        Inventory slots are numbered 0 to 39 inclusive.\n        If there is a container item available (eg the player is pointed at a chest), this will be returned in the same way, but "InventorySlot"\n        will be replaced by "ContainerNameSlot" - eg {{{ShulkerBoxSlot_0_item}}} etc.\n        \n        If {{{flat}}} is false (recommended), the data is returned as an array of objects, one for each item in the inventory/inventories.\n        The JSON array is called "inventory", and each item in the array will contain:\n        * {{{type}}} - the type of the object in that ItemStack\n        * {{{colour}}} - the colour, if relevant\n        * {{{variant}}} - the variant, if relevant\n        * {{{quantity}}} - the number of objects in the ItemStack\n        * {{{index}}} - the slot number\n        * {{{inventory}}} - the name of the inventory - will be "Inventory" for the player, or, for example, "ShulkerBox", "Chest" etc, if a container is available.\n        This index and inventory information can be used to specify the item in the {{{InventoryCommands}}} - items are specified as inventory:index -\n        eg "ShulkerBox:12"\n        \n        In addition to this information, whether {{{flat}}} is true or false, an array called "inventoriesAvailable" will also be returned.\n        This will contain a list of all the inventories available (usually just the player\'s, but if the player is pointed at a container, this\n        will also be available.)\n        For each inventory, an object will be returned that specifies:\n        * {{{name}}} - the inventory name (same as will be returned in the {{{inventory}}} field for any items in that inventory)\n        * {{{size}}} - the number of slots the inventory provides.\n        \n        For a working example please see inventory_test.py in the Python samples folder.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1842, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromFullInventory.name().localName(), ObservationFromFullInventory)

ObservationFromDiscreteCell = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDiscreteCell'), CTD_ANON_56, documentation="\n        When present, the Mod will return an observation of the player's position that is unique for every cell on the x/z plane.\n        This is useful for discrete-movement missions where we need to uniquely identify their location but don't mind how.\n\n        The observation will contain the JSON element {{{cell}}} containing e.g. {{{(2,4)}}} if the player is standing at any location where\n        x = 2 and z = 4.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1881, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromDiscreteCell.name().localName(), ObservationFromDiscreteCell)

ObservationFromDistance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDistance'), CTD_ANON_57, documentation='\n        When present, the Mod will return an observation that specifies the distance to a named location.\n\n        A JSON element {{{distanceFromNAME}}} will be returned (where {{{NAME}}} is replaced with the name of the NamedPoint),\n        with a value that is the distance.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1903, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromDistance.name().localName(), ObservationFromDistance)

ObservationFromGrid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromGrid'), CTD_ANON_58, documentation='\n        When present, the Mod will return observations that say what the nearby blocks are.\n\n        For each {{{Grid}}} entry, a named JSON element will be returned with a 1D array of block types, in order along the x, then z, then y axes.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1938, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromGrid.name().localName(), ObservationFromGrid)

ObservationFromNearbyEntities = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromNearbyEntities'), CTD_ANON_59, documentation='\n        When present, the Mod will return observations that list the positions of all entities that fall within the given ranges of the agent.\n\n        A JSON array will be returned for each range requested, named using the {{{name}}} attribute of the range. Within the array will be a series of elements, one for each entity, containing the following:\n        \n        - name: a string describing the entity (eg from Types.xsd)\n        \n        - x: the x position of the entity\n        \n        - y: the y position of the entity\n        \n        - z: the z position of the entity\n        \n        - quantity: if items have been grouped together by Minecraft, this indicates the number in the stack\n        \n        - colour: if the item is a tile entity, with a colour, this will be present to describe the colour\n        \n        - variation: optional string to describe the variation - eg the type of egg, or brick, etc (see Types.xsd)\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1968, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromNearbyEntities.name().localName(), ObservationFromNearbyEntities)

ObservationFromChat = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromChat'), CTD_ANON_60, documentation="\n        When present, the Mod will return observations that say what chat messages have occurred and from which player.\n        It will also return messages for any title or subtitle change (eg via Minecraft's title command)\n\n        A JSON element {{{Chat}}} will be returned, with a list of chat strings.\n        In the same way, title changes and subtitle changes will be returned in {{{Title}}} and {{{Subtitle}}} respectively.\n        \n        Note that unless the AgentHost ObservationsPolicy is set to KEEP_ALL_OBSERVATIONS it is likely that chat messages will be missed.\n        The default policy is LATEST_OBSERVATION_ONLY.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1997, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromChat.name().localName(), ObservationFromChat)

ObservationFromCompass = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromCompass'), CTD_ANON_61, documentation="\n             When present, the Mod will return observations that detail how the agent is facing and what position the agent is in with respect to a compass.\n\n             A JSON element will be returned for the compass in the agent's inventory. The JSON will contain the following\n\n             - set: boolean on whether the compass is set\n\n             - compass-x: the x coordinate value of the set compass, null if not set\n\n             - compass-y: the y coordinate value of the set compass, null if not set\n\n             - compass-z: the z coordinate value of the set compass, null if not set\n\n             - relative-x: the relative x coordinate value of the player to the compass, null if not set\n\n             - relative-y: the relative y coordinate value of the player to the compass, null if not set\n\n             - relative-z: the relative z coordinate value of the player to the compass, null if not set\n\n             - offset: the number of degrees the agent is facing away from the direction the compass is pointing\n                \n             - normalized-offset: the number of degrees the agent is facing away, with the agent considered 0 degrees\n\n             - distance: the distance from the agent's location to the compass's location\n         ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2013, 2))
Namespace.addCategoryObject('elementBinding', ObservationFromCompass.name().localName(), ObservationFromCompass)

AgentQuitFromReachingPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingPosition'), CTD_ANON_65, documentation="\n        When this is included the agent's mission will end when they reach a specified position.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2424, 2))
Namespace.addCategoryObject('elementBinding', AgentQuitFromReachingPosition.name().localName(), AgentQuitFromReachingPosition)

AgentQuitFromTimeUp = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTimeUp'), CTD_ANON_66, documentation="\n        When this is included the agent's mission will end when a certain amount of time has elapsed.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2437, 2))
Namespace.addCategoryObject('elementBinding', AgentQuitFromTimeUp.name().localName(), AgentQuitFromTimeUp)

AgentQuitFromTouchingBlockType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTouchingBlockType'), CTD_ANON_67, documentation="\n        When this is included the agent's mission will end when they come in contact with a specified block type.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2449, 2))
Namespace.addCategoryObject('elementBinding', AgentQuitFromTouchingBlockType.name().localName(), AgentQuitFromTouchingBlockType)

AgentQuitFromCollectingItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCollectingItem'), CTD_ANON_68, documentation="\n        When this is included the agent's mission will end when they collect (or craft) a specified item.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2462, 2))
Namespace.addCategoryObject('elementBinding', AgentQuitFromCollectingItem.name().localName(), AgentQuitFromCollectingItem)

AgentQuitFromCatchingMob = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCatchingMob'), CTD_ANON_69, documentation='\n        Agent\'s mission will end when they corner a mob. If {{{global}}} is true then the agent doesn\'t have to be involved in catching the mob; otherwise they must be adjacent to the mob.\n        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft\'s definition of caught, in which mobs can escape by jumping or passing through agents.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2485, 2))
Namespace.addCategoryObject('elementBinding', AgentQuitFromCatchingMob.name().localName(), AgentQuitFromCatchingMob)

AgentQuitFromReachingCommandQuota = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingCommandQuota'), CTD_ANON_70, documentation='\n          Count the commands acted on by the Mod, and signal the end of the mission when the defined quota of commands has been reached.\n\n          A total number of commands can be specified, and/or groups of commands can be given their own quota.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2530, 2))
Namespace.addCategoryObject('elementBinding', AgentQuitFromReachingCommandQuota.name().localName(), AgentQuitFromReachingCommandQuota)

AgentSection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentSection'), CTD_ANON_71, documentation='\n              Each agent is specified in one of these sections, detailing the way they experience the world and the actions they can perform to interact with it.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 84, 4))
Namespace.addCategoryObject('elementBinding', AgentSection.name().localName(), AgentSection)

ClassroomDecorator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassroomDecorator'), CTD_ANON_72, documentation='\n        Adds a series of joined rooms into the world.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 718, 2))
Namespace.addCategoryObject('elementBinding', ClassroomDecorator.name().localName(), ClassroomDecorator)

ColourMapProducer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ColourMapProducer'), CTD_ANON_74, documentation='\n        Requests a 24bpp colour map - each object/entity represented by a solid block of colour.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1134, 2))
Namespace.addCategoryObject('elementBinding', ColourMapProducer.name().localName(), ColourMapProducer)

VideoProducer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VideoProducer'), CTD_ANON_75, documentation='\n        Requests that video frames be sent.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1152, 2))
Namespace.addCategoryObject('elementBinding', VideoProducer.name().localName(), VideoProducer)

TurnBasedCommands = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TurnBasedCommands'), CTD_ANON_77, documentation='\n        Allows a user to specify that certain commands must be sent on a turn-by-turn basis - ie, in a multi-agent mission, placing the {{{DiscreteMovementCommand}}} handler inside the TurnBasedCommands section will mean that each agent must take it in turns to send a discrete movement command. See turn_based_test.py in the Python Samples for a demonstration/explanation of this.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1703, 2))
Namespace.addCategoryObject('elementBinding', TurnBasedCommands.name().localName(), TurnBasedCommands)

RewardForDamagingEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForDamagingEntity'), CTD_ANON_78, documentation='\n        Sends a reward when an entity is damaged.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2079, 2))
Namespace.addCategoryObject('elementBinding', RewardForDamagingEntity.name().localName(), RewardForDamagingEntity)

RewardForReachingPosition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForReachingPosition'), CTD_ANON_79, documentation='\n        Sends a reward when a specified position is reached by the agent.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2093, 2))
Namespace.addCategoryObject('elementBinding', RewardForReachingPosition.name().localName(), RewardForReachingPosition)

RewardForTouchingBlockType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForTouchingBlockType'), CTD_ANON_80, documentation='\n        Sends a rewards when an agent comes in contact with a specific block type.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2148, 2))
Namespace.addCategoryObject('elementBinding', RewardForTouchingBlockType.name().localName(), RewardForTouchingBlockType)

RewardForSendingCommand = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingCommand'), CTD_ANON_81, documentation='\n        Sends a reward when the agent issues a command.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2162, 2))
Namespace.addCategoryObject('elementBinding', RewardForSendingCommand.name().localName(), RewardForSendingCommand)

RewardForSendingMatchingChatMessage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingMatchingChatMessage'), CTD_ANON_82, documentation='\n        Sends a reward when the agent sends a chat message that matches a given regular expression (supports Java regex syntax).\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2182, 2))
Namespace.addCategoryObject('elementBinding', RewardForSendingMatchingChatMessage.name().localName(), RewardForSendingMatchingChatMessage)

RewardForCollectingItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForCollectingItem'), CTD_ANON_83, documentation='\n        Sends a reward when the agent collects a specific item.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2202, 2))
Namespace.addCategoryObject('elementBinding', RewardForCollectingItem.name().localName(), RewardForCollectingItem)

RewardForDiscardingItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForDiscardingItem'), CTD_ANON_84, documentation='\n        Sends a reward when an agent discards a specific item.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2216, 2))
Namespace.addCategoryObject('elementBinding', RewardForDiscardingItem.name().localName(), RewardForDiscardingItem)

RewardForMissionEnd = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForMissionEnd'), CTD_ANON_85, documentation='\n        Sends a reward when the mission ends for a specified reason.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2236, 2))
Namespace.addCategoryObject('elementBinding', RewardForMissionEnd.name().localName(), RewardForMissionEnd)

RewardForStructureCopying = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForStructureCopying'), CTD_ANON_86, documentation='\n        Sends a reward when the agent copies blocks from a given structure.\n        \n        NOTE: This will do nothing unless you have set up a {{{BuildBattleDecorator}}} on the server.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2287, 2))
Namespace.addCategoryObject('elementBinding', RewardForStructureCopying.name().localName(), RewardForStructureCopying)

RewardForTimeTaken = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForTimeTaken'), CTD_ANON_87, documentation='\n        Reward that is dependent on time. Can be received per tick, or just once at the end.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2355, 2))
Namespace.addCategoryObject('elementBinding', RewardForTimeTaken.name().localName(), RewardForTimeTaken)

RewardForCatchingMob = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForCatchingMob'), CTD_ANON_88, documentation='\n        Reward for cornering a mob, such that it cannot move from its current square without passing through an agent.\n        If {{{global}}} is true then the agent doesn\'t have to be involved in catching the mob; otherwise they must be adjacent to the mob.\n        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft\'s definition of caught, in which mobs can escape by jumping or passing through agents.\n        If {{{oneshot}}} is true, the reward will only be counted once per entity.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2380, 2))
Namespace.addCategoryObject('elementBinding', RewardForCatchingMob.name().localName(), RewardForCatchingMob)

InventoryObject = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryObject'), InventoryObjectType, documentation='\n              Defines an item or block in the inventory.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 266, 4))
Namespace.addCategoryObject('elementBinding', InventoryObject.name().localName(), InventoryObject)

DrawEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawEntity'), DrawEntity_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 709, 2))
Namespace.addCategoryObject('elementBinding', DrawEntity.name().localName(), DrawEntity)

DrawItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawItem'), DrawItem_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 710, 2))
Namespace.addCategoryObject('elementBinding', DrawItem.name().localName(), DrawItem)

DrawContainer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawContainer'), DrawContainer_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 715, 2))
Namespace.addCategoryObject('elementBinding', DrawContainer.name().localName(), DrawContainer)

DrawSign = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawSign'), DrawSign_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 716, 2))
Namespace.addCategoryObject('elementBinding', DrawSign.name().localName(), DrawSign)

InventoryItem = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryItem'), CTD_ANON_97, documentation='\n              Defines an item in the inventory - deprecated, use InventoryObject instead\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 274, 4))
Namespace.addCategoryObject('elementBinding', InventoryItem.name().localName(), InventoryItem)

InventoryBlock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryBlock'), CTD_ANON_98, documentation='\n              Defines a block in the inventory - deprecated, use InventoryObject instead\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 287, 4))
Namespace.addCategoryObject('elementBinding', InventoryBlock.name().localName(), InventoryBlock)

DrawLine = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawLine'), DrawLine_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 711, 2))
Namespace.addCategoryObject('elementBinding', DrawLine.name().localName(), DrawLine)

DrawSphere = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawSphere'), DrawSphere_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 712, 2))
Namespace.addCategoryObject('elementBinding', DrawSphere.name().localName(), DrawSphere)

DrawBlock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawBlock'), DrawBlock_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 713, 2))
Namespace.addCategoryObject('elementBinding', DrawBlock.name().localName(), DrawBlock)

DrawCuboid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawCuboid'), DrawCuboid_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 714, 2))
Namespace.addCategoryObject('elementBinding', DrawCuboid.name().localName(), DrawCuboid)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModSettings'), CTD_ANON_, scope=CTD_ANON, documentation='\n              Settings here are independent of the mission but affect how it is run. \n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 31, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerSection'), CTD_ANON_2, scope=CTD_ANON, documentation='\n              The Minecraft server stores the world and keeps track of the blocks that have changed. Each Minecraft client connects to the server when it needs to\n              change blocks or ask what blocks are present, for example. With multi-agent missions there may be many clients, all connected to a single server.\n              \n              Settings here affect the shared world that the clients experience.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 67, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentSection'), CTD_ANON_71, scope=CTD_ANON, documentation='\n              Each agent is specified in one of these sections, detailing the way they experience the world and the actions they can perform to interact with it.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 84, 4)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'About'), CTD_ANON_3, scope=CTD_ANON, documentation='\n              Description of the mission.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 100, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 23, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'About')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 22, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModSettings')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 23, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ServerSection')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 24, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentSection')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 25, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MsPerTick'), STD_ANON, scope=CTD_ANON_, documentation='\n                            Use this to overclock Minecraft - to make Minecraft time run faster than normal.\n                        \n                            This sets the delay that Minecraft uses between world ticks, in milliseconds. The default is 50ms per tick (20Hz).\n                            Double-speed would be 25ms/tick (40Hz). For best results, stick to reasonable values (that the server \n                            might be able to cope with), which also result in a whole number of ticks per second.\n                        ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 39, 16)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PrioritiseOffscreenRendering'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_, documentation='\n                            If set to true, the Minecraft window will only be updated once per second during the run of the mission. This will allow the\n                            render pipeline to run much faster, resulting in the platform receiving frames at a higher rate.\n                        ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 55, 16)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 39, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MsPerTick')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 39, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 55, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PrioritiseOffscreenRendering')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 55, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 39, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 55, 16))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_2())
    sub_automata.append(_BuildAutomaton_3())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 38, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerInitialConditions'), CTD_ANON_7, scope=CTD_ANON_2, documentation='\n              Defines the initial conditions of the world.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 147, 4)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerHandlers'), CTD_ANON_10, scope=CTD_ANON_2, documentation='\n              Defines the Mission Handlers block for the server.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 414, 4)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 78, 16))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ServerInitialConditions')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 78, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ServerHandlers')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 79, 16))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_4()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Summary'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 108, 16)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Description'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 109, 16)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 109, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Summary')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 108, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Description')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 109, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_5()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Placement'), PosAndDirection, scope=CTD_ANON_4, documentation="\n                      The player's starting location; if unspecified, will be the game's randomly-chosen spawn point.\n                    ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 122, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Inventory'), CTD_ANON_5, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 129, 16)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnderBoxInventory'), CTD_ANON_6, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 136, 16)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 122, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Placement')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 122, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 129, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Inventory')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 129, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 136, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnderBoxInventory')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 136, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 122, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 129, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 136, 16))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_7())
    sub_automata.append(_BuildAutomaton_8())
    sub_automata.append(_BuildAutomaton_9())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 121, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_6()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryObject'), InventoryObjectType, scope=CTD_ANON_5, documentation='\n              Defines an item or block in the inventory.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 266, 4)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 131, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InventoryObject')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 132, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_10()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryObject'), InventoryObjectType, scope=CTD_ANON_6, documentation='\n              Defines an item or block in the inventory.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 266, 4)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 138, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InventoryObject')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 139, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_11()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AllowSpawning'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_7, documentation='\n                      Set this to true to allow mobs (animals and hostiles) to spawn during a mission.\n                    ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 157, 16), unicode_default='false'))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AllowedMobs'), STD_ANON_20, scope=CTD_ANON_7, documentation='\n                      If AllowSpawning is set to true, use this to specify a list of the allowed mobs. Only those mobs which are on the list will be allowed to spawn. If no list is specified, normal spawning behaviour will take place. Note that these settings *do* effect mob_spawner blocks.\n                    ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 164, 16)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Time'), CTD_ANON_8, scope=CTD_ANON_7, documentation='\n            Minecraft has a day-night cycle that affects the light levels and the appearance of hostile mobs.\n          ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 178, 4)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Weather'), STD_ANON_2, scope=CTD_ANON_7, documentation='\n              Specifies the type of weather at the start of the mission.\n\n              "normal" = let Minecraft do what it normally does\n              \n              "clear" = start with clear weather\n              \n              "rain" = start with rain (or snow, in a cold biome)\n              \n              "thunder" = start with thundery weather\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 220, 4), unicode_default='normal'))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 155, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Time')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 155, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 156, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Weather')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 156, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 157, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AllowSpawning')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 157, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 164, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AllowedMobs')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 164, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 155, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 156, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 157, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 164, 16))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_13())
    sub_automata.append(_BuildAutomaton_14())
    sub_automata.append(_BuildAutomaton_15())
    sub_automata.append(_BuildAutomaton_16())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 154, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_12()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AllowPassageOfTime'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_8, documentation='\n                      Set this to false to stop the day-night cycle. The sun position and weather will remain fixed for the duration of the mission.\n                    ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 187, 16), unicode_default='true'))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartTime'), STD_ANON_, scope=CTD_ANON_8, documentation='\n          Specifies the time of day at the start of the mission, in thousandths of an hour.\n          \n          0 = dawn\n          \n          6000 = noon\n          \n          18000 = midnight\n          \n          Time in Minecraft travels (by default) 72 times faster than real-time. Thus a Minecraft day lasts 20 minutes.\n        ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 198, 4)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 186, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartTime')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 186, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 187, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AllowPassageOfTime')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 187, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 186, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 187, 16))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_18())
    sub_automata.append(_BuildAutomaton_19())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 185, 12)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_17()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DepthProducer'), CTD_ANON_37, scope=CTD_ANON_9, documentation='\n        Requests that 32bpp depth frames be sent.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1095, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LuminanceProducer'), CTD_ANON_38, scope=CTD_ANON_9, documentation='\n        Requests an 8bpp grayscale image.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1109, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ColourMapProducer'), CTD_ANON_74, scope=CTD_ANON_9, documentation='\n        Requests a 24bpp colour map - each object/entity represented by a solid block of colour.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1134, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VideoProducer'), CTD_ANON_75, scope=CTD_ANON_9, documentation='\n        Requests that video frames be sent.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1152, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ContinuousMovementCommands'), CTD_ANON_39, scope=CTD_ANON_9, documentation='\n        When present, the Mod will accept commands that control smooth movement.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards with normal speed.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1524, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommands'), CTD_ANON_40, scope=CTD_ANON_9, documentation='\n        When present, the Mod will accept commands to set the player\'s position and orientation directly.\n\n        Commands take the form of "verb <value>" e.g. "{{{tpx 13}}}" to set the x-coordinate to 13.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1558, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommands'), CTD_ANON_41, scope=CTD_ANON_9, documentation='\n        When present, the Mod will accept commands that control movement in discrete jumps.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards one square.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1583, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryCommands'), CTD_ANON_42, scope=CTD_ANON_9, documentation="\n        When present, the Mod will accept commands that control the player's inventory.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1610, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommands'), CTD_ANON_43, scope=CTD_ANON_9, documentation='\n        When present, the Mod will accept simple commands that implement a basic form of crafting.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1633, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChatCommands'), CTD_ANON_44, scope=CTD_ANON_9, documentation='\n        When present, the Mod will accept commands that send chat messages to the other players.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1656, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommands'), CTD_ANON_45, scope=CTD_ANON_9, documentation='\n        When present, the Mod will accept a command that quits the mission.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1679, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TurnBasedCommands'), CTD_ANON_77, scope=CTD_ANON_9, documentation='\n        Allows a user to specify that certain commands must be sent on a turn-by-turn basis - ie, in a multi-agent mission, placing the {{{DiscreteMovementCommand}}} handler inside the TurnBasedCommands section will mean that each agent must take it in turns to send a discrete movement command. See turn_based_test.py in the Python Samples for a demonstration/explanation of this.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1703, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HumanLevelCommands'), CTD_ANON_46, scope=CTD_ANON_9, documentation='\n        When present, the Mod will accept commands on the level of mouse and keyboard events.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1721, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRecentCommands'), CTD_ANON_47, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return observations that say what commands have been acted on since the last report, in the JSON element {{{CommandsSinceLastObservation}}}.\n\n        Note that the commands returned might not yet have taken effect, depending on the command and the way in which Minecraft responds to it -\n        but they will have been processed by the command handling chain.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1746, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromTurnScheduler'), CTD_ANON_48, scope=CTD_ANON_9, documentation="\n        Automatically addd by Malmo when the user specifies the {{{TurnBasedCommands}}} handler. This provides vital observations back to the agent to allow them to make use of the turn scheduler. When it is the agent's turn, the JSON will contain {{{turn_number}}} - an integer which tracks the number of turns the agent has taken, and {{{turn_key}}} - a one-shot key which must be passed back to Malmo as a parameter in {{{sendCommand}}} in order for the command to be accepted.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1758, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSubgoalPositionList'), CTD_ANON_49, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return observations that indicate the direction to follow to the next subgoal.\n        The value to turn by is returned in the JSON element {{{yawDelta}}}.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1767, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHotBar'), CTD_ANON_50, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return observations that say what is in the hotbar.\n\n        Up to four values are returned for each slot, if not empty: e.g. {{{Hotbar_1_size}}} and {{{Hotbar_1_item}}} containing the number and\n        type of the item(s) in the slot, respectively, and {{{Hotbar_1_colour}}} and  {{{Hotbar_1_variant}}} if the item has a colour/variation. Hotbar slots are numbered 0 to 8 inclusive.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1781, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullStats'), CTD_ANON_51, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return several observations:\n\n        * Achievement statistics: {{{DistanceTravelled}}}, {{{TimeAlive}}}, {{{MobsKilled}}}, {{{PlayersKilled}}}, {{{DamageTaken}}}, {{{DamageDealt}}}\n        * Life statistics: {{{Life}}}, {{{Score}}}, {{{Food}}}, {{{Air}}}, {{{XP}}}, {{{IsAlive}}}, {{{Name}}}\n        * Position statistics: {{{XPos}}}, {{{YPos}}}, {{{ZPos}}}, {{{Pitch}}}, {{{Yaw}}}\n        * Environment statistics: {{{WorldTime}}} - current time in ticks, {{{TotalTime}}} - total world time, unaffected by ServerInitialConditions\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1793, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHuman'), CTD_ANON_52, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return low-level keyboard and mouse events.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1807, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSystem'), CTD_ANON_53, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return information on the current performance of the Minecraft system - eg tick speeds, etc.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1816, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRay'), CTD_ANON_54, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return a JSON object called "LineOfSight", containing observations about the block or entity which is currently in the centre of the screen:\n\n        * Hit details: {{{hitType}}} - will be "block" for a block, "entity" for an entity (eg spider, rabbit etc) or "item" for a free-floating item that can be picked up. {{{inRange}}} will be true if the block/entity is within the agent\'s reach - ie attacking or using will have an effect on the object. {{{distance}}} gives the straight-line distance from the agent.\n        * Position: {{{x}}}, {{{y}}}, {{{z}}} - in the case of block hits, will be the precise point when the ray intercepts the block. {{{yaw}}}, {{{pitch}}} are also added for entities.\n        * Type information: {{{type}}}, {{{colour}}}, {{{variant}}}, {{{facing}}}\n        * Extra properties: in the case of block types, any extra properties will be returned by their minecraft name, prefixed with "prop_" (eg, for leaves, "prop_decayable" and "prop_check_decay") - this is the same data as can be seen by exploring Minecraft with the F3 debug information displayed. For floating items, the stack size is returned in {{{stackSize}}}\n        * NBTTagCompound: for tile entity blocks, optionally returns a json object called "NBTTagCompound" which contains the entity\'s entire NBTTagCompound - eg useful for reading the text off signs, etc. Set {{{includeNBT}}} to true to receive this data.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1825, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullInventory'), CTD_ANON_55, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return observations that describe the contents of the player\'s inventory.\n        There are two modes - "flat" (the default) is provided for backwards compatibility, and behaves like this:\n\n        The inventory contents are returned in a flat format in the root of the json observations.\n        Up to four values are returned for each slot, if not empty: e.g. {{{InventorySlot_0_size}}} and {{{InventorySlot_0_item}}} containing the number and\n        type of the item(s) in the slot, respectively, and {{{InventorySlot_0_colour}}} and {{{InventorySlot_0_variant}}} if the item has a colour/variation.\n        Inventory slots are numbered 0 to 39 inclusive.\n        If there is a container item available (eg the player is pointed at a chest), this will be returned in the same way, but "InventorySlot"\n        will be replaced by "ContainerNameSlot" - eg {{{ShulkerBoxSlot_0_item}}} etc.\n        \n        If {{{flat}}} is false (recommended), the data is returned as an array of objects, one for each item in the inventory/inventories.\n        The JSON array is called "inventory", and each item in the array will contain:\n        * {{{type}}} - the type of the object in that ItemStack\n        * {{{colour}}} - the colour, if relevant\n        * {{{variant}}} - the variant, if relevant\n        * {{{quantity}}} - the number of objects in the ItemStack\n        * {{{index}}} - the slot number\n        * {{{inventory}}} - the name of the inventory - will be "Inventory" for the player, or, for example, "ShulkerBox", "Chest" etc, if a container is available.\n        This index and inventory information can be used to specify the item in the {{{InventoryCommands}}} - items are specified as inventory:index -\n        eg "ShulkerBox:12"\n        \n        In addition to this information, whether {{{flat}}} is true or false, an array called "inventoriesAvailable" will also be returned.\n        This will contain a list of all the inventories available (usually just the player\'s, but if the player is pointed at a container, this\n        will also be available.)\n        For each inventory, an object will be returned that specifies:\n        * {{{name}}} - the inventory name (same as will be returned in the {{{inventory}}} field for any items in that inventory)\n        * {{{size}}} - the number of slots the inventory provides.\n        \n        For a working example please see inventory_test.py in the Python samples folder.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1842, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDiscreteCell'), CTD_ANON_56, scope=CTD_ANON_9, documentation="\n        When present, the Mod will return an observation of the player's position that is unique for every cell on the x/z plane.\n        This is useful for discrete-movement missions where we need to uniquely identify their location but don't mind how.\n\n        The observation will contain the JSON element {{{cell}}} containing e.g. {{{(2,4)}}} if the player is standing at any location where\n        x = 2 and z = 4.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1881, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDistance'), CTD_ANON_57, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return an observation that specifies the distance to a named location.\n\n        A JSON element {{{distanceFromNAME}}} will be returned (where {{{NAME}}} is replaced with the name of the NamedPoint),\n        with a value that is the distance.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1903, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromGrid'), CTD_ANON_58, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return observations that say what the nearby blocks are.\n\n        For each {{{Grid}}} entry, a named JSON element will be returned with a 1D array of block types, in order along the x, then z, then y axes.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1938, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromNearbyEntities'), CTD_ANON_59, scope=CTD_ANON_9, documentation='\n        When present, the Mod will return observations that list the positions of all entities that fall within the given ranges of the agent.\n\n        A JSON array will be returned for each range requested, named using the {{{name}}} attribute of the range. Within the array will be a series of elements, one for each entity, containing the following:\n        \n        - name: a string describing the entity (eg from Types.xsd)\n        \n        - x: the x position of the entity\n        \n        - y: the y position of the entity\n        \n        - z: the z position of the entity\n        \n        - quantity: if items have been grouped together by Minecraft, this indicates the number in the stack\n        \n        - colour: if the item is a tile entity, with a colour, this will be present to describe the colour\n        \n        - variation: optional string to describe the variation - eg the type of egg, or brick, etc (see Types.xsd)\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1968, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromChat'), CTD_ANON_60, scope=CTD_ANON_9, documentation="\n        When present, the Mod will return observations that say what chat messages have occurred and from which player.\n        It will also return messages for any title or subtitle change (eg via Minecraft's title command)\n\n        A JSON element {{{Chat}}} will be returned, with a list of chat strings.\n        In the same way, title changes and subtitle changes will be returned in {{{Title}}} and {{{Subtitle}}} respectively.\n        \n        Note that unless the AgentHost ObservationsPolicy is set to KEEP_ALL_OBSERVATIONS it is likely that chat messages will be missed.\n        The default policy is LATEST_OBSERVATION_ONLY.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1997, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromCompass'), CTD_ANON_61, scope=CTD_ANON_9, documentation="\n             When present, the Mod will return observations that detail how the agent is facing and what position the agent is in with respect to a compass.\n\n             A JSON element will be returned for the compass in the agent's inventory. The JSON will contain the following\n\n             - set: boolean on whether the compass is set\n\n             - compass-x: the x coordinate value of the set compass, null if not set\n\n             - compass-y: the y coordinate value of the set compass, null if not set\n\n             - compass-z: the z coordinate value of the set compass, null if not set\n\n             - relative-x: the relative x coordinate value of the player to the compass, null if not set\n\n             - relative-y: the relative y coordinate value of the player to the compass, null if not set\n\n             - relative-z: the relative z coordinate value of the player to the compass, null if not set\n\n             - offset: the number of degrees the agent is facing away from the direction the compass is pointing\n                \n             - normalized-offset: the number of degrees the agent is facing away, with the agent considered 0 degrees\n\n             - distance: the distance from the agent's location to the compass's location\n         ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2013, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForDamagingEntity'), CTD_ANON_78, scope=CTD_ANON_9, documentation='\n        Sends a reward when an entity is damaged.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2079, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForReachingPosition'), CTD_ANON_79, scope=CTD_ANON_9, documentation='\n        Sends a reward when a specified position is reached by the agent.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2093, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForTouchingBlockType'), CTD_ANON_80, scope=CTD_ANON_9, documentation='\n        Sends a rewards when an agent comes in contact with a specific block type.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2148, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingCommand'), CTD_ANON_81, scope=CTD_ANON_9, documentation='\n        Sends a reward when the agent issues a command.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2162, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingMatchingChatMessage'), CTD_ANON_82, scope=CTD_ANON_9, documentation='\n        Sends a reward when the agent sends a chat message that matches a given regular expression (supports Java regex syntax).\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2182, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForCollectingItem'), CTD_ANON_83, scope=CTD_ANON_9, documentation='\n        Sends a reward when the agent collects a specific item.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2202, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForDiscardingItem'), CTD_ANON_84, scope=CTD_ANON_9, documentation='\n        Sends a reward when an agent discards a specific item.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2216, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForMissionEnd'), CTD_ANON_85, scope=CTD_ANON_9, documentation='\n        Sends a reward when the mission ends for a specified reason.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2236, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForStructureCopying'), CTD_ANON_86, scope=CTD_ANON_9, documentation='\n        Sends a reward when the agent copies blocks from a given structure.\n        \n        NOTE: This will do nothing unless you have set up a {{{BuildBattleDecorator}}} on the server.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2287, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForTimeTaken'), CTD_ANON_87, scope=CTD_ANON_9, documentation='\n        Reward that is dependent on time. Can be received per tick, or just once at the end.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2355, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardForCatchingMob'), CTD_ANON_88, scope=CTD_ANON_9, documentation='\n        Reward for cornering a mob, such that it cannot move from its current square without passing through an agent.\n        If {{{global}}} is true then the agent doesn\'t have to be involved in catching the mob; otherwise they must be adjacent to the mob.\n        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft\'s definition of caught, in which mobs can escape by jumping or passing through agents.\n        If {{{oneshot}}} is true, the reward will only be counted once per entity.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2380, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingPosition'), CTD_ANON_65, scope=CTD_ANON_9, documentation="\n        When this is included the agent's mission will end when they reach a specified position.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2424, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTimeUp'), CTD_ANON_66, scope=CTD_ANON_9, documentation="\n        When this is included the agent's mission will end when a certain amount of time has elapsed.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2437, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTouchingBlockType'), CTD_ANON_67, scope=CTD_ANON_9, documentation="\n        When this is included the agent's mission will end when they come in contact with a specified block type.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2449, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCollectingItem'), CTD_ANON_68, scope=CTD_ANON_9, documentation="\n        When this is included the agent's mission will end when they collect (or craft) a specified item.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2462, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCatchingMob'), CTD_ANON_69, scope=CTD_ANON_9, documentation='\n        Agent\'s mission will end when they corner a mob. If {{{global}}} is true then the agent doesn\'t have to be involved in catching the mob; otherwise they must be adjacent to the mob.\n        For our purposes, a mob is deemed "caught" if there are no unoccupied air blocks immediately north, south, east or west of them for them to move into. (An air block is considered occupied if there is an agent standing in it.) This does not necessarily correspond to Minecraft\'s definition of caught, in which mobs can escape by jumping or passing through agents.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2485, 2)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingCommandQuota'), CTD_ANON_70, scope=CTD_ANON_9, documentation='\n          Count the commands acted on by the Mod, and signal the end of the mission when the defined quota of commands has been reached.\n\n          A total number of commands can be specified, and/or groups of commands can be given their own quota.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2530, 2)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 331, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRecentCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 331, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 332, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHotBar')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 332, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 333, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullStats')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 333, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 334, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromFullInventory')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 334, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 335, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSubgoalPositionList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 335, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 336, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromGrid')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 336, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 337, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDistance')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 337, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 338, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromDiscreteCell')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 338, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 339, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromChat')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 339, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 340, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromNearbyEntities')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 340, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 341, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromRay')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 341, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 342, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromTurnScheduler')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 342, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 343, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromHuman')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 343, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 344, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromSystem')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 344, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 345, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ObservationFromCompass')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 345, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 347, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VideoProducer')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 347, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 348, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DepthProducer')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 348, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 349, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LuminanceProducer')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 349, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 350, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ColourMapProducer')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 350, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 352, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForTouchingBlockType')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 352, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 353, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingCommand')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 353, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 354, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForSendingMatchingChatMessage')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 354, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 355, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForCollectingItem')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 355, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 356, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForDiscardingItem')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 356, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 357, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForReachingPosition')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 357, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 358, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForMissionEnd')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 358, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 359, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForStructureCopying')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 359, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 360, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForTimeTaken')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 360, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 361, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForCatchingMob')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 361, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 362, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardForDamagingEntity')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 362, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 364, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ContinuousMovementCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 364, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 365, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 365, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 366, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 366, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 367, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InventoryCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 367, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 368, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChatCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 368, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 369, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 369, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 370, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 370, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 371, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TurnBasedCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 371, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 372, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HumanLevelCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 372, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 375, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTimeUp')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 375, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 376, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingPosition')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 376, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 377, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromTouchingBlockType')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 377, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 378, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCollectingItem')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 378, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 379, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromReachingCommandQuota')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 379, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 380, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentQuitFromCatchingMob')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 380, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 331, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 332, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 333, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 334, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 335, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 336, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 337, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 338, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 339, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 340, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 341, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 342, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 343, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 344, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 345, 12))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 347, 12))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 348, 12))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 349, 12))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 350, 12))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 352, 12))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 353, 12))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 354, 12))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 355, 12))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 356, 12))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 357, 12))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 358, 12))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 359, 12))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 360, 12))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 361, 12))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 362, 12))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 364, 12))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 365, 12))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 366, 12))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 367, 12))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 368, 12))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 369, 12))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 370, 12))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 371, 12))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 372, 12))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 375, 12))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 376, 12))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 377, 12))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 378, 12))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 379, 12))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 380, 12))
    counters.add(cc_44)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_21())
    sub_automata.append(_BuildAutomaton_22())
    sub_automata.append(_BuildAutomaton_23())
    sub_automata.append(_BuildAutomaton_24())
    sub_automata.append(_BuildAutomaton_25())
    sub_automata.append(_BuildAutomaton_26())
    sub_automata.append(_BuildAutomaton_27())
    sub_automata.append(_BuildAutomaton_28())
    sub_automata.append(_BuildAutomaton_29())
    sub_automata.append(_BuildAutomaton_30())
    sub_automata.append(_BuildAutomaton_31())
    sub_automata.append(_BuildAutomaton_32())
    sub_automata.append(_BuildAutomaton_33())
    sub_automata.append(_BuildAutomaton_34())
    sub_automata.append(_BuildAutomaton_35())
    sub_automata.append(_BuildAutomaton_36())
    sub_automata.append(_BuildAutomaton_37())
    sub_automata.append(_BuildAutomaton_38())
    sub_automata.append(_BuildAutomaton_39())
    sub_automata.append(_BuildAutomaton_40())
    sub_automata.append(_BuildAutomaton_41())
    sub_automata.append(_BuildAutomaton_42())
    sub_automata.append(_BuildAutomaton_43())
    sub_automata.append(_BuildAutomaton_44())
    sub_automata.append(_BuildAutomaton_45())
    sub_automata.append(_BuildAutomaton_46())
    sub_automata.append(_BuildAutomaton_47())
    sub_automata.append(_BuildAutomaton_48())
    sub_automata.append(_BuildAutomaton_49())
    sub_automata.append(_BuildAutomaton_50())
    sub_automata.append(_BuildAutomaton_51())
    sub_automata.append(_BuildAutomaton_52())
    sub_automata.append(_BuildAutomaton_53())
    sub_automata.append(_BuildAutomaton_54())
    sub_automata.append(_BuildAutomaton_55())
    sub_automata.append(_BuildAutomaton_56())
    sub_automata.append(_BuildAutomaton_57())
    sub_automata.append(_BuildAutomaton_58())
    sub_automata.append(_BuildAutomaton_59())
    sub_automata.append(_BuildAutomaton_60())
    sub_automata.append(_BuildAutomaton_61())
    sub_automata.append(_BuildAutomaton_62())
    sub_automata.append(_BuildAutomaton_63())
    sub_automata.append(_BuildAutomaton_64())
    sub_automata.append(_BuildAutomaton_65())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 330, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_20()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FlatWorldGenerator'), CTD_ANON_11, scope=CTD_ANON_10, documentation='\n        Generates a superflat world with a specified preset string - see e.g. [[http://www.minecraft101.net/superflat/]]\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 69, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DefaultWorldGenerator'), CTD_ANON_12, scope=CTD_ANON_10, documentation='\n        Generates the default terrain.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 109, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FileWorldGenerator'), CTD_ANON_13, scope=CTD_ANON_10, documentation='\n        Loads a saved world from disk. You can find the saved worlds in "{{{Minecraft\\run\\saves}}}". Use the full path to one of those folders.\n        \n        If Minecraft is running on a different machine then copy the folder to a readable network location and update the path accordingly. Example:\n        \n        {{{<FileWorldGenerator src="\\\\\\\\machine-id\\\\shared\\\\ProjectMalmo\\\\saved_maps\\\\arena" />}}}\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 142, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BiomeGenerator'), CTD_ANON_14, scope=CTD_ANON_10, documentation='\n              Generates a survival world with the specified biome.\n          ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 179, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MovingTargetDecorator'), CTD_ANON_15, scope=CTD_ANON_10, documentation='\n        Creates a moving two-block target which takes random moves within a specified arena. Can be linked to the turn scheduler.\n        This can be made more general in the future, but is currently tailored specifically for the Malmo collaborative challenge.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 262, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SnakeDecorator'), CTD_ANON_16, scope=CTD_ANON_10, documentation='\n        Adds a snake made of blocks, that grows at one end and shrinks at the other.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 320, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MazeDecorator'), CTD_ANON_21, scope=CTD_ANON_10, documentation='\n        Adds a maze into the world.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 407, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawingDecorator'), CTD_ANON_27, scope=CTD_ANON_10, documentation='\n        Draws structures into the world.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 534, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClassroomDecorator'), CTD_ANON_72, scope=CTD_ANON_10, documentation='\n        Adds a series of joined rooms into the world.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 718, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AnimationDecorator'), CTD_ANON_31, scope=CTD_ANON_10, documentation='\n          Basic animation created by repeatedly applying a DrawingDecorator at different positions.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 813, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BuildBattleDecorator'), CTD_ANON_33, scope=CTD_ANON_10, documentation="\n        Sets up a build battle area, with a source structure that can't be edited, and a goal structure, with optional recolouring of blocks to indicate correct/incorrect placement.\n        \n        NOTE: Make sure to add a {{{RewardForStructureCopying}}} handler to the AgentHandlers if you want your agent to be rewarded for contributing to the build.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 917, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavigationDecorator'), CTD_ANON_34, scope=CTD_ANON_10, documentation='\n              Adds a specified block to the world and sets compass to that block.\n\n              Block is placed randomly along a radius around the origin specified.\n\n              Can force the block to appear at the highest available y-value.\n           ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1012, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitFromTimeUp'), CTD_ANON_35, scope=CTD_ANON_10, documentation='\n        Specifies a time limit that applies to all agents.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1066, 2)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitWhenAnyAgentFinishes'), CTD_ANON_36, scope=CTD_ANON_10, documentation='\n        Specifies that the mission ends when any of the agents finish.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1078, 2)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 433, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 448, 16))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FlatWorldGenerator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 428, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FileWorldGenerator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 429, 20))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DefaultWorldGenerator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 430, 20))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BiomeGenerator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 431, 20))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DrawingDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 439, 20))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AnimationDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 440, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MazeDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 441, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClassroomDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 442, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SnakeDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 443, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MovingTargetDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 444, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BuildBattleDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 445, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavigationDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 446, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitFromTimeUp')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 454, 20))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ServerQuitWhenAnyAgentFinishes')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 455, 20))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_66()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArenaBounds'), UnnamedGridDefinition, scope=CTD_ANON_15, documentation='\n              Define the bounds of the arena within which the target can move.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 271, 8)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPos'), Pos, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 278, 8)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Seed'), STD_ANON_7, scope=CTD_ANON_15, documentation='\n              The master seed for the random number generator used to move the target.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 279, 8)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpdateSpeed'), STD_ANON_8, scope=CTD_ANON_15, documentation='\n              The length, in ticks, between each update, or the string "turnbased" to use the turn scheduler.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 296, 8)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PermeableBlocks'), BlockSpec, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 313, 8)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BlockType'), DrawBlockBasedObjectType, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 314, 8)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArenaBounds')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 271, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPos')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 278, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Seed')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 279, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpdateSpeed')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 296, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PermeableBlocks')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 313, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BlockType')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 314, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_68())
    sub_automata.append(_BuildAutomaton_69())
    sub_automata.append(_BuildAutomaton_70())
    sub_automata.append(_BuildAutomaton_71())
    sub_automata.append(_BuildAutomaton_72())
    sub_automata.append(_BuildAutomaton_73())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 270, 6)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_67()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Seed'), STD_ANON_9, scope=CTD_ANON_16, documentation='\n              The master seed for the random number generator used to make the snake.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 328, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MaterialSeed'), STD_ANON_10, scope=CTD_ANON_16, documentation='\n              Optional seed for determining block types.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 345, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FreshBlock'), SnakeBlock, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 362, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StaleBlock'), SnakeBlock, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 363, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GapProbability'), CTD_ANON_17, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 364, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StairsProbability'), CTD_ANON_18, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 373, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TurnProbability'), CTD_ANON_19, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 382, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SizeAndPosition'), CTD_ANON_20, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 391, 8)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpeedInTicks'), pyxb.binding.datatypes.int, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 400, 8), unicode_default='6'))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MaxLength'), pyxb.binding.datatypes.int, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 401, 8), unicode_default='30'))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MaxStairLength'), pyxb.binding.datatypes.int, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 402, 8), unicode_default='20'))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Seed')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 328, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 345, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MaterialSeed')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 345, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FreshBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 362, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StaleBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 363, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GapProbability')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 364, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StairsProbability')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 373, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TurnProbability')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 382, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SizeAndPosition')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 391, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpeedInTicks')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 400, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MaxLength')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 401, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MaxStairLength')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 402, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 345, 8))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_75())
    sub_automata.append(_BuildAutomaton_76())
    sub_automata.append(_BuildAutomaton_77())
    sub_automata.append(_BuildAutomaton_78())
    sub_automata.append(_BuildAutomaton_79())
    sub_automata.append(_BuildAutomaton_80())
    sub_automata.append(_BuildAutomaton_81())
    sub_automata.append(_BuildAutomaton_82())
    sub_automata.append(_BuildAutomaton_83())
    sub_automata.append(_BuildAutomaton_84())
    sub_automata.append(_BuildAutomaton_85())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 327, 6)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_74()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Seed'), STD_ANON_11, scope=CTD_ANON_21, documentation='\n              The master seed for the random number generator used to make the maze.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 415, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MaterialSeed'), STD_ANON_12, scope=CTD_ANON_21, documentation='\n              Seed for the random number generator for determining block types - omit to allow master seed to control block types.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 432, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AllowDiagonalMovement'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 449, 8), unicode_default='false'))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SizeAndPosition'), CTD_ANON_22, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 450, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartBlock'), MazeTerminus, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 461, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndBlock'), MazeTerminus, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 462, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PathBlock'), MazeBlock, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 463, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FloorBlock'), MazeBlock, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 464, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GapBlock'), MazeBlock, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 465, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OptimalPathBlock'), MazeBlock, scope=CTD_ANON_21, documentation='\n              Omit this element if you want the optimal path to be unmarked.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 466, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubgoalBlock'), MazeBlock, scope=CTD_ANON_21, documentation='\n              Omit this element if you want the subgoal points to be unmarked.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 473, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Waypoints'), CTD_ANON_23, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 480, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GapProbability'), CTD_ANON_24, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 489, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AddQuitProducer'), CTD_ANON_25, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 498, 8)))

CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AddNavigationObservations'), CTD_ANON_26, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 503, 8)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Seed')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 415, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 432, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MaterialSeed')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 432, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AllowDiagonalMovement')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 449, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SizeAndPosition')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 450, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 461, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 462, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PathBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 463, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FloorBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 464, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GapBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 465, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 466, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OptimalPathBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 466, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 473, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubgoalBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 473, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 480, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Waypoints')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 480, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GapProbability')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 489, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 498, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AddQuitProducer')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 498, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 503, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AddNavigationObservations')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 503, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 432, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 466, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 473, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 480, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 498, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 503, 8))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_87())
    sub_automata.append(_BuildAutomaton_88())
    sub_automata.append(_BuildAutomaton_89())
    sub_automata.append(_BuildAutomaton_90())
    sub_automata.append(_BuildAutomaton_91())
    sub_automata.append(_BuildAutomaton_92())
    sub_automata.append(_BuildAutomaton_93())
    sub_automata.append(_BuildAutomaton_94())
    sub_automata.append(_BuildAutomaton_95())
    sub_automata.append(_BuildAutomaton_96())
    sub_automata.append(_BuildAutomaton_97())
    sub_automata.append(_BuildAutomaton_98())
    sub_automata.append(_BuildAutomaton_99())
    sub_automata.append(_BuildAutomaton_100())
    sub_automata.append(_BuildAutomaton_101())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 414, 6)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_86()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WaypointBlock'), MazeBlock, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 483, 14)))

CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WaypointItem'), BlockOrItemSpec, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 484, 14)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WaypointBlock')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 483, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WaypointItem')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 484, 14))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_102()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawObjectType'), DrawObjectType_, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 708, 2)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DrawObjectType')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 542, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_103()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'building'), ZeroToOne, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 729, 14)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'path'), ZeroToOne, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 730, 14)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'division'), ZeroToOne, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 731, 14)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'obstacle'), ZeroToOne, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 732, 14)))

CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hint'), ZeroToOne, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 733, 14)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'building')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 729, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'path')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 730, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'division')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 731, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'obstacle')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 732, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hint')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 733, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_104()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), BuildingSize, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 740, 14)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'height'), BuildingSize, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 741, 14)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'length'), BuildingSize, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 742, 14)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pathLength'), NonNegative, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 743, 14)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'divisions'), CTD_ANON_30, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 744, 14)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'horizontalObstacles'), HorizontalObstacles, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 753, 14)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'verticalObstacles'), VerticalObstacles, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 754, 14)))

CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hintLikelihood'), ZeroToOne, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 755, 14)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 740, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'height')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 741, 14))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'length')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 742, 14))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pathLength')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 743, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'divisions')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 744, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'horizontalObstacles')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 753, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'verticalObstacles')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 754, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hintLikelihood')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 755, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_105()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'southNorth'), NonNegative, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 747, 20)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'eastWest'), NonNegative, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 748, 20)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'aboveBelow'), NonNegative, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 749, 20)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'southNorth')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 747, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'eastWest')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 748, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'aboveBelow')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 749, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_107())
    sub_automata.append(_BuildAutomaton_108())
    sub_automata.append(_BuildAutomaton_109())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 746, 18)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_106()




HorizontalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'gap'), NonNegative, scope=HorizontalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 777, 6)))

HorizontalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bridge'), NonNegative, scope=HorizontalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 778, 6)))

HorizontalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'door'), NonNegative, scope=HorizontalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 779, 6)))

HorizontalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'puzzle'), NonNegative, scope=HorizontalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 780, 6)))

HorizontalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'jump'), NonNegative, scope=HorizontalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 781, 6)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HorizontalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'gap')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 777, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HorizontalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bridge')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 778, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HorizontalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'door')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 779, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HorizontalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'puzzle')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 780, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HorizontalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'jump')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 781, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_111())
    sub_automata.append(_BuildAutomaton_112())
    sub_automata.append(_BuildAutomaton_113())
    sub_automata.append(_BuildAutomaton_114())
    sub_automata.append(_BuildAutomaton_115())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 776, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HorizontalObstacles._Automaton = _BuildAutomaton_110()




VerticalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'stairs'), NonNegative, scope=VerticalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 787, 6)))

VerticalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ladder'), NonNegative, scope=VerticalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 788, 6)))

VerticalObstacles._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'jump'), NonNegative, scope=VerticalObstacles, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 789, 6)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'stairs')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 787, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ladder')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 788, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VerticalObstacles._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'jump')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 789, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_117())
    sub_automata.append(_BuildAutomaton_118())
    sub_automata.append(_BuildAutomaton_119())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 786, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VerticalObstacles._Automaton = _BuildAutomaton_116()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DrawingDecorator'), CTD_ANON_27, scope=CTD_ANON_31, documentation='\n        Draws structures into the world.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 534, 2)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Parametric'), CTD_ANON_73, scope=CTD_ANON_31, documentation='\n                Create an animation where the (x,y,z) position are determined by parametric equations. Recognised tokens are:\n\n                * basic arithmetic operations: +, -, /, *, % (modulo), ^ (to the power of)\n                * basic trig: sin, cos, tan, asin, acos, atan\n                * abs (absolute value)\n                * rand - replaces with a random float between 0 and 1\n                * t - the integer time variable, incremented with each time interval\n\n                For example, to create a structure which orbits in the x-z plane about the point (100,100,100) at a radius of 20, use:\n                "100+20*cos(t)" and "100+20*sin(t)" for the x and z strings.\n\n                The parser is not robust to mismatched brackets, typos, unrecognised tokens etc, and will fail silently.\n              ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 822, 10)))

CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Linear'), CTD_ANON_32, scope=CTD_ANON_31, documentation="\n                Create an animation where the (x,y,z) position is determined by the starting position, a constant velocity, and a bounding box.\n\n                Each time step, the position is updated by adding the velocity values. If the object goes outside of the bounding box in one dimension, that dimension's velocity will be flipped to reverse the direction.\n              ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 864, 10)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Parametric')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 822, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Linear')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 864, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DrawingDecorator')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 899, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_120()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CanvasBounds'), UnnamedGridDefinition, scope=CTD_ANON_32, documentation='\n                        Define the bounds of the canvas within which to move the object.\n                    ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 874, 16)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialPos'), Pos, scope=CTD_ANON_32, documentation="\n                        Define the starting position of the drawing's origin.\n                    ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 881, 16)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialVelocity'), Pos, scope=CTD_ANON_32, documentation="\n                        Define the initial velocity of the drawing's origin.\n                    ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 888, 16)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CanvasBounds')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 874, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialPos')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 881, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialVelocity')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 888, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_122())
    sub_automata.append(_BuildAutomaton_123())
    sub_automata.append(_BuildAutomaton_124())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 873, 14)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_121()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GoalStructureBounds'), UnnamedGridDefinition, scope=CTD_ANON_33, documentation='\n              Define the bounds of the structure to be copied. Anything in this volume when the mission starts will be used as the blueprint - eg anything drawn here using the {{{DrawingDecorator}}}, etc.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 927, 8)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlayerStructureBounds'), UnnamedGridDefinition, scope=CTD_ANON_33, documentation='\n              Define the bounds in which the agent should build their copy.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 934, 8)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BlockTypeOnCorrectPlacement'), DrawBlockBasedObjectType, scope=CTD_ANON_33, documentation='\n              If present, correctly placed blocks (in the source and the copy) will be changed to this block type.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 941, 8)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BlockTypeOnIncorrectPlacement'), DrawBlockBasedObjectType, scope=CTD_ANON_33, documentation='\n              If present, incorrectly placed blocks (in the copy only) will be changed to this block type.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 948, 8)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GoalStructureBounds')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 927, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlayerStructureBounds')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 934, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 941, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BlockTypeOnCorrectPlacement')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 941, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 948, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BlockTypeOnIncorrectPlacement')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 948, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 941, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 948, 8))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_126())
    sub_automata.append(_BuildAutomaton_127())
    sub_automata.append(_BuildAutomaton_128())
    sub_automata.append(_BuildAutomaton_129())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 926, 6)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_125()




RandomPlacement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'origin'), Pos, scope=RandomPlacement, documentation='\n                      Specifies the origin point or spawn point in the Minecraft world.\n                      \n                      If omitted, set to the world spawn point.\n                  ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 966, 10)))

RandomPlacement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'radius'), pyxb.binding.datatypes.decimal, scope=RandomPlacement, documentation='\n                      Specifies the radius of the circle around which the block may be randomly placed.\n                  ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 975, 10)))

RandomPlacement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'block'), BlockType, scope=RandomPlacement, documentation='\n                      Specifies the block type of the block to be randomly placed.\n                  ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 982, 10)))

RandomPlacement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'placement'), STD_ANON_14, scope=RandomPlacement, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 989, 10)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 966, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RandomPlacement._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'origin')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 966, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RandomPlacement._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'radius')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 975, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RandomPlacement._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'block')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 982, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 989, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RandomPlacement._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'placement')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 989, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 966, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 989, 10))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_131())
    sub_automata.append(_BuildAutomaton_132())
    sub_automata.append(_BuildAutomaton_133())
    sub_automata.append(_BuildAutomaton_134())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 960, 6)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RandomPlacement._Automaton = _BuildAutomaton_130()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'randomPlacementProperties'), RandomPlacement, scope=CTD_ANON_34, documentation='\n                          Properties for placing a block in the world randomly.\n                      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1024, 14)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'randomizeCompassLocation'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_34, documentation='\n                          Sets whether or not the compass location should be randomized within a certain radius.\n\n                          If false, will set the compass location to the block that was randomly placed.\n\n                          If true, will set the compass location to a random spot within the radius specified below.\n                      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1031, 14)))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'minRandomizedDistance'), pyxb.binding.datatypes.decimal, scope=CTD_ANON_34, documentation='\n                          The minimum distance a randomized compass location must be from the block that was randomly placed.\n                          \n                          If omitted, set to 0 blocks.\n                      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1042, 14), unicode_default='0'))

CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxRandomizedDistance'), pyxb.binding.datatypes.decimal, scope=CTD_ANON_34, documentation='\n                          The maximum distance a randomized compass location must be from the block that was randomly placed.\n                          \n                          If omitted, set to 8 blocks.\n                      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1051, 14), unicode_default='8'))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'randomPlacementProperties')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1024, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'randomizeCompassLocation')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1031, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1042, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'minRandomizedDistance')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1042, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1051, 14))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxRandomizedDistance')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1051, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1042, 14))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1051, 14))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_136())
    sub_automata.append(_BuildAutomaton_137())
    sub_automata.append(_BuildAutomaton_138())
    sub_automata.append(_BuildAutomaton_139())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1023, 10)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_135()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Width'), pyxb.binding.datatypes.int, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1103, 8)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Height'), pyxb.binding.datatypes.int, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1104, 8)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Width')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1103, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Height')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1104, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_140()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Width'), pyxb.binding.datatypes.int, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1117, 8)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Height'), pyxb.binding.datatypes.int, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1118, 8)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Width')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1117, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Height')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1118, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_141()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_89, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1534, 8)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1534, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1534, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_142()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_90, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1568, 8)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1568, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1568, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_143()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_91, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1593, 8)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1593, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1593, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_144()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_92, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1618, 8)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1618, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1618, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_145()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_93, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1641, 8)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1641, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1641, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_146()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_94, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1664, 8)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1664, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1664, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_147()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_95, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1687, 8)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1687, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1687, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_148()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModifierList'), CTD_ANON_96, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1729, 8)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1729, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModifierList')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1729, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_149()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Point'), PointWithToleranceAndDescription, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1776, 8)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Point')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1776, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_150()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Marker'), NamedPoint, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1914, 8)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Marker')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1914, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_151()




GridDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'min'), Pos, scope=GridDefinition, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1931, 6)))

GridDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'max'), Pos, scope=GridDefinition, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1932, 6)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(GridDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'min')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1931, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(GridDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'max')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1932, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
GridDefinition._Automaton = _BuildAutomaton_152()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Grid'), GridDefinition, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1948, 8)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Grid')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1948, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_153()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Range'), RangeDefinition, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1992, 8)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Range')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1992, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_154()




UnnamedGridDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'min'), CTD_ANON_62, scope=UnnamedGridDefinition, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2270, 6)))

UnnamedGridDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'max'), CTD_ANON_63, scope=UnnamedGridDefinition, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2277, 6)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UnnamedGridDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'min')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2270, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UnnamedGridDefinition._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'max')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2277, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UnnamedGridDefinition._Automaton = _BuildAutomaton_155()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Marker'), PointWithToleranceAndDescription, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2432, 8)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Marker')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2432, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_156()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Block'), BlockSpecWithDescription, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2457, 8)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Block')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2457, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_157()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Item'), BlockOrItemSpecWithDescription, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2470, 8)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Item')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2470, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_158()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Mob'), MobWithDescription, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2494, 8)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Mob')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2494, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_159()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Quota'), CommandQuota, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2540, 8)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2539, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Quota')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2540, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_160()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 92, 16)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentStart'), CTD_ANON_4, scope=CTD_ANON_71, documentation='\n              Defines the initial conditions of the player. This includes the location and the contents of their inventory.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 114, 4)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgentHandlers'), CTD_ANON_9, scope=CTD_ANON_71, documentation='\n              Defines the Mission Handlers block for an individual agent.\n            ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 403, 4)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 92, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentStart')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 93, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgentHandlers')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 94, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_161()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'complexity'), CTD_ANON_28, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 726, 8)))

CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'specification'), CTD_ANON_29, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 737, 8)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'complexity')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 726, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'specification')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 737, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_162()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'x'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 841, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'y'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 842, 16)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'z'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 843, 16)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'x')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 841, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'y')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 842, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'z')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 843, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_164())
    sub_automata.append(_BuildAutomaton_165())
    sub_automata.append(_BuildAutomaton_166())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 840, 14)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_163()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Width'), pyxb.binding.datatypes.int, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1142, 8)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Height'), pyxb.binding.datatypes.int, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1143, 8)))

CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ColourSpec'), MobWithColour, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1145, 10)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1144, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Width')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1142, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Height')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1143, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ColourSpec')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1145, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_167()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Width'), pyxb.binding.datatypes.int, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1160, 8)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Height'), pyxb.binding.datatypes.int, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1161, 8)))

CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DepthScaling'), CTD_ANON_76, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1162, 8)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1162, 8))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Width')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1160, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Height')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1161, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DepthScaling')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1162, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_168()




CommandListModifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), pyxb.binding.datatypes.string, scope=CommandListModifier, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1510, 6)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1510, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CommandListModifier._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1510, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CommandListModifier._Automaton = _BuildAutomaton_169()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommands'), CTD_ANON_40, scope=CTD_ANON_77, documentation='\n        When present, the Mod will accept commands to set the player\'s position and orientation directly.\n\n        Commands take the form of "verb <value>" e.g. "{{{tpx 13}}}" to set the x-coordinate to 13.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1558, 2)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommands'), CTD_ANON_41, scope=CTD_ANON_77, documentation='\n        When present, the Mod will accept commands that control movement in discrete jumps.\n\n        Commands take the form of "verb <value>" e.g. "{{{move 1}}}" to move forwards one square.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1583, 2)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InventoryCommands'), CTD_ANON_42, scope=CTD_ANON_77, documentation="\n        When present, the Mod will accept commands that control the player's inventory.\n      ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1610, 2)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommands'), CTD_ANON_43, scope=CTD_ANON_77, documentation='\n        When present, the Mod will accept simple commands that implement a basic form of crafting.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1633, 2)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChatCommands'), CTD_ANON_44, scope=CTD_ANON_77, documentation='\n        When present, the Mod will accept commands that send chat messages to the other players.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1656, 2)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommands'), CTD_ANON_45, scope=CTD_ANON_77, documentation='\n        When present, the Mod will accept a command that quits the mission.\n      ', location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1679, 2)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 394, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AbsoluteMovementCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 394, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 395, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteMovementCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 395, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 396, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InventoryCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 396, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 397, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChatCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 397, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 398, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SimpleCraftCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 398, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 399, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissionQuitCommands')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 399, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 394, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 395, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 396, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 397, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 398, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 399, 12))
    counters.add(cc_5)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_171())
    sub_automata.append(_BuildAutomaton_172())
    sub_automata.append(_BuildAutomaton_173())
    sub_automata.append(_BuildAutomaton_174())
    sub_automata.append(_BuildAutomaton_175())
    sub_automata.append(_BuildAutomaton_176())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/Mission.xsd', 393, 8)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_170()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Mob'), MobWithReward, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2087, 8)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Mob')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2087, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_177()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Marker'), PointWithReward, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2101, 8)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Marker')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2101, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_178()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Block'), BlockSpecWithRewardAndBehaviour, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2156, 8)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Block')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2156, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_179()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChatMatch'), ChatMatchSpec, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2190, 8)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChatMatch')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2190, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_180()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Item'), BlockOrItemSpecWithReward, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2210, 8)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Item')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2210, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_181()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Item'), BlockOrItemSpecWithReward, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2224, 8)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Item')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2224, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_182()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Reward'), MissionEndRewardCase, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2244, 8)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Reward')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2244, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_183()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RewardDensity'), RewardDensityForBuildAndBreak, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2297, 8)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AddQuitProducer'), CTD_ANON_64, scope=CTD_ANON_86, documentation="\n              If present, the mission will end when the copy exactly matches the original. Set {{{description}}} to the quit code you'd like to receive when this happens. (See {{{RewardForMissionEnd}}}.)\n            ", location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2298, 8)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RewardDensity')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2297, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2298, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AddQuitProducer')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2298, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2298, 8))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_185())
    sub_automata.append(_BuildAutomaton_186())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2296, 6)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_184()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Mob'), MobWithDescriptionAndReward, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2391, 8)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Mob')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 2391, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_187()




DrawContainer_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object'), ContainedObjectType, scope=DrawContainer_, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 597, 10)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DrawContainer_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 597, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DrawContainer_._Automaton = _BuildAutomaton_188()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), ContinuousMovementCommand, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1539, 18)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1539, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1539, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_189()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), AbsoluteMovementCommand, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1573, 18)))

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1573, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1573, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_190()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), DiscreteMovementCommand, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1598, 18)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1598, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1598, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_191()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), InventoryCommand, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1623, 18)))

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1623, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1623, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_192()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), SimpleCraftCommand, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1646, 18)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1646, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1646, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_193()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), ChatCommand, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1669, 18)))

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1669, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1669, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_194()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), MissionQuitCommand, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1692, 18)))

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1692, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1692, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_195()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), HumanLevelCommand, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1734, 18)))

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1734, 18))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('/Users/ethanwaldie/thesis/malmo/Schemas/MissionHandlers.xsd', 1734, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_196()


DrawEntity._setSubstitutionGroup(DrawObjectType)

DrawItem._setSubstitutionGroup(DrawObjectType)

DrawContainer._setSubstitutionGroup(DrawObjectType)

DrawSign._setSubstitutionGroup(DrawObjectType)

InventoryItem._setSubstitutionGroup(InventoryObject)

InventoryBlock._setSubstitutionGroup(InventoryObject)

DrawLine._setSubstitutionGroup(DrawObjectType)

DrawSphere._setSubstitutionGroup(DrawObjectType)

DrawBlock._setSubstitutionGroup(DrawObjectType)

DrawCuboid._setSubstitutionGroup(DrawObjectType)
