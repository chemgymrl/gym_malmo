import re

from xml.etree import ElementTree

import io

from common.malmo.binding import CreateFromDocument
from common.malmo.drawing_utils import *

import common.malmo.binding as malmo_types

class MissionSpec():
    """
    This class wraps the missionXML string and provides operators to manipulate it.

    """

    xmlns = 'http://ProjectMalmo.microsoft.com'

    def __init__(self, path:str):
        """
        Here the XML is loaded using the classes generated by pyXB.

        :param path: path to file containing mission XML
        """

        with open(path, 'r') as f:
            xml_text = f.read()
        self.path = path

        self.mission = CreateFromDocument(xml_text)

    def __str__(self):
        xml_text = self.mission.toxml()
        xml_text = re.sub(':ns1', '', xml_text, count=1)
        xml_text = re.sub('ns1:', '', xml_text)
        return xml_text


    def __repr__(self):
        try:
            return "<MissionXML - {}>".format(self.mission.About.Summary)
        except AttributeError:
            return "<MissionXML - UNK No Mission Summary>"

    def save(self, path:str=None):
        """
        Saves the XML to a specified path
        :param path:
        :return:
        """

        if not path:
            save_path = self.path
        else:
            save_path = path

        with open(save_path, 'w') as f:
            f.write(self.mission.toxml())


    @staticmethod
    def build_element(element, **kwargs):
        obj = element()
        for key, value in kwargs:
            obj.__setattr__(key, value)
        return obj

    def append_objects_to_drawing_decorator(self, objs:[malmo_types.DrawObjectType]):
        """
        This function manipulates the drawing decorator by appending items to it

        :param objs:
        :return:
        """
        for item in self.mission.ServerSection.ServerHandlers.DrawingDecorator:
            item.DrawObjectType += objs


if __name__ == '__main__':
    path = '/Users/ethanwaldie/thesis/gym_malmo/envs/discrete/schemas/keys_and_doors_mission.xml'

    mission_spec = MissionSpec(path=path)

    mission_spec.append_objects_to_drawing_decorator(DrawDoor(x=5, y=2, z=2))

    mission_spec.save(path)




